<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欣のblog</title>
  
  
  <link href="https://1578536879.github.io/atom.xml" rel="self"/>
  
  <link href="https://1578536879.github.io/"/>
  <updated>2024-02-06T07:33:57.377Z</updated>
  <id>https://1578536879.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>性能指标</title>
    <link href="https://1578536879.github.io/2024/02/06/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/"/>
    <id>https://1578536879.github.io/2024/02/06/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/</id>
    <published>2024-02-06T06:54:33.517Z</published>
    <updated>2024-02-06T07:33:57.377Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基于用户的性能指标"><a href="#基于用户的性能指标" class="headerlink" title="基于用户的性能指标"></a>基于用户的性能指标</h2><h3 id="FCP：白屏时间"><a href="#FCP：白屏时间" class="headerlink" title="FCP：白屏时间"></a>FCP：白屏时间</h3><h1></h1><table><thead><tr><th>FCP 时长</th><th>颜色编码</th><th>FCP 分数(HTTP 存档百分位数)</th></tr></thead><tbody><tr><td>0-2s</td><td><font color=green>快速</font></td><td>75-100</td></tr><tr><td>2-4s</td><td><font color=yellow>中等</font></td><td>50-74</td></tr><tr><td>&gt;4s</td><td><font color=red>慢</font></td><td>0-49</td></tr></tbody></table><h3 id="LCP：主要内容可见时间"><a href="#LCP：主要内容可见时间" class="headerlink" title="LCP：主要内容可见时间"></a>LCP：主要内容可见时间</h3><p>(可视区域最大-资源较大 元素到屏幕上的间隔时间)</p><h1></h1><p>并不是只初始加载页面的，而是指页面元素变化的时候</p><blockquote><p>LCP 考虑的元素</p></blockquote><ul><li><code>&lt;img&gt;</code>元素</li><li><code>&lt;image&gt;</code>元素的<code>&lt;svg&gt;</code></li><li><code>&lt;video&gt;</code></li><li>通过<code>[url()](https://developer.mozilla.org/en-US/docs/Web/CSS/url())</code>函数加载背景图片的元素</li><li>包含文本节点或者其他内联文字元素子级的块级元素</li></ul><table><thead><tr><th>LCP 时长</th><th>颜色编码</th></tr></thead><tbody><tr><td>0-2.5s</td><td><font color=green>快速</font></td></tr><tr><td>2.5-4s</td><td><font color=yellow>中等</font></td></tr><tr><td>&gt;4s</td><td><font color=red>慢</font></td></tr></tbody></table><h3 id="FID：首次输入延迟"><a href="#FID：首次输入延迟" class="headerlink" title="FID：首次输入延迟"></a>FID：首次输入延迟</h3><p>第一次与页面交互(点击按钮链接等)到浏览器实际能够响应这次交互的时间</p><h1></h1><blockquote><p>输入延迟是因为浏览器的主线程处于繁忙状态(比如忙于解析和执行程序加载的大量计算的 js)，导致无法及时响应用户。</p></blockquote><blockquote><p>第一次的输入延迟通常发生在 FCP 和 TTI 之间，因为页面虽然已经呈现了，但是还无法可靠交互</p></blockquote><table><thead><tr><th>FID 时长</th><th>颜色编码</th></tr></thead><tbody><tr><td>0-0.1s</td><td><font color=green>快速</font></td></tr><tr><td>0.1-0.3s</td><td><font color=yellow>中等</font></td></tr><tr><td>&gt;0.3s</td><td><font color=red>慢</font></td></tr></tbody></table><h3 id="TTI：第一次完全达到可交互状态"><a href="#TTI：第一次完全达到可交互状态" class="headerlink" title="TTI：第一次完全达到可交互状态"></a>TTI：第一次完全达到可交互状态</h3><p>浏览器可以持续性的响应用户的交互事件。完全达到可交互的状态时间点是在最后一个长文物(50ms 以上才能完成的任务)完成的事件，并且在随后的 5s 内网络和主线程是空闲的</p><h1></h1><table><thead><tr><th>TTI 时长</th><th>颜色编码</th></tr></thead><tbody><tr><td>0-3.8s</td><td><font color=green>快速</font></td></tr><tr><td>3.8-7.3s</td><td><font color=yellow>中等</font></td></tr><tr><td>&gt;7.3s</td><td><font color=red>慢</font></td></tr></tbody></table><h3 id="TBT：总阻塞时间"><a href="#TBT：总阻塞时间" class="headerlink" title="TBT：总阻塞时间"></a>TBT：总阻塞时间</h3><p>即 FCP 和 TTI 之间的间隔时长，在改时间范围内，主线程被阻塞足够长的时间以防止用户的输入事件。</p><h1></h1><blockquote><p>长任务，执行时长超过了 50ms</p></blockquote><blockquote><p>页面总阻塞时间&#x3D;FCP 和 TTI 之间发生的每个长任务的阻塞时间总和</p></blockquote><blockquote><p>长任务的阻塞时间&#x3D;长任务的实际执行时长-50ms</p></blockquote><table><thead><tr><th>TBT 时长</th><th>颜色编码</th></tr></thead><tbody><tr><td>0-0.3s</td><td><font color=green>快速</font></td></tr><tr><td>0.3-0.6s</td><td><font color=yellow>中等</font></td></tr><tr><td>&gt;0.6s</td><td><font color=red>慢</font></td></tr></tbody></table><h3 id="CLS：累计布局偏移"><a href="#CLS：累计布局偏移" class="headerlink" title="CLS：累计布局偏移"></a>CLS：累计布局偏移</h3><p>在整个生命周期中发生的每个意外的布局移位(即在不是预计的位置偏移或者样式错乱)的所有单独布局。</p><p>保证页面的视觉稳定性</p><h1></h1><blockquote><p>元素的意外移动通常是由于异步加载资源或者 DOM 元素动态添加到现有内容商法的页面而发生的</p></blockquote><blockquote><p>可能是由于尺寸未知的多媒体资源，字体变化或者动态调整自身大小的第三方广告、小部件</p></blockquote><table><thead><tr><th>TBT 时长</th><th>颜色编码</th></tr></thead><tbody><tr><td>0-0.1ms</td><td><font color=green>快速</font></td></tr><tr><td>0.1-0.25ms</td><td><font color=yellow>中等</font></td></tr><tr><td>&gt;0.25ms</td><td><font color=red>慢</font></td></tr></tbody></table><h3 id="速度指数-SI-：页面可视区域中内容的填充速度"><a href="#速度指数-SI-：页面可视区域中内容的填充速度" class="headerlink" title="速度指数(SI)：页面可视区域中内容的填充速度"></a>速度指数(SI)：页面可视区域中内容的填充速度</h3><p>计算页面可见区域内容显示的平均时间来衡量</p><h1></h1><blockquote><p>捕获浏览器加载页面过程的视频，然后对每 100ms 间隔的页面截图计算页面内容的填充百分比</p></blockquote><table><thead><tr><th>TBT 时长</th><th>颜色编码</th></tr></thead><tbody><tr><td>0-4.3s</td><td><font color=green>快速</font></td></tr><tr><td>4.3-5.8ms</td><td><font color=yellow>中等</font></td></tr><tr><td>&gt;5.8ms</td><td><font color=red>慢</font></td></tr></tbody></table><h2 id="RAIL-性能模型"><a href="#RAIL-性能模型" class="headerlink" title="RAIL 性能模型"></a><a href="https://zhuanlan.zhihu.com/p/422402515">RAIL 性能模型</a></h2><blockquote><p>RAIL</p></blockquote><ul><li>R(响应)：应该尽可能快速的响应用户，应该在 100ms 内相应用户</li><li>A(Animation)：在展示动画的时候，每一帧应该以 16ms 进行渲染，这样可以保持动画的一致性，避免卡顿</li><li>I(空闲)：当使用 JS 主线程的时候，应该把任务划分到执行时间小于 50ms 的片段中，这样可以释放线程以进行用户交互</li><li>L(加载)：应该在小于 1s 的时间内完成加载网页，且可以进行用户交互</li></ul><blockquote><p>感知延迟的时间窗口</p></blockquote><table><thead><tr><th>延迟时长</th><th>用户反映</th></tr></thead><tbody><tr><td>0-16ms</td><td>人眼可以感知每秒 60 帧的动画，即每帧 16ms，除了浏览器将一帧画面绘制到屏幕上的时间，网站应用大约需要 10ms 生成一帧</td></tr><tr><td>0-100ms</td><td>在该范围内相应用户的操作，属于流畅的体验</td></tr><tr><td>100-1000ms</td><td>能够感知明显延迟</td></tr><tr><td>&gt;1s</td><td>用户注意力将离开对执行任务的关注</td></tr><tr><td>&gt;10s</td><td>感到过于长以至于失望，可能回放弃任务</td></tr></tbody></table><h2 id="Web-Vitals"><a href="#Web-Vitals" class="headerlink" title="Web Vitals"></a>Web Vitals</h2><h3 id="Core-Web-Vitals"><a href="#Core-Web-Vitals" class="headerlink" title="Core Web Vitals"></a>Core Web Vitals</h3><p>应用于所有 web 页面的 Web Vitals 子集，为其最重要的核心</p><p>主要指标</p><ul><li>LCP：加载性能</li><li>FID：交互性</li><li>CLS：视觉稳定性</li></ul><h2 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h2><ul><li>LightHouse</li><li><a href="https://www.webpagetest.org/">WebPageTest</a></li><li>DevTools</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基于用户的性能指标&quot;&gt;&lt;a href=&quot;#基于用户的性能指标&quot; class=&quot;headerlink&quot; title=&quot;基于用户的性能指标&quot;&gt;&lt;/a&gt;基于用户的性能指标&lt;/h2&gt;&lt;h3 id=&quot;FCP：白屏时间&quot;&gt;&lt;a href=&quot;#FCP：白屏时间&quot; class=&quot;</summary>
      
    
    
    
    <category term="额外内容" scheme="https://1578536879.github.io/categories/%E9%A2%9D%E5%A4%96%E5%86%85%E5%AE%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>从地址栏到页面展示的流程</title>
    <link href="https://1578536879.github.io/2024/02/06/%E8%BE%93%E5%85%A5url%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA/"/>
    <id>https://1578536879.github.io/2024/02/06/%E8%BE%93%E5%85%A5url%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA/</id>
    <published>2024-02-06T06:54:33.515Z</published>
    <updated>2024-02-06T07:34:30.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浏览器进程"><a href="#浏览器进程" class="headerlink" title="浏览器进程"></a>浏览器进程</h2><h1></h1><blockquote><p>1、<font color=red>UI 线程</font>会判断输入的内容是搜索关键词还是 URL</p></blockquote><ul><li>如果是搜索关键词，跳转至默认搜索引擎对应都搜索 URL，</li><li>如果输入的内容是 URL，则开始请求 URL。</li></ul><blockquote><p>2、UI 线程将关键词搜索对应的 URL 或输入的 URL 交给<font color=red>网络线程</font></p></blockquote><ul><li>UI 线程使 Tab 前的图标展示为加载中状态</li></ul><blockquote><p>3、网络线程发出请求，获取请求返回内容</p></blockquote><ul><li>先查询是否有url是ip还是域名，如果是域名，先去进行查看是否有对应的ip解析缓存，没有就进行DNS查询</li><li>建立三次握手（AKC，seq这些）</li><li>发送请求</li><li>服务器返回请求</li><li>如果收到服务器的 301 重定向响应，它就会告知 UI 线程进行重定向然后它会再次发起一个新的网络请求。</li><li>根据响应头中的 Content-Type 字段来确定响应主体的媒体类型</li><li>如果媒体类型是一个<font color=red>HTML</font>文件，则将响应数据交给<font color=red>渲染进程</font></li><li>如果是<font color=red>zip </font>文件或者<font color=red>其它</font>文件，会把相关数据传输给<font color=red>存储线程</font>，下载管理器。</li><li>浏览器会进行 <font color=red>Safe Browsing </font>安全检查，如果域名或者请求内容匹配到已知的恶意站点，网络线程会展示一个<font color=red>警告页</font>。除此之外，网络线程还会做<font color=red> CORB</font>（Cross Origin Read Blocking）检查来确定那些敏感的跨站数据不会被发送至渲染进程</li><li>四次挥手</li></ul><blockquote><p>4、<font color=red>网络线程</font>确信浏览器可以导航到请求网页，网络线程会通知<font color=red> UI 线程</font>数据已经准备好，UI 线程会查找到一个 <font color=red>渲染进程</font>进行网页的渲染。</p></blockquote><ul><li>浏览器为了对查找渲染进程这一步骤进行优化，考虑到网络请求获取响应需要时间，所以在第二步开始，浏览器已经预先查找和启动了一个渲染进程，如果中间步骤一切顺利，当 network thread 接收到数据时，渲染进程已经准备好了，但是如果遇到重定向，这个准备好的渲染进程也许就不可用了，这个时候会重新启动一个渲染进程。</li></ul><blockquote><p>5、浏览器进程 会向 渲染进程 发送 IPC 消息(进程通信的一种方式)来确认导航</p></blockquote><ul><li>浏览器进程将准备好的数据发送给渲染进程，渲染进程接收到数据之后，又发送 IPC 消息给浏览器进程，告诉浏览器进程导航已经提交了，页面开始加载。</li></ul><blockquote><p>6、当导航提交完成后，渲染进程开始加载资源及渲染页面，当页面渲染完成后（页面及内部的 iframe 都触发了 onload 事件），会向浏览器进程发送 IPC 消息，告知浏览器进程，这个时候 UI thread 会停止展示 tab 中的加载中图标。</p></blockquote><h2 id="渲染进程-关键渲染路径-CRP"><a href="#渲染进程-关键渲染路径-CRP" class="headerlink" title="渲染进程-关键渲染路径(CRP)"></a>渲染进程-关键渲染路径(CRP)</h2><h1></h1><blockquote><p>当渲染进程接受到导航的确认信息后，开始接受来自浏览器进程的数据，<font color=red>主线程</font>会解析数据转化为 DOM 对象。</p></blockquote><ul><li>解析到图片、CSS、JavaScript 脚本等<font color=red>资源</font>，这些资源是需要从网络或者缓存中获取的，主线程在构建 DOM 过程中如果遇到了这些资源，逐一发起<font color=red>请求</font>去获取，而为了提升效率，浏览器也会运行<font color=red>预加载扫描</font>（preload scanner）程序。“预加载扫描器”是<font color=red>并发</font>运行的，如果如果 HTML 中存在 img、link 等标签，预加载扫描程序会把这些请求传递给<font color=red>浏览器进程的网络线程</font>进行资源下载。</li><li>找到一个<font color=red><code>&lt; script &gt;</code>标签</font>时，它会<font color=red>暂停</font> HTML 文档的解析，并且必须加载、解析和执行 JavaScript 代码。因为<font color=red> JS 可以使用<code>document.write()</code>改变整个 DOM 结构之类的东西来改变文档的形状</font>（ HTML 规范中的解析模型概述有一个很好的图表）。这就是 HTML 解析器必须等待 JavaScript 运行才能继续解析 HTML 文档的原因。<a href="https://mathiasbynens.be/notes/shapes-ics">V8 关于 JS 执行中的事情</a></li><li>因此如果 js 没有<code>document.write()</code>，可以添加 async 或 defer 属性到<code>&lt; script &gt;</code>标签。然后浏览器异步加载和运行 JavaScript 代码，这样不会阻止解析 DOM</li></ul><blockquote><p><font color=red>主线程</font>依据 Css 选择器以及浏览器默认样式来计算每个元素应该具备的具体样式</p></blockquote><blockquote><p><font color=red>主线程</font>会遍历 DOM 及相关元素的计算样式，构建出包含每个元素的页面坐标信息及盒子模型大小的布局树（Render Tree），遍历过程中，会<font color=red>跳过</font>隐藏的元素（display: none），另外，<font color=red>伪元素</font>虽然在 DOM 树上不可见，但是在<font color=red>布局树</font>上是可见的。</p></blockquote><blockquote><p>遍历布局树（layout tree），生成一系列的绘画记录（paint records）。绘画记录可以看做是记录各元素绘制先后顺序的笔记-绘画顺序表。</p></blockquote><blockquote><p><font color=red>主线程</font>需要遍历渲染树来创建一棵<font color=red>层次树</font>（Layer Tree），对于添加了<font color=red> will-change</font> CSS 属性的元素，会被看做<font color=red>单独</font>的一层，没有 will-change CSS 属性的元素，浏览器会根据情况决定是否要把该元素放在单独的层。</p></blockquote><ul><li>当页面的层超过一定的数量后，层的合成操作要比在每个帧中光栅化页面的一小部分还要慢，因此衡量你应用的渲染性能是十分重要的一件事情。</li></ul><blockquote><p>主线程会把这些信息通知给<font color=red>合成器</font>线程，合成器线程开始对层次数的每一层进行光栅化。 <br/>为了优化显示体验，合成线程可以给不同的光栅线程赋予不同的优先级，将那些在视口中的或者视口附近的层先被光栅化。</p></blockquote><ul><li><p>有的层的可以达到整个页面的大小，合成器需要将它们切分为一块又一块的小图块（tiles）</p></li><li><p>合成器将这些小图块分别进行发送给一系列<font color=red>光栅</font>线程（raster threads）进行光栅化</p></li><li><p>结束后光栅线程会将每个图块的光栅结果存在 GPU Process 的内存中</p></li></ul><blockquote><p>合成线程会收集图块上面叫做绘画四边形（draw quads）的信息来构建一个合成帧（compositor frame）。</p></blockquote><ul><li><p>绘画四边形：包含图块在内存的位置以及图层合成后图块在页面的位置之类的信息。</p></li><li><p>合成帧：代表页面一个帧的内容的绘制四边形集合。</p></li></ul><blockquote><p><font color=red>合成线程</font>就会通过 IPC 向<font color=red>浏览器进程</font>（browser process）提交（commit）一个<font color=red>渲染帧</font>。</p></blockquote><ul><li><p>这个时候可能有另外一个合成帧被浏览器进程的 UI 线程（UI thread）提交以改变浏览器的 UI。这些合成帧都会被发送给 GPU 从而展示在屏幕上。</p></li><li><p>如果合成线程收到页面滚动的事件，合成线程会构建另外一个组合帧发送给 GPU 来更新页面。</p></li></ul><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><blockquote><p>当点击或者输入的时候，首先接受到事件的是<font color=red>浏览器进程</font></p></blockquote><blockquote><p>浏览器进程不处理，将事件丢给<font color=red>渲染进程</font></p></blockquote><blockquote><p>渲染进程依据事件发生的<font color=red>坐标</font>，找到<font color=red>目标对象</font>，运行附加的事件侦听器来适当地处理事件。</p></blockquote><blockquote><p><font color=red>合成器线程</font>会标记页面中绑定有事件处理器的区域为<font color=red>非快速滚动区域</font>(non-fast scrollable region)</p></blockquote><ul><li><p>当合成器线程向主线程发送输入事件时，首先要运行的是命中测试以找到事件目标。命中测试使用渲染过程中生成的绘制记录数据来找出发生事件的点坐标下方的内容。</p></li><li><p>如果事件发生在这些存在标注的区域，合成器线程会把事件信息发送给主线程，等待主线程进行事件处理</p></li><li><p>如果事件不是发生在这些区域，合成器线程则会直接合成新的帧而不用等到主线程的响应。</p></li><li><p>所以，在进行事件监听的时候，尤其是事件捕获或者对整个文档进行事件监听的时候需要考虑一下，因为整个页面都被标记为非快速滚动区域。这意味着即使不关心来自页面某些部分的输入，合成器线程也必须与主线程通信并在每次输入事件进入时等待它。因此，合成器的平滑滚动能力被打败了。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浏览器在主线程中侦听事件，但合成器也可以继续合成新帧。</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">addEventListener</span>(enent, func, &#123; <span class="attr">passive</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/qq_41499782/article/details/120039980">合成器线程详解&#x2705;</a></p><p><a href="https://blog.csdn.net/qq_35546787/article/details/107788179?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.topblog&spm=1001.2101.3001.4242.1&utm_relevant_index=3">一文搞懂浏览器的工作原理&#x270B;</a></p><p> <a href="https://blog.csdn.net/qq_41499782/article/details/120035602">chrome 渲染器进程的内部工作原理&#x270B;</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;浏览器进程&quot;&gt;&lt;a href=&quot;#浏览器进程&quot; class=&quot;headerlink&quot; title=&quot;浏览器进程&quot;&gt;&lt;/a&gt;浏览器进程&lt;/h2&gt;&lt;h1&gt;&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;1、&lt;font color=red&gt;UI 线程&lt;/font&gt;会判断输</summary>
      
    
    
    
    <category term="浏览器" scheme="https://1578536879.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>手写题</title>
    <link href="https://1578536879.github.io/2024/02/06/%E6%89%8B%E5%86%99%E9%A2%98/"/>
    <id>https://1578536879.github.io/2024/02/06/%E6%89%8B%E5%86%99%E9%A2%98/</id>
    <published>2024-02-06T06:54:33.513Z</published>
    <updated>2024-02-06T07:34:12.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="将一维数组转化为-tree"><a href="#将一维数组转化为-tree" class="headerlink" title="将一维数组转化为 tree"></a>将一维数组转化为 tree</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&quot;01&quot;</span>, <span class="attr">parentId</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&quot;节点1&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&quot;011&quot;</span>, <span class="attr">parentId</span>: <span class="string">&quot;01&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;节点1-1&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&quot;0111&quot;</span>, <span class="attr">parentId</span>: <span class="string">&quot;011&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;节点1-1-1&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&quot;02&quot;</span>, <span class="attr">parentId</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&quot;节点2&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&quot;022&quot;</span>, <span class="attr">parentId</span>: <span class="string">&quot;02&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;节点2-2&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&quot;023&quot;</span>, <span class="attr">parentId</span>: <span class="string">&quot;02&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;节点2-3&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&quot;0222&quot;</span>, <span class="attr">parentId</span>: <span class="string">&quot;022&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;节点2-2-2&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&quot;03&quot;</span>, <span class="attr">parentId</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&quot;节点3&quot;</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li><p>解法 1：</p><p>使用循环+递归的形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findParent</span>(<span class="params">tree, child</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> cur <span class="keyword">of</span> tree) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      cur.<span class="property">id</span> !== child.<span class="property">parentId</span> &amp;&amp;</span><br><span class="line">      cur.<span class="property">children</span> &amp;&amp;</span><br><span class="line">      cur.<span class="property">children</span>.<span class="property">length</span> !== <span class="number">0</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      cur = <span class="title function_">findParent</span>(cur.<span class="property">children</span>, child);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur.<span class="property">id</span> === child.<span class="property">parentId</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (cur.<span class="property">children</span>) &#123;</span><br><span class="line">        cur.<span class="property">children</span>.<span class="title function_">push</span>(child);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cur.<span class="property">children</span> = [child];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> tree;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arrToTree</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> tree = [];</span><br><span class="line">  <span class="keyword">const</span> len = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i].<span class="property">parentId</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      tree.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      tree = <span class="title function_">findParent</span>(tree, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解法 2：</p><p>使用 map 映射和 js 当引用类型赋值时，是<strong>拷贝的地址</strong>的特性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">con</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">const</span> map = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">res, v</span>) =&gt;</span> ((res[v.<span class="property">id</span>] = v), res), &#123;&#125;);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">parentId</span> <span class="keyword">in</span> map) &#123;</span><br><span class="line">      <span class="keyword">const</span> parent = map[item.<span class="property">parentId</span>];</span><br><span class="line">      parent.<span class="property">children</span> = parent.<span class="property">children</span> || [];</span><br><span class="line">      parent.<span class="property">children</span>.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="object-键扁平化"><a href="#object-键扁平化" class="headerlink" title="object 键扁平化"></a>object 键扁平化</h2><p>原始数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;d&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;d&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;e&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;h&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;i&quot;</span><span class="punctuation">:</span> <span class="string">&quot;i&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>转换数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;a.b.c&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;a.d&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;d&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;e.f.g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;e.f.f.h.i&quot;</span><span class="punctuation">:</span> <span class="string">&quot;i&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;e.g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g2&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>解法 1<br>采用 dfs 思维做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dfs</span>(<span class="params">tree, preKey = <span class="string">&quot;&quot;</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> tree !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">key</span>: preKey,</span><br><span class="line">      <span class="attr">value</span>: tree,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(tree);</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> keys) &#123;</span><br><span class="line">    <span class="keyword">let</span> val = <span class="title function_">dfs</span>(tree[key], preKey + <span class="string">&quot;.&quot;</span> + key);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(val)) &#123;</span><br><span class="line">      res = res.<span class="title function_">concat</span>(val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ObjectKeyToStr</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj);</span><br><span class="line">  <span class="keyword">let</span> res = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> keys) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="title function_">dfs</span>(obj[key], key);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(data)) &#123;</span><br><span class="line">      data.<span class="title function_">forEach</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">        res[ele.<span class="property">key</span>] = ele.<span class="property">value</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res[data.<span class="property">key</span>] = data.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解法 2</p><p>采用类bfs的思路</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getKeys</span>(<span class="params">tree</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(tree);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bfs</span>(<span class="params">tree</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> stack = [];</span><br><span class="line">  <span class="keyword">let</span> res = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> item = tree;</span><br><span class="line">  <span class="keyword">while</span> (item) &#123;</span><br><span class="line">    <span class="title function_">getKeys</span>(item).<span class="title function_">forEach</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> currdata = item[ele];</span><br><span class="line">      <span class="comment">// 因为额外加了_key属性，因此需要跳过这个属性</span></span><br><span class="line">      <span class="keyword">if</span> (ele !== <span class="string">&quot;_key&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(currdata) === <span class="string">&quot;[object Object]&quot;</span>) &#123;</span><br><span class="line">          stack.<span class="title function_">unshift</span>(&#123;</span><br><span class="line">            ...currdata,</span><br><span class="line">            <span class="attr">_key</span>: item.<span class="property">_key</span> ? item.<span class="property">_key</span> + <span class="string">&quot;.&quot;</span> + ele : ele,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> key = item.<span class="property">_key</span> ? item.<span class="property">_key</span> + <span class="string">&quot;.&quot;</span> + ele : ele;</span><br><span class="line">          <span class="keyword">delete</span> currdata.<span class="property">_key</span>;</span><br><span class="line">          res[key] = currdata;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    item = stack.<span class="title function_">shift</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;将一维数组转化为-tree&quot;&gt;&lt;a href=&quot;#将一维数组转化为-tree&quot; class=&quot;headerlink&quot; title=&quot;将一维数组转化为 tree&quot;&gt;&lt;/a&gt;将一维数组转化为 tree&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;</summary>
      
    
    
    
    <category term="js" scheme="https://1578536879.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>大数据渲染</title>
    <link href="https://1578536879.github.io/2024/02/06/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B8%B2%E6%9F%93/"/>
    <id>https://1578536879.github.io/2024/02/06/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B8%B2%E6%9F%93/</id>
    <published>2024-02-06T06:54:33.511Z</published>
    <updated>2024-02-06T07:33:41.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大数据渲染"><a href="#大数据渲染" class="headerlink" title="大数据渲染"></a>大数据渲染</h1><h2 id="table-分页"><a href="#table-分页" class="headerlink" title="table 分页"></a>table 分页</h2><ul><li>每页展示固定的数据</li></ul><h1></h1><h2 id="定时更新-分批渲染"><a href="#定时更新-分批渲染" class="headerlink" title="定时更新,分批渲染"></a>定时更新,分批渲染</h2><p>用<a href="https://zhuanlan.zhihu.com/p/64917985?from_voters_page=true"><code>requestAnimationFrame</code></a>或者定时器, 加上<code>DocumentFragment</code>进行每次数据的加载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fragment = <span class="keyword">new</span> <span class="title class_">DocumentFragment</span>();</span><br><span class="line">  <span class="keyword">const</span> fruits = [<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Melon&quot;</span>];</span><br><span class="line">  fruits.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fruit</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ele = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">    ele.<span class="property">textContent</span> = fruit;</span><br><span class="line">    fragment.<span class="title function_">appendChild</span>(ele);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(fragment);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>requestAnimationFrame</code>是在<code>style/layout/paint</code>之前触发</li></ul><h2 id="使用虚拟列表IntersectionObserver"><a href="#使用虚拟列表IntersectionObserver" class="headerlink" title="使用虚拟列表IntersectionObserver"></a>使用虚拟列表<a href="http://www.ruanyifeng.com/blog/2016/11/intersectionobserver_api.html"><code>IntersectionObserver</code></a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一个监听对象</span></span><br><span class="line"><span class="keyword">let</span> io = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(</span><br><span class="line">  <span class="function">(<span class="params">entris</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;IntersectionObserver&quot;</span>, entris);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">root</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">thresholds</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 开始监听</span></span><br><span class="line">io.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;b&quot;</span>));</span><br></pre></td></tr></table></figure><ul><li><p>当元素初次在页面上显示, 以及之后每次显示和隐藏都会触发回调</p></li><li><p>IntersectionObserver API 是异步的，不随着目标元素的滚动同步触发。</p></li><li><p>只有线程空闲下来，才会执行观察器。这意味着，这个观察器的优先级非常低，只在其他任务执行完，浏览器有了空闲才会执行。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;大数据渲染&quot;&gt;&lt;a href=&quot;#大数据渲染&quot; class=&quot;headerlink&quot; title=&quot;大数据渲染&quot;&gt;&lt;/a&gt;大数据渲染&lt;/h1&gt;&lt;h2 id=&quot;table-分页&quot;&gt;&lt;a href=&quot;#table-分页&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="业务场景" scheme="https://1578536879.github.io/categories/%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>v-model 和 reactive 组合使用的问题</title>
    <link href="https://1578536879.github.io/2024/02/06/v-model%E5%92%8Creactive%E7%BB%84%E5%90%88%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://1578536879.github.io/2024/02/06/v-model%E5%92%8Creactive%E7%BB%84%E5%90%88%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2024-02-06T06:54:33.509Z</published>
    <updated>2024-02-06T07:33:18.115Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>父组件的数据是一个<code>reactive</code>的数据，传入子组件时用<code>v-model:xxx</code>的形式传入子组件，那么子组件在此情况下调用<code>update:xxx</code>时，并不会引起父组件的数据变化(包含页面和通过<code>watch</code>等方式去监听的回调)</p><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><blockquote><p>父组件代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">test</span> <span class="attr">v-model:data</span>=<span class="string">&quot;testdata&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> testdata = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;父级参数&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> testdata,</span><br><span class="line">  <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;父级变化了11111&quot;</span>, val);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>子组件代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;test.name&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;onIpt&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;reactive, watchEffect&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>([<span class="string">&#x27;data&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;update:data&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> test = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;123&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">onIpt</span> = e =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  test.<span class="property">name</span> = e.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子组件更新&quot;</span>, test)</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">emit</span>(<span class="string">&quot;update:data&quot;</span>, test)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子组件接收到的父组件数据更新&quot;</span>, test)</span></span><br><span class="line"><span class="language-javascript">  test.<span class="property">name</span> = props.<span class="property">data</span>.<span class="property">name</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>实际操作</p></blockquote><p>在进行输入的时候，只触发了<code>onIpt</code>函数，父组件的<code>watch</code>和子组件的<code>watchEffect</code>都未触发</p><p><a href="https://imgse.com/i/pPIiMwT"><img src="https://z1.ax1x.com/2023/09/20/pPIiMwT.png" alt="pPIiMwT.png"></a></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在<a href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#limitations-of-reactive">vue</a>的官方文档上面写明的<code>reactive</code>的局限性：</p><ul><li><p><em>有限的值类型</em></p><p>它只能用于对象类型 (对象、数组和如 Map、Set 这样的集合类型)。它不能持有如 string、number 或 boolean 这样的原始类型。</p></li><li><p><em>不能替换整个对象</em></p><p>由于 Vue 的响应式跟踪是通过属性访问实现的，因此我们必须始终保持对响应式对象的相同引用。这意味着我们不能轻易地“替换”响应式对象，因为这样的话与第一个引用的响应性连接将丢失</p></li><li><p><em>对解构操作不友好</em></p><p>当我们将响应式对象的原始类型属性解构为本地变量时，或者将该属性传递给函数时，我们将丢失响应性连接</p></li></ul><p>上面第二条说明了<code>reactive</code>的响应式是依据  <strong>属性访问</strong> 实现的，而<code>update:data</code>的时候是传递的整个对象，所以并不会引起<code>reactive</code>的响应式。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="父组件的数据改为ref"><a href="#父组件的数据改为ref" class="headerlink" title="父组件的数据改为ref"></a>父组件的数据改为<code>ref</code></h3><p>ref是针对整体的一个响应式，因此就不会产生这个问题</p><h3 id="利用js引用对象的特性，修改prop的属性"><a href="#利用js引用对象的特性，修改prop的属性" class="headerlink" title="利用js引用对象的特性，修改prop的属性"></a>利用js引用对象的特性，修改prop的属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onIpt</span> = e =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> data = props.<span class="property">data</span>;</span><br><span class="line">  data.<span class="property">name</span> = e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子组件更新&quot;</span>, data)</span><br><span class="line">  <span class="comment">// 实际是否加上update的函数，父组件的watch都会触发</span></span><br><span class="line">  <span class="comment">// emit(&quot;update:data&quot;, test)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样不符合单向数据流的特性，因此这个方法不合适</p><h3 id="父组件监听事件"><a href="#父组件监听事件" class="headerlink" title="父组件监听事件"></a>父组件监听事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">test</span> <span class="attr">v-model:data</span>=<span class="string">&quot;testdata&quot;</span> @<span class="attr">update:data</span>=<span class="string">&quot;onUpdateData&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onUpdateData</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;父组件事件的回调&quot;</span>, data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样在子组件调用<code>update:data</code>的方法时，也会触发父组件的<code>onUpdateData</code>方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h</summary>
      
    
    
    
    <category term="vue" scheme="https://1578536879.github.io/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>v-html渲染自定义组件</title>
    <link href="https://1578536879.github.io/2024/02/06/v-html%E6%B8%B2%E6%9F%93%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/"/>
    <id>https://1578536879.github.io/2024/02/06/v-html%E6%B8%B2%E6%9F%93%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/</id>
    <published>2024-02-06T06:54:33.507Z</published>
    <updated>2024-02-06T07:33:00.298Z</updated>
    
    <content type="html"><![CDATA[<h2 id="v-html渲染自定义组件"><a href="#v-html渲染自定义组件" class="headerlink" title="v-html渲染自定义组件"></a>v-html渲染自定义组件</h2><h3 id="前景"><a href="#前景" class="headerlink" title="前景"></a>前景</h3><ul><li><p>需求场景</p><p>后端返回的特定的元素，前端用穿梭框显示，拿到对应的元素后，将其替换为vant组件进行渲染。</p></li><li><p>坑点：</p><p><code>v-html</code>是vue3用于渲染html的指令，但是由于是直接渲染html的，自定义组件vue不会默认重新转化渲染。因此需要进行处理</p></li></ul><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p>使用vue自带的<code>compile</code>函数进行进行渲染转换，再用<code>h</code>函数进行显示</p><ul><li><p>将<code>v-html</code>所用到的组件设置为全局组件</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Lazyload</span>, <span class="title class_">SwipeItem</span>, <span class="title class_">Swipe</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vant&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;Swipe&#x27;</span>, <span class="title class_">Swipe</span>)</span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;swipeitem&#x27;</span>, <span class="title class_">SwipeItem</span>)</span><br></pre></td></tr></table></figure></li><li><p>新建一个用于渲染的组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    &lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line">        <span class="keyword">import</span> &#123; h,&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line">        <span class="comment">// 如果直接从vue引入会报warning，因此引入路径需要修改</span></span><br><span class="line">        <span class="keyword">import</span> &#123;compile&#125; <span class="keyword">from</span> <span class="string">&quot;vue/dist/vue.esm-bundler.js&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        <span class="attr">props</span>: &#123;</span><br><span class="line">            <span class="attr">html</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">setup</span>(<span class="params">props</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="title function_">compile</span>(props.<span class="property">html</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li><p>优点</p><p>自定义组件也可以进行渲染</p></li><li><p>缺点</p><ul><li><p>需要将用到的组件设置为全局组件，那么这样会使初始包变大</p></li><li><p>无法响应事件。组件标签上的事件无法执行，会有warning；事件只能在内部实现，无法暴露出去</p></li></ul></li></ul><h3 id="参考link"><a href="#参考link" class="headerlink" title="参考link"></a>参考link</h3><p><a href="https://juejin.cn/post/7153814550414884871">记录一下vue3 渲染带组件html字符串的方法</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;v-html渲染自定义组件&quot;&gt;&lt;a href=&quot;#v-html渲染自定义组件&quot; class=&quot;headerlink&quot; title=&quot;v-html渲染自定义组件&quot;&gt;&lt;/a&gt;v-html渲染自定义组件&lt;/h2&gt;&lt;h3 id=&quot;前景&quot;&gt;&lt;a href=&quot;#前景&quot; cla</summary>
      
    
    
    
    <category term="vue" scheme="https://1578536879.github.io/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>npm、npx与pnpm</title>
    <link href="https://1578536879.github.io/2024/02/06/npm%E3%80%81npx%E4%B8%8Epnpm/"/>
    <id>https://1578536879.github.io/2024/02/06/npm%E3%80%81npx%E4%B8%8Epnpm/</id>
    <published>2024-02-06T06:54:33.505Z</published>
    <updated>2024-02-06T07:32:44.837Z</updated>
    
    <content type="html"><![CDATA[<h1 id="npm、npx-与-pnpm"><a href="#npm、npx-与-pnpm" class="headerlink" title="npm、npx 与 pnpm"></a>npm、npx 与 pnpm</h1><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><h3 id="npm-i与npm-update"><a href="#npm-i与npm-update" class="headerlink" title="npm i与npm update"></a><code>npm i</code>与<code>npm update</code></h3><ul><li><p><code>npm i</code>：先检查 node_modules 模块是否有对应的指定模块，如果存在，就不再进行安装，即使远程有新版本也不会重新获取</p><p>npm i在安装包的依赖包时，包的依赖包会安装符合规则的<font color=red>最高</font>版本</p><blockquote><p>npm 都要强制重新安装，可以使用-f 或–force 参数。</p></blockquote></li><li><p><code>npm update</code>：每次安装都会先请求远程仓库的最新版本，然后查询本地版本。</p><blockquote><p>如果本地版本不存在或者远程版本较新，那么更新版本</p></blockquote></li></ul><h4 id="安装非发布的包"><a href="#安装非发布的包" class="headerlink" title="安装非发布的包"></a>安装非发布的包</h4><p><a href="https://docs.npmjs.com/about-packages-and-modules/">官网</a>表明了如下几个情况可以直接使用</p><ul><li>a:包含一个由 package.json 文件描述的程序的文件夹。</li><li>b:包含（a）的 gzipped tarball 。</li><li>c:解析为（b）的 URL。</li><li>d:&lt;name&gt;@&lt;version&gt;: 在 registry 上发布的(c)</li><li>e:&lt;name&gt;@&lt;tag&gt; : 能指向（d）。</li><li>f:&lt;name&gt; 具有 latest 标签，且满足（e）。</li><li>g:git url，当 clone 时，得到（a）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git://github.com/user/project.git#commit-ish</span><br><span class="line">git+ssh://user@hostname:project.git#commit-ish</span><br><span class="line">git+http://user@hostname/project/blah.git#commit-ish</span><br><span class="line">git+https://user@hostname/project/blah.git#commit-ish</span><br></pre></td></tr></table></figure><p>commit-ish 可以是任何 tag、分支或者 sha，可以用<code>git checkout</code>切换的，默认是<code>master</code></p><h1></h1><h3 id="npm-缓存"><a href="#npm-缓存" class="headerlink" title="npm 缓存"></a>npm 缓存</h3><p>由于安装时，即使本地有缓存，但是也不会进行读取，那么这就导致在弱网或者无网情况下，无法安装依赖包或者安装速度极低</p><ul><li><p><code>--cache-min</code>：参数指定了一个时间(以分钟为单位)，只有超过这个时间的模块，才会从远程进行下载安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --cache-min <span class="number">9999999</span> &lt;package-name&gt;</span><br></pre></td></tr></table></figure></li></ul><h1></h1><h3 id="npm-i流程"><a href="#npm-i流程" class="headerlink" title="npm i流程"></a><code>npm i</code>流程</h3><ul><li><p>发出<code>npm i</code>命令</p></li><li><p>执行工程自身 preinstall</p><blockquote><p>如果当前工程定义了 preintsall 钩子，那么会调用这个钩子函数</p></blockquote></li><li><p>确定首层依赖</p><blockquote><p>确定当前项目中<code>package.json</code>中的<code>dependencies</code>和<code>devDependencies</code>指定的模块</p></blockquote><blockquote><p>当前项目中的每个依赖包是每个依赖树的根节点，所以 npm 开启多线程对每个依赖包进行更深层级的节点</p></blockquote></li><li><p>获取模块</p><blockquote><p>确定下载的模块版本</p></blockquote><blockquote><p>如果版本描述文件（<code>npm-shrinkwrap.json</code> 或 <code>package-lock. json</code>）有对应模块的信息，那么直接依据对应的信息获取</p></blockquote><blockquote><p>如果没有，向<a href="https://registry.npmjs.org/">registry</a>查询模块压缩 包的网址，然后依据<code>package.json</code>文件中的版本去仓库中获取。</p></blockquote><blockquote><p>获取到模块的 resloved 字段，即压缩包的地址后。获取到后，npm 依据此地址检查本地缓存，如果缓存中有，那么直接从缓存中(只会检查<code>node_modules</code>目录，而不会检查<code>~/.npm</code>目录)拿；如果没有，那么从仓库中进行下载</p></blockquote><blockquote><p>查找该模块的依赖，如果有依赖则回到第一步，没有则停止</p></blockquote></li><li><p>扁平化模块</p><blockquote><p>获取到完整的依赖树后，里面可能包含大量的重复模块，npm3 之前会严格按照依赖树的结构进行安装，这样会造成大量的模块冗余；</p></blockquote><blockquote><p>npm3 之后默认加入了一个<code>dedupe</code>的过程，遍历所有节点，将模块放在根节点下面（node_modules 下），当发现有了重复模块时，将其丢弃</p><blockquote><p>重复模块：<strong>模块名</strong>相同且<strong>semver</strong>兼容。每个 semver 基本都对应一段<em>版本允许范围</em>，如果两个模块的版本允许范围有<strong>交集</strong>，那么可以得到一个<strong>兼容</strong>版本。这样就不需要版本号完全一致了，减少更多的冗余模块在这个阶段中直接去掉</p><blockquote><p>比如 A 模块依赖 package@^1.0.0，B 模块依赖 package@^1.1.0，则 1.1.0 为兼容版本<br /> node_modules–A<br /> node_modules–B<br /> node_modules--package@^1.1.0<br /><br /> 比如 A 模块依赖 package@^1.0.0，B 模块依赖 package@^2.1.0，则没有兼容版本，会将一个版本放在 node_modules，一个继续保留在依赖树中<br /> node_modules--A--package@^1.0.0<br /> node_modules--B--package@^1.1.0<br /></p></blockquote></blockquote></blockquote></li><li><p>安装模块</p><blockquote><p>下载压缩包，存放在~&#x2F;.npm 目录</p></blockquote><blockquote><p>解压到当前项目的 node_modules 目录</p></blockquote><blockquote><p>执行模块中的生命周期函数（按照 preinstall、install、postinstall 的顺序）。</p></blockquote></li><li><p>执行当前项目自身的生命周期</p><blockquote><p>当前 npm 工程如果定义了钩子此时会被执行（按照 install、postinstall、prepublish、prepare 的顺序）。</p></blockquote></li><li><p>生成或者更新版本描述文件（<code>npm-shrinkwrap.json</code> 或 <code>package-lock. json</code>）</p></li></ul><h2 id="npx"><a href="#npx" class="headerlink" title="npx"></a>npx</h2><p><code>npx</code>是<code>npm@5.25.2</code>增加的命令，如果 npm 版本低于这个版本，那么用<code>npm i -g npx</code>安装即可</p><h3 id="与-npm-的不同"><a href="#与-npm-的不同" class="headerlink" title="与 npm 的不同"></a>与 npm 的不同</h3><ul><li><p>npx 是下载到一个临时目录中，然后使用完成之后，进行删除。没有 npm 一样的缓存</p></li><li><p>npx 还可以运行可执行文件(远程的也可以)，比如只安装 webpack 了，那么用<code>npm run webpack</code>会报错，用<code>npx run webpack</code>就可以成功运行</p></li><li><p>npx 会检查 node_modules 和系统变量<code>$PATH</code>的命令是否存在</p></li><li><p><code>--no-install</code>: 如果本地不存在该模块，那么会报错。可以用于强制使用本地模块</p></li><li><p><code>--ignore-existing</code>: 不管是否本地存在，都强制安装使用远程模块。可以用于获取最新的包，即用即删</p></li></ul><h2 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a><a href="https://pnpm.io/zh/motivation">pnpm</a></h2><h3 id="硬连接与符号连接"><a href="#硬连接与符号连接" class="headerlink" title="硬连接与符号连接"></a><a href="https://juejin.cn/post/7032116303737389086/">硬连接与符号连接</a></h3><ul><li><p>硬连接：使用 inode 指向源文件，即使源文件目录地址变化了，但是依旧能进行访问。因为其 inode 仍指向该文件。没有对原始文件的引用。</p></li><li><p>符号连接：指向的源文件地址，如果源文件目的地址修改了，那么就无法再访问；如果有一个新的文件名字与源文件一致，那么再次访问时，访问的是新文件</p></li></ul><h1></h1><h3 id="pnpm-1"><a href="#pnpm-1" class="headerlink" title="pnpm"></a>pnpm</h3><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><p>pnpm 和 npm 一样，有一个缓存目录</p><ul><li><p>Mac&#x2F;linux 中默认会设置到{home dir}&gt;&#x2F;.pnpm-store&#x2F;v3；windows 下会设置到当前盘的根目录下，比如 C（C&#x2F;.pnpm-store&#x2F;v3）、D 盘（D&#x2F;.pnpm-store&#x2F;v3）。</p></li><li><p>pnpm 可以在一个电脑上不同的磁盘设置<a href="https://pnpm.io/zh/workspaces">同一个分区</a>，在这种情况下，pnpm 将复制包而不是硬链接它们，因为硬链接只能发生在同一文件系统同一分区上</p></li><li><p>npm 在安装时，不会去检查缓存；而 pnpm 在安装时，会先检查是否有对应包及其版本的缓存，如果有的话，直接硬链接到这个缓存地址</p></li></ul><h1></h1><h4 id="模块依赖"><a href="#模块依赖" class="headerlink" title="模块依赖"></a>模块依赖</h4><ul><li><p>pnpm 使用平铺的方式，类似于<code>npm2</code>的结构，但是增加了一个<code>.pnpm</code>目录，其中的包命名格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> .<span class="property">pnpm</span>/&lt;organization-name&gt;+&lt;package-name&gt;@&lt;version&gt;<span class="regexp">/node_modules/</span>&lt;name&gt;</span><br><span class="line"><span class="comment">// 组织名(若无会省略)+包名@版本号/node_modules/名称(项目名称)</span></span><br></pre></td></tr></table></figure></li><li><p>对于 <a href="https://pnpm.io/zh/how-peers-are-resolved">PeerDependencies</a> 来说，命名规则稍许不同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">pnpm</span>/&lt;organization-name&gt;+&lt;package-name&gt;@&lt;version&gt;_&lt;organization-name&gt;+&lt;package-name&gt;@&lt;version&gt;<span class="regexp">/node_modules/</span>&lt;name&gt;</span><br><span class="line"><span class="comment">// peerDep组织名(若无会省略)+包名@版本号_组织名(若无会省略)+包名@版本号/node_modules/名称(项目名称)</span></span><br></pre></td></tr></table></figure></li><li><p>pnpm 使用硬链接，将 node_modules 的包地址硬链接到 pnpm 的缓存中；对于同包同版本使用符号连接.</p><p><img src="https://pnpm.io/zh/assets/images/node-modules-structure-8ab301ddaed3b7530858b233f5b3be57.jpg" alt="image"></p></li></ul><h1></h1><h4 id="npm-与-pnpm-差别"><a href="#npm-与-pnpm-差别" class="headerlink" title="npm 与 pnpm 差别"></a><a href="https://pnpm.io/zh/feature-comparison">npm 与 pnpm 差别</a></h4><table><thead><tr><th>功能</th><th>pnpm</th><th>npm</th></tr></thead><tbody><tr><td>隔离的 node_modules</td><td>✅</td><td>❌</td></tr><tr><td>自动安装 peers</td><td>✅ 通过 auto-install-peers&#x3D;true</td><td>✅</td></tr><tr><td>Plug’n’Play(即插即用)</td><td>✅</td><td>❌</td></tr><tr><td>管理 Node.js 版本</td><td>✅ <code>pnpm env &lt;cmd&gt;</code></td><td>❌</td></tr><tr><td>内容可寻址存储</td><td>✅</td><td>❌</td></tr><tr><td>Side-effects cache(缓存的副作用)</td><td>✅</td><td>❌</td></tr><tr><td>有锁文件</td><td><code>pnpm-lock.yaml</code></td><td><code>package-lock.json</code></td></tr><tr><td>即用即删</td><td><code>pnpm dlx</code></td><td><code>npx</code></td></tr></tbody></table><h2 id="参链"><a href="#参链" class="headerlink" title="参链"></a>参链</h2><blockquote><p>npm</p></blockquote><ul><li><p><a href="https://blog.csdn.net/qq_40988677/article/details/125364305">npm 模块安装机制与实现原理 </a></p></li><li><p><a href="https://juejin.cn/post/6844903702063480846">npm 和 package.json 那些不为常人所知的小秘密 </a></p></li></ul><blockquote><p>npx</p></blockquote><ul><li><a href="https://zhuanlan.zhihu.com/p/269419296">npx 简介 </a></li><li><a href="https://newsn.net/say/npx.html#npx--ignore-existing">npx 是什么命令？npx 和 npm 有什么区别？ </a></li></ul><blockquote><p>pnpm</p></blockquote><ul><li><a href="https://zhuanlan.zhihu.com/p/457698236">pnpm</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;npm、npx-与-pnpm&quot;&gt;&lt;a href=&quot;#npm、npx-与-pnpm&quot; class=&quot;headerlink&quot; title=&quot;npm、npx 与 pnpm&quot;&gt;&lt;/a&gt;npm、npx 与 pnpm&lt;/h1&gt;&lt;h2 id=&quot;npm&quot;&gt;&lt;a href=&quot;#np</summary>
      
    
    
    
    <category term="额外内容" scheme="https://1578536879.github.io/categories/%E9%A2%9D%E5%A4%96%E5%86%85%E5%AE%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>Chrome的Performance</title>
    <link href="https://1578536879.github.io/2024/02/06/Chrome--performance/"/>
    <id>https://1578536879.github.io/2024/02/06/Chrome--performance/</id>
    <published>2024-02-06T06:54:33.503Z</published>
    <updated>2024-02-06T07:32:29.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chrome-的-performance"><a href="#Chrome-的-performance" class="headerlink" title="Chrome 的 performance"></a>Chrome 的 performance</h1><h2 id="开始记录"><a href="#开始记录" class="headerlink" title="开始记录"></a>开始记录</h2><p>可以通过调整这两个参数模拟低网低 cpu 情况 <a href="https://imgtu.com/i/bRXxL4"><img src="https://s1.ax1x.com/2022/03/09/bRXxL4.png" alt="bRXxL4.png"></a></p><p>点击按钮，刷新页面或者只需要旁边的刷新按钮开始进行记录分析 <a href="https://imgtu.com/i/bRjuTA"><img src="https://s1.ax1x.com/2022/03/09/bRjuTA.png" alt="bRjuTA.png"></a></p><h2 id="操作设置栏-controls"><a href="#操作设置栏-controls" class="headerlink" title="操作设置栏 controls"></a>操作设置栏 controls</h2><ul><li>可以通过这个下拉框看到之前的分析数据</li></ul><p><a href="https://imgtu.com/i/bRjI1K"><img src="https://s1.ax1x.com/2022/03/09/bRjI1K.png" alt="bRjI1K.png"></a></p><ul><li>其他配置</li></ul><p><a href="https://imgtu.com/i/bRvDUA"><img src="https://s1.ax1x.com/2022/03/09/bRvDUA.png" alt="bRvDUA.png"></a></p><h2 id="页面性能的高级汇总-overview"><a href="#页面性能的高级汇总-overview" class="headerlink" title="页面性能的高级汇总 overview"></a>页面性能的高级汇总 overview</h2><p><a href="https://imgtu.com/i/bRzmmF"><img src="https://s1.ax1x.com/2022/03/09/bRzmmF.png" alt="bRzmmF.png"></a> <a href="https://imgtu.com/i/bWF68H"><img src="https://s1.ax1x.com/2022/03/09/bWF68H.png" alt="bWF68H.png"></a></p><ul><li>颜色表示<blockquote><p><font color=#87CEFA>HTML</font></p></blockquote></li></ul><blockquote><p><font color=yellow>脚本</font></p></blockquote><blockquote><p><font color=#9370DB>样式</font></p></blockquote><blockquote><p><font color=green>媒体资源</font></p></blockquote><blockquote><p><font color=gray>其他资源</font></p></blockquote><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>FPS，帧数</td><td><font color=green>绿色</font>竖线越高，FPS 越高。 FPS 图表上的<font color=red>红色</font>块表示长时间帧，很可能会出现卡顿</td></tr><tr><td>CPU，CPU 资源</td><td>指示消耗 CPU 资源的事件类型</td></tr><tr><td>NET，网络请求</td><td>每条彩色横杠表示一种资源。横杠越长，检索资源所需的时间越长。 每个横杠的浅色部分表示等待时间（从请求资源到第一个字节下载完成的时间），可以在屏幕快照下面查看具体的网络请求数据</td></tr></tbody></table><p><a href="https://imgtu.com/i/bWCE4J"><img src="https://s1.ax1x.com/2022/03/09/bWCE4J.png" alt="bWCE4J.png"></a></p><h2 id="火焰图：-CPU-堆叠可视化"><a href="#火焰图：-CPU-堆叠可视化" class="headerlink" title="火焰图： CPU 堆叠可视化"></a>火焰图： CPU 堆叠可视化</h2><p><a href="https://imgtu.com/i/bWEmgH"><img src="https://s1.ax1x.com/2022/03/09/bWEmgH.png" alt="bWEmgH.png"></a></p><ul><li>Timing</li></ul><blockquote><p>FCP: First Contentful Paint，白屏时间，第一个元素出现的时间</p></blockquote><blockquote><p><a href="https://zhuanlan.zhihu.com/p/174837488">LCP</a>: Largest Contentful Paint，视窗最大可见图片或者文本块的渲染时间</p></blockquote><blockquote><p><a href="https://blog.csdn.net/qiwoo_weekly/article/details/98818202">FMP</a>: First Meaningful Paint，首次有效绘制时间，页面的“主要内容”开始出现在屏幕上的时间点</p></blockquote><blockquote><p>DCL: DOMContentLoaded Event，dom 加载完毕时间</p></blockquote><blockquote><p>L: Onload Event，完全加载完毕时间</p></blockquote><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>Network</td><td>资源加载顺序及时长</td></tr><tr><td>Main</td><td>渲染进程中主线程的执行记录，点击 main 可以看到某个任务执行的具体情况<a href="https://imgtu.com/i/bWV5Os"><img src="https://s1.ax1x.com/2022/03/09/bWV5Os.png" alt="bWV5Os.png"></a></td></tr><tr><td>Timings</td><td>用户交互操作，比如点击鼠标、输入文字、动画等</td></tr><tr><td>Compositor</td><td>r 合成线程的执行记录，用来记录 html 绘制阶段 (Paint)结束后的图层合成操</td></tr><tr><td>Raster</td><td>光栅化线程池，用来让 GPU 执行光栅化的任务</td></tr><tr><td>GPU</td><td>GPU 进程主线程的执行过程记录，如 可以直观看到何时启动 GPU 加速</td></tr><tr><td>Frame</td><td>ifream 框架加载详情</td></tr><tr><td>Memory</td><td>不同的时间段的执行情况。页面中的内存使用的情况<a href="https://imgtu.com/i/bWZwNV"><img src="https://s1.ax1x.com/2022/03/09/bWZwNV.png" alt="bWZwNV.png"></a></td></tr></tbody></table><ul><li><p>在火焰图上看到一到三条垂直的虚线。蓝线代表 DOMContentLoaded 事件。 绿线代表首次绘制的时间。 红线代表 load 事件</p></li><li><p>如果是耗时长的 Task，其右上角会标红，这个时候，我们可以选中标红的 Task，然后放大，看其具体的耗时点。放大后，这里可以看到都在做哪些操作，哪些函数耗时了多少,这里代码有压缩，看到的是压缩后的函数名。然后我们点击一下某个函数，在面板最下面，就会出现代码的信息，是哪个函数，耗时多少，在哪个文件上的第几行等。这样我们就很方便地定位到耗时函数了。<br><a href="https://imgtu.com/i/bWu7JP"><img src="https://s1.ax1x.com/2022/03/09/bWu7JP.png" alt="bWu7JP.png"></a></p></li></ul><h2 id="Summary性能摘要"><a href="#Summary性能摘要" class="headerlink" title="Summary性能摘要"></a>Summary性能摘要</h2><p><a href="https://imgtu.com/i/bWmDOJ"><img src="https://s1.ax1x.com/2022/03/09/bWmDOJ.png" alt="bWmDOJ.png"></a></p><ul><li>颜色表示<blockquote><p><font color=#87CEFA>Loading</font>：网络通信和HTML解析</p></blockquote></li></ul><blockquote><p><font color=yellow>Scripting</font>：JavaScript执行</p></blockquote><blockquote><p><font color=#9370DB>Rendering</font>：样式计算和布局，即重排</p></blockquote><blockquote><p><font color=green>Painting</font>：重绘</p></blockquote><blockquote><p><font color=gray>other</font>：其它事件花费的时间</p></blockquote><blockquote><p><font color=white>Idle</font>：空闲时间</p></blockquote><p><a href="https://www.cnblogs.com/zjjing/p/9106111.html">事件包含</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/29879682">Chrome Performance 使用栗子</a></p><p><a href="https://zhuanlan.zhihu.com/p/163474573">Chrome Performance 页面性能分析指南</a></p><p><a href="https://www.jianshu.com/p/b6f87bac5381">饼状图分析</a></p><p><a href="https://www.cnblogs.com/xiaohuochai/p/9182710.html">performance</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Chrome-的-performance&quot;&gt;&lt;a href=&quot;#Chrome-的-performance&quot; class=&quot;headerlink&quot; title=&quot;Chrome 的 performance&quot;&gt;&lt;/a&gt;Chrome 的 performance&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="浏览器" scheme="https://1578536879.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>【小程序】上传文件</title>
    <link href="https://1578536879.github.io/2024/02/06/%E3%80%90%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%91%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <id>https://1578536879.github.io/2024/02/06/%E3%80%90%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%91%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</id>
    <published>2024-02-06T06:54:33.501Z</published>
    <updated>2024-02-06T07:31:40.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小程序上传文件"><a href="#小程序上传文件" class="headerlink" title="小程序上传文件"></a>小程序上传文件</h1><h2 id="选择文件"><a href="#选择文件" class="headerlink" title="选择文件"></a>选择文件</h2><h3 id="拍摄或从手机相册中选择图片或视频。"><a href="#拍摄或从手机相册中选择图片或视频。" class="headerlink" title="拍摄或从手机相册中选择图片或视频。"></a>拍摄或从手机相册中选择图片或视频。</h3><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.chooseMedia.html">wx.chooseMedia</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 拍摄或从手机相册中选择图片或视频。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; mediaType 文件类型 mix/video/image</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; count 最多可以选择的文件个数，基础库2.25.0前，最多可支持9个文件，2.25.0及以后最多可支持20个文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; sourceType 图片和视频选择的来源 [&quot;album&quot;, &quot;camera&quot;]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; maxDuration 拍摄视频最长拍摄时间，单位秒。时间范围为 3s 至 60s 之间。不限制相册。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; camera 仅在 sourceType 为 camera 时生效，使用前置或后置摄像头</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125; 文件内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">wx.<span class="title function_">chooseMedia</span>(&#123;</span><br><span class="line">  count,</span><br><span class="line">  <span class="attr">mediaType</span>: [mediaType],</span><br><span class="line">  sourceType,</span><br><span class="line">  maxDuration,</span><br><span class="line">  camera,</span><br><span class="line">  <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">fail</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件chooseMedia失败-----&quot;</span>, err);</span><br><span class="line">    <span class="title function_">reject</span>(err);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="从聊天会话选择文件。"><a href="#从聊天会话选择文件。" class="headerlink" title="从聊天会话选择文件。"></a>从聊天会话选择文件。</h3><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseMessageFile.html">wx.chooseMessageFile</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 从会话选择文件。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; type 所选的文件的类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; count 最多可以选择的文件个数，可以 0～100</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; extension 根据文件拓展名过滤，仅 type==file 时有效。每一项都不能是空字符串。默认不过滤。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125; 文件内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">wx.<span class="title function_">chooseMessageFile</span>(&#123;</span><br><span class="line">  count,</span><br><span class="line">  type,</span><br><span class="line">  extension,</span><br><span class="line">  <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="title function_">onHandleFile</span>(res, <span class="string">&quot;path&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="title function_">reslove</span>(data));</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">fail</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件chooseMedia失败-----&quot;</span>, err);</span><br><span class="line">    <span class="title function_">reject</span>(err);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="上传到后端"><a href="#上传到后端" class="headerlink" title="上传到后端"></a>上传到后端</h2><p>调用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/upload/wx.uploadFile.html">uploadFile</a></p><p>选择文件后，调用<code>uploadFile</code>传入本地路径，即可进行文件上传</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 进行文件上传</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; url 文件上传地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; filePath 要上传文件资源的路径 (本地路径)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; name 文件对应的 key，开发者在服务端可以通过这个 key 获取文件的二进制内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; formData HTTP 请求中其他额外的 form data</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; header HTTP 请求 Header，Header 中不能设置 Referer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  wx.<span class="title function_">showLoading</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;上传中...&quot;</span>,</span><br><span class="line">    <span class="attr">mask</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  wx.<span class="title function_">uploadFile</span>(&#123;</span><br><span class="line">    url,</span><br><span class="line">    filePath,</span><br><span class="line">    name,</span><br><span class="line">    formData,</span><br><span class="line">    header,</span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reslove</span>(res);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(err);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">complete</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      wx.<span class="title function_">hideLoading</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="上传到腾讯云"><a href="#上传到腾讯云" class="headerlink" title="上传到腾讯云"></a>上传到腾讯云</h2><p>此方式在选择文件后，直接调用接口，无需再调用<code>uploadFile</code></p><h3 id="下载-sdk"><a href="#下载-sdk" class="headerlink" title="下载 sdk"></a>下载 sdk</h3><p>在<a href="https://cloud.tencent.com/document/product/436/31953#.E4.B8.8A.E4.BC.A0.E5.AF.B9.E8.B1.A1">腾讯云小程序上传</a>中下载<code>cos-js-sdk-v5.min.js</code>文件，放入项目中</p><h3 id="引入及配置"><a href="#引入及配置" class="headerlink" title="引入及配置"></a>引入及配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cosSDK = <span class="built_in">require</span>(<span class="string">&quot;../static/js/cos-js-sdk-v5.min.js&quot;</span>);</span><br></pre></td></tr></table></figure><p>进行腾讯云的 sdk 配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//生成随机数</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">getRandomSecret</span> = (<span class="params">num: number</span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">let</span> t = <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">     a = t.<span class="property">length</span>,</span><br><span class="line">     n = <span class="string">&quot;&quot;</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num; i++) n += t.<span class="title function_">charAt</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * a));</span><br><span class="line">   <span class="keyword">return</span> n;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//获取十位的时间戳</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">getTimeStamp</span> = (<span class="params">date?</span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(date).<span class="title function_">getTime</span>() / <span class="number">1000</span>);</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//获取密钥</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">getSDKToken</span> = (<span class="params">fileName: string</span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">//   通过后端获取密钥</span></span><br><span class="line">     <span class="title function_">getCosToken</span>(&#123;&#125;).<span class="title function_">then</span>(</span><br><span class="line">       <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">const</span> &#123;</span><br><span class="line">           access_secret_id,</span><br><span class="line">           access_secret_key,</span><br><span class="line">           expiration,</span><br><span class="line">           security_token,</span><br><span class="line">           config,</span><br><span class="line">         &#125; = res ?? &#123;&#125;;</span><br><span class="line">         <span class="keyword">const</span> &#123; bucket, region, tenant_id &#125; = config;</span><br><span class="line">         <span class="keyword">const</span> fileType = fileName.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>).<span class="title function_">pop</span>();</span><br><span class="line">         <span class="keyword">const</span> <span class="title class_">ExpiredTime</span> = <span class="title function_">getTimeStamp</span>(expiration);</span><br><span class="line">         <span class="keyword">const</span> <span class="title class_">StartTime</span> = <span class="title function_">getTimeStamp</span>(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">         <span class="keyword">const</span> random = <span class="title function_">getRandomSecret</span>(<span class="number">7</span>);</span><br><span class="line">         uploadParams.<span class="property">Bucket</span> = bucket;</span><br><span class="line">         uploadParams.<span class="property">Region</span> = region;</span><br><span class="line">         <span class="comment">//文件名是13位时间戳和7位随机数</span></span><br><span class="line">         uploadParams.<span class="property">Key</span> = <span class="string">`<span class="subst">$&#123;tenant_id&#125;</span>/<span class="subst">$&#123;StartTime&#125;</span><span class="subst">$&#123;random&#125;</span>.<span class="subst">$&#123;fileType&#125;</span>`</span>;</span><br><span class="line">         <span class="keyword">const</span> <span class="attr">cosInitParams</span>: <span class="title class_">TCosInitParams</span> = &#123;</span><br><span class="line">           <span class="title class_">TmpSecretId</span>: access_secret_id,</span><br><span class="line">           <span class="title class_">TmpSecretKey</span>: access_secret_key,</span><br><span class="line">           <span class="title class_">SecurityToken</span>: security_token,</span><br><span class="line">           <span class="title class_">StartTime</span>,</span><br><span class="line">           <span class="title class_">ExpiredTime</span>,</span><br><span class="line">         &#125;;</span><br><span class="line">         <span class="title function_">resolve</span>(cosInitParams);</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="function">() =&gt;</span> &#123;</span><br><span class="line">         <span class="title function_">reject</span>(&#123;&#125;);</span><br><span class="line">       &#125;</span><br><span class="line">     );</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//配置sdk</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">configSDK</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">     cos = <span class="keyword">new</span> <span class="title function_">cosSDK</span>(&#123;</span><br><span class="line">       <span class="attr">getAuthorization</span>: <span class="function">(<span class="params">options, callback</span>) =&gt;</span> <span class="title function_">callback</span>(params),</span><br><span class="line">       <span class="title class_">FileParallelLimit</span>: <span class="number">10</span>,</span><br><span class="line">       <span class="title class_">ChunkParallelLimit</span>: <span class="number">10</span>,</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//上传文件</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">onUpload</span> = (<span class="params">filePath</span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">     cos?.<span class="title function_">uploadFile</span>(</span><br><span class="line">       &#123;</span><br><span class="line">         ...uploadParams,</span><br><span class="line">         <span class="title class_">FilePath</span>: filePath,</span><br><span class="line">         <span class="attr">onProgress</span>: <span class="keyword">function</span> (<span class="params">progressData</span>) &#123;</span><br><span class="line">           <span class="comment">/* 非必须 */</span></span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;--------onProgress--------&quot;</span>);</span><br><span class="line">         &#125;,</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="title function_">resolve</span>(err || data);</span><br><span class="line">       &#125;</span><br><span class="line">     );</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@description</span>: 开始cos上传</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; fileName 选择的文件名称</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; filePath 本地临时文件路径 (本地路径)</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; fileSize 本地临时文件大小，单位 B</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; fileType 选择的文件类型</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">onStartUpload</span> = <span class="keyword">async</span> (<span class="params">fileName, filePath, fileSize, fileType</span>) =&gt; &#123;</span><br><span class="line">   <span class="comment">// 因为从手机选择文件上传无法获取文件名称，如果在无名称时上传，那么会报错</span></span><br><span class="line">   <span class="keyword">if</span> (!fileName) &#123;</span><br><span class="line">     fileName = filePath.<span class="title function_">slice</span>(filePath.<span class="title function_">indexOf</span>(<span class="string">&quot;//&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">const</span> <span class="attr">sdkParams</span>: <span class="title class_">TCosInitParams</span> | &#123;&#125; = <span class="keyword">await</span> <span class="title function_">getSDKToken</span>(fileName);</span><br><span class="line">   wx.<span class="title function_">showLoading</span>(&#123;</span><br><span class="line">     <span class="attr">title</span>: <span class="string">&quot;上传中...&quot;</span>,</span><br><span class="line">     <span class="attr">mask</span>: <span class="literal">true</span>,</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="title function_">configSDK</span>(sdkParams <span class="keyword">as</span> <span class="title class_">TCosInitParams</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="title function_">onUpload</span>(filePath).<span class="title function_">then</span>(</span><br><span class="line">         <span class="function">(<span class="params">data: TCosUploadResponse</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="keyword">const</span> params = &#123;</span><br><span class="line">               <span class="attr">cos_file_name</span>: fileName,</span><br><span class="line">               <span class="attr">cos_file_size</span>: fileSize,</span><br><span class="line">               <span class="attr">cos_file_type</span>: fileType,</span><br><span class="line">               <span class="attr">cos_url</span>: data.<span class="property">Location</span>,</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">const</span> &#123; cos_url, cos_file_name &#125; = params;</span><br><span class="line">           <span class="comment">//如果是视频的话需要额外传视频首祯图和视频封面</span></span><br><span class="line">           <span class="keyword">if</span> (<span class="title function_">judgeFileType</span>(cos_url) === <span class="string">&quot;video&quot;</span>) &#123;</span><br><span class="line">             <span class="keyword">const</span> screen = <span class="title function_">getVideoScreen</span>(cos_url);</span><br><span class="line">             <span class="title function_">getThumbnailLogo</span>(screen, cos_file_name).<span class="title function_">then</span>(</span><br><span class="line">               <span class="function">(<span class="params">res: TGetThumbnailLogoResponse</span>) =&gt;</span> &#123;</span><br><span class="line">                 <span class="keyword">const</span> &#123; <span class="attr">screen</span>: logo &#125; = res ?? &#123;&#125;;</span><br><span class="line">                 wx.<span class="title function_">hideLoading</span>();</span><br><span class="line">                 <span class="title function_">resolve</span>(&#123;</span><br><span class="line">                   ...params,</span><br><span class="line">                   <span class="attr">cos_video_file_screen</span>: screen,</span><br><span class="line">                   <span class="attr">cos_video_thumbnail_logo</span>: logo,</span><br><span class="line">                 &#125;);</span><br><span class="line">               &#125;</span><br><span class="line">             );</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             wx.<span class="title function_">hideLoading</span>();</span><br><span class="line">             <span class="title function_">resolve</span>(params);</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">           wx.<span class="title function_">hideLoading</span>();</span><br><span class="line">           <span class="title function_">reject</span>(error);</span><br><span class="line">         &#125;</span><br><span class="line">       );</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">uni.<span class="title function_">chooseMessageFile</span>(&#123;</span><br><span class="line">  count,</span><br><span class="line">  type,</span><br><span class="line">  extension,</span><br><span class="line">  <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> tempFilePaths = res.<span class="property">tempFiles</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, path, size, type &#125; = tempFilePaths[<span class="number">0</span>];</span><br><span class="line">    <span class="title function_">onStartUpload</span>(name, path, size, type).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reslove</span>(res);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">fail</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件chooseMedia失败-----&quot;</span>, err);</span><br><span class="line">    <span class="title function_">reject</span>(err);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;小程序上传文件&quot;&gt;&lt;a href=&quot;#小程序上传文件&quot; class=&quot;headerlink&quot; title=&quot;小程序上传文件&quot;&gt;&lt;/a&gt;小程序上传文件&lt;/h1&gt;&lt;h2 id=&quot;选择文件&quot;&gt;&lt;a href=&quot;#选择文件&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="小程序" scheme="https://1578536879.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>【小程序】uniapp发布插件</title>
    <link href="https://1578536879.github.io/2024/02/06/%E3%80%90%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%91uniapp%E5%8F%91%E5%B8%83%E6%8F%92%E4%BB%B6/"/>
    <id>https://1578536879.github.io/2024/02/06/%E3%80%90%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%91uniapp%E5%8F%91%E5%B8%83%E6%8F%92%E4%BB%B6/</id>
    <published>2024-02-06T06:54:33.499Z</published>
    <updated>2024-02-06T07:31:21.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【小程序】uniapp发布插件"><a href="#【小程序】uniapp发布插件" class="headerlink" title="【小程序】uniapp发布插件"></a>【小程序】uniapp发布插件</h1><p><a href="https://uniapp.dcloud.net.cn/plugin/uni_modules.html#%E4%BD%BF%E7%94%A8-uni-modules-%E6%8F%92%E4%BB%B6">uni-modules-插件</a></p><h2 id="新建发布uni-modules插件"><a href="#新建发布uni-modules插件" class="headerlink" title="新建发布uni_modules插件"></a>新建发布uni_modules插件</h2><ul><li><p>在<code>uni_modules</code>右键，选择新建一个<code>uni_modules插件</code></p><p>此时会生成一个插件模板代码</p></li><li><p>写好对应的文件后，在<code>插件目录右键</code>，选择<code>发布到插件市场</code></p><p><a href="https://imgse.com/i/pCBR6uq"><img src="https://s1.ax1x.com/2023/07/01/pCBR6uq.png" alt="pCBR6uq.png"></a></p><p>填写好对应的信息后，直接进行保存即可</p></li><li><p>发布好后，即可在uniapp插件市场中进行下载</p></li></ul><h2 id="更新插件"><a href="#更新插件" class="headerlink" title="更新插件"></a>更新插件</h2><ul><li><p>更新好具体的内容后，右键选择<code>发布到插件市场</code></p><p><a href="https://imgse.com/i/pCBWUMR"><img src="https://s1.ax1x.com/2023/07/01/pCBWUMR.png" alt="pCBWUMR.png"></a></p></li></ul><p>更新即可</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul><li><p>发布和导入是同一个项目</p><p>项目里面如果又导入了这个插件，那么在uni_modules下导入的插件会被覆盖</p></li><li><p>发布的包必须包含的文件</p><ul><li><p><code>components/插件名/插件名.vue</code></p><p>如果没有这个文件，那么在发布时会报错</p></li><li><p><code>package.json</code></p><p>用于配置发布插件的一些信息</p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【小程序】uniapp发布插件&quot;&gt;&lt;a href=&quot;#【小程序】uniapp发布插件&quot; class=&quot;headerlink&quot; title=&quot;【小程序】uniapp发布插件&quot;&gt;&lt;/a&gt;【小程序】uniapp发布插件&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://u</summary>
      
    
    
    
    <category term="小程序" scheme="https://1578536879.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>【手写】call、apply、bind</title>
    <link href="https://1578536879.github.io/2024/02/06/%E3%80%90%E6%89%8B%E5%86%99%E3%80%91call%E3%80%81apply%E3%80%81bind/"/>
    <id>https://1578536879.github.io/2024/02/06/%E3%80%90%E6%89%8B%E5%86%99%E3%80%91call%E3%80%81apply%E3%80%81bind/</id>
    <published>2024-02-06T06:54:33.497Z</published>
    <updated>2024-02-06T07:32:04.346Z</updated>
    
    <content type="html"><![CDATA[<h2 id="call"><a href="#call" class="headerlink" title="call"></a><em>call</em></h2><p>call 可以改变调用函数时的 this 指向，当调用但什么都不传入时，默认是 window 对象</p><h3 id="内部流程"><a href="#内部流程" class="headerlink" title="内部流程"></a>内部流程</h3><p><a href="https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-function.prototype.call">es 文档</a>上编写的流程如下:</p><ul><li><p>让一个函数 func 指向 this</p></li><li><p>如果这个函数 func 不能被调用，那么抛出 TypeError</p></li><li><p>准备尾调用 PrepareForTailCall</p></li><li><p>返回执行结果</p></li></ul><p>思路</p><ul><li><p>判断需要改变的 context 是否为空，如果为空，那么就默认指为 window。保留这个新的 context，作为后面函数调用时需要的 this 指向</p></li><li><p>将当前的 this 指向赋值给上一步保留的 context，作为 context 的一个属性</p></li><li><p>调用第一步保留的 context 的第二步赋值的属性函数，将所需要的参数传递给上一步新赋值的属性</p></li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>call</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">call_handle_writing</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="comment">// ctx指向obj，因为fn为非空</span></span><br><span class="line">  <span class="keyword">const</span> ctx = fn || <span class="variable language_">window</span>;</span><br><span class="line">  <span class="comment">//   ctx.cb指向的是fn1</span></span><br><span class="line">  ctx.<span class="property">cb</span> = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">//   获取参数</span></span><br><span class="line">  <span class="keyword">const</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="comment">//   调用fn1函数，但是由于是ctx调用的，那么fn1被调用的时候的this指向是ctx</span></span><br><span class="line">  <span class="keyword">const</span> res = ctx.<span class="title function_">cb</span>(...args);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call_handle_writing</span> = call_handle_writing;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;out&quot;</span>, <span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">100</span>,</span><br><span class="line">&#125;;</span><br><span class="line">fn1.<span class="title function_">call_handle_writing</span>(obj, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><h3 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h3><blockquote><ol><li>Let func be the this value.</li><li>If IsCallable(func) is false, throw a TypeError exception.</li><li>If argArray is either undefined or null, then<blockquote><p>a. Perform PrepareForTailCall().<br /><br>b. Return ? <font color=red>Call(func, thisArg).</font></p></blockquote></li><li>Let argList be ? CreateListFromArrayLike(argArray).</li><li>Perform PrepareForTailCall().</li><li>Return ? Call(func, thisArg, argList).</li></ol></blockquote><p>其实就是接受一个数组作为参数，实际最后的调用时，调用的也是 call 方法</p><p>apply 调用 call 的时候，会用到扩展运算符，将参数放到 call 的参数中，因此这在一定程度上，导致了 apply 的性能会稍低于 call</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">apply_handle_writing</span>(<span class="params">fn, params</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(params)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">call_handle_writing</span>(fn, ...params);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">call_handle_writing</span>(fn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">apply_handle_writing</span> = apply_handle_writing;</span><br></pre></td></tr></table></figure><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><h3 id="内部流程-1"><a href="#内部流程-1" class="headerlink" title="内部流程"></a>内部流程</h3><blockquote><ol><li>Let Target be the this value.</li><li>If IsCallable(Target) is false, throw a TypeError exception.</li><li>Let F be ? BoundFunctionCreate(Target, thisArg, args).</li><li>Let L be 0.</li><li>Let targetHasLength be ? HasOwnProperty(Target, “length”).</li><li>If targetHasLength is true, then<blockquote><p>a. Let targetLen be ? Get(Target, “length”).<br/><br>b. If targetLen is a Number, then<br/></p><blockquote><p>i. If targetLen is +∞𝔽, set L to +∞.<br/></p><blockquote><p>ii. Else if targetLen is -∞𝔽, set L to 0.<br/><br>iii. Else,</p></blockquote></blockquote></blockquote></li><li>Let targetLenAsInt be ! ToIntegerOrInfinity(targetLen).</li><li>Assert: targetLenAsInt is finite.</li><li>Let argCount be the number of elements in args.</li><li>Set L to max(targetLenAsInt - argCount, 0).</li><li>Perform SetFunctionLength(F, L).</li><li>Let targetName be ? Get(Target, “name”).</li><li>If targetName is not a String, set targetName to the empty String.</li><li>Perform SetFunctionName(F, targetName, “bound”).</li><li>Return F.</li></ol></blockquote><p>考虑场景：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> C = A.<span class="title function_">bind</span>(B);</span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title function_">C</span>();</span><br></pre></td></tr></table></figure><ul><li><p>调用 bind 后，使用<code>new</code>去创建一个实例，那么在<code>new</code>的时候不应该改变<code>this</code>指向</p><p>在返回的函数中，用<code>instanceof</code>判断是否是通过<code>new</code>方法进行调用的</p></li><li><p>调用 bind 后，在 c 上面可以调用 A 上 <code>prototype</code> 的方法</p><p>采用继承的方式，在返回的函数上，继承 A</p></li></ul><h3 id="具体实现-1"><a href="#具体实现-1" class="headerlink" title="具体实现"></a>具体实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bind_handle_writing</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">const</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">cb</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> params = [...<span class="variable language_">arguments</span>, ...args];</span><br><span class="line">    fn = <span class="variable language_">this</span> <span class="keyword">instanceof</span> cb ? <span class="variable language_">this</span> : fn;</span><br><span class="line">    <span class="keyword">return</span> that.<span class="title function_">call</span>(fn, ...params);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 用一个中间函数，在原型链上加一层，防止属性覆盖</span></span><br><span class="line">  <span class="keyword">const</span> buf = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">  buf.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">  cb.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  <span class="keyword">return</span> cb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind_handle_writing</span> = bind_handle_writing;</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.jianshu.com/p/b540e1e17f54">如何手写一个 bind 方法</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;call&quot;&gt;&lt;a href=&quot;#call&quot; class=&quot;headerlink&quot; title=&quot;call&quot;&gt;&lt;/a&gt;&lt;em&gt;call&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;call 可以改变调用函数时的 this 指向，当调用但什么都不传入时，默认是 window 对象&lt;/p&gt;</summary>
      
    
    
    
    <category term="js" scheme="https://1578536879.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>【前端缓存】随机数位置区别</title>
    <link href="https://1578536879.github.io/2024/02/06/%E3%80%90%E5%89%8D%E7%AB%AF%E7%BC%93%E5%AD%98%E3%80%91%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%BD%8D%E7%BD%AE%E5%8C%BA%E5%88%AB/"/>
    <id>https://1578536879.github.io/2024/02/06/%E3%80%90%E5%89%8D%E7%AB%AF%E7%BC%93%E5%AD%98%E3%80%91%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%BD%8D%E7%BD%AE%E5%8C%BA%E5%88%AB/</id>
    <published>2024-02-06T06:54:33.495Z</published>
    <updated>2024-02-06T07:30:56.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件随机数存放位置区别"><a href="#文件随机数存放位置区别" class="headerlink" title="文件随机数存放位置区别"></a>文件随机数存放位置区别</h2><h3 id="文件url-随机数"><a href="#文件url-随机数" class="headerlink" title="文件url+?+随机数"></a>文件url+?+随机数</h3><ul><li><p><code>https://xxx?v=1.x.x</code></p><p>一般用于版本号对应的文件</p></li><li><p><code>https://xxx?c=s45sdf</code></p><p>一般用于文件内容生成的hash值</p></li></ul><h3 id="文件名-hash值"><a href="#文件名-hash值" class="headerlink" title="文件名+hash值"></a>文件名+hash值</h3><p><code>https://xxxs45sdf</code></p><p>hash值一般由文件内容生成</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>以上两种存放位置都可以使浏览器获取最新的文件，而不是走缓存拿文件</p><p>当前主流的一般是用文件名+hash值的形式。原因如下</p><blockquote><p>一般发版时，是有html文件和js、css文件的。<br />浏览器首先去请求html文件，html嵌入了js、css等其他文件。<br />那么在请求html和js、css等文件的这个时间差内，如果采用第一种方式(文件url+?+随机数)，就容易出现问题</p></blockquote><ul><li><p>如果先发html文件，再发js、css等文件</p><ul><li><p>客户请求时，浏览器不会走缓存，会去取最新的文件。</p></li><li><p>但是可能这个时候取的js、css文件还是老的文件。那么就导致客户端下次再去请求时，走的其实是缓存。</p></li></ul></li><li><p>先发js、css等文件，再发html文件</p><ul><li><p>对于有缓存的用户不会造成影响。</p></li><li><p>但是对于无缓存的用户，拿取数据时，会拿取到最新的js、css等文件，那么最直观的影响可能是页面样式问题。但当html发布成功后，页面会恢复正常</p></li></ul></li><li><p>对于异步加载的情况</p><ul><li><p>代码发布后，用户在使用过程中，进入了一个新路由</p></li><li><p>在新路由页面，获取的是最新的代码文件，但是在进入之前，获取的是老代码文件，那么这里就会导致新老代码文件交替，容易出现问题</p></li></ul></li></ul><p>因此，采用文件名+hash的方式，无论是先发html还是js、css文件，由于是直接通过文件名去获取的，那么就不会产生上述问题。</p><ul><li><p>先发js、css等文件</p><ul><li>由于文件名不同，由于文件名已经不一样了，所以不会覆盖掉之前存在的资源文件，客户端依旧可以安全的访问。</li></ul></li><li><p>再发html文件</p><ul><li>因为js、css等文件已经发布完毕了，那么当html更新了之后，再获取的js、css等文件就已经是最新的了</li></ul></li></ul><h2 id="参链"><a href="#参链" class="headerlink" title="参链"></a>参链</h2><p><a href="https://github.com/fouber/blog/issues/6">大公司里怎样开发和部署前端代码</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;文件随机数存放位置区别&quot;&gt;&lt;a href=&quot;#文件随机数存放位置区别&quot; class=&quot;headerlink&quot; title=&quot;文件随机数存放位置区别&quot;&gt;&lt;/a&gt;文件随机数存放位置区别&lt;/h2&gt;&lt;h3 id=&quot;文件url-随机数&quot;&gt;&lt;a href=&quot;#文件url-随机</summary>
      
    
    
    
    <category term="浏览器" scheme="https://1578536879.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>【wasb】环境搭建</title>
    <link href="https://1578536879.github.io/2024/02/06/%E3%80%90wasb%E3%80%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://1578536879.github.io/2024/02/06/%E3%80%90wasb%E3%80%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2024-02-06T06:54:33.492Z</published>
    <updated>2024-02-06T07:30:28.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【webAsb】-Emscripten环境搭建"><a href="#【webAsb】-Emscripten环境搭建" class="headerlink" title="【webAsb】- Emscripten环境搭建"></a>【webAsb】- Emscripten环境搭建</h1><h2 id="依赖环境"><a href="#依赖环境" class="headerlink" title="依赖环境"></a>依赖环境</h2><ul><li><p>python</p></li><li><p>git</p></li></ul><p>这两项环境是必要的，否则无法进行安装</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="attr">https</span>:<span class="comment">//github.com/juj/emsdk.git</span></span><br></pre></td></tr></table></figure><p>下载emscripten项目</p><h3 id="安装依赖包等"><a href="#安装依赖包等" class="headerlink" title="安装依赖包等"></a>安装依赖包等</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd emsdk <span class="comment">// 进入项目目录中</span></span><br><span class="line">emsdk update <span class="comment">// 安装各种工具</span></span><br><span class="line">emsdk install latest <span class="comment">//下载各种包，时间比较长</span></span><br><span class="line">emsdk activate latest <span class="comment">//生成 ~/.emscripten 文件，激活配置</span></span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/pP6oCWT"><img src="https://s1.ax1x.com/2023/09/09/pP6oCWT.png" alt="pP6oCWT.png"></a></p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>可以先执行<code>emsdk_env</code>脚本，这个脚本默认会写入环境变量，但是也会有不成功的情况。</p><p>在非emsdk目录下执行<code>emcc --version</code>，判断是否报错，如果报错，就证明环境并未配置成功；如果未报错，那么环境已经配置完成啦</p><h4 id="环境未配置成功"><a href="#环境未配置成功" class="headerlink" title="环境未配置成功"></a>环境未配置成功</h4><ul><li><p>执行 <code>emcmdprompt.bat</code>命令</p><p><a href="https://imgse.com/i/pP6xUSA"><img src="https://s1.ax1x.com/2023/09/09/pP6xUSA.png" alt="pP6xUSA.png"></a></p></li><li><p>将带有<code>PATH +=</code>的路径写入环境变量的Path中</p><p><a href="https://imgse.com/i/pP6zKhQ"><img src="https://s1.ax1x.com/2023/09/09/pP6zKhQ.png" alt="pP6zKhQ.png"></a></p></li><li><p>将下面带有键值对的写入系统变量中</p><p>记住不能有空格，否则会执行不成功</p><p><a href="https://imgse.com/i/pP6z1cn"><img src="https://s1.ax1x.com/2023/09/09/pP6z1cn.png" alt="pP6z1cn.png"></a></p></li><li><p>在非<code>emsdk</code>目录下执行<code>emcc --version</code></p><p><a href="https://imgse.com/i/pP6zJBV"><img src="https://s1.ax1x.com/2023/09/09/pP6zJBV.png" alt="pP6zJBV.png"></a></p><p>环境配置成功</p></li></ul><h2 id="配置c-环境"><a href="#配置c-环境" class="headerlink" title="配置c++环境"></a>配置c++环境</h2><h3 id="安装配置c-c"><a href="#安装配置c-c" class="headerlink" title="安装配置c&#x2F;c++"></a>安装配置c&#x2F;c++</h3><ul><li><p>安装</p><p>安装c&#x2F;c++编译器：<a href="https://sourceforge.net/projects/mingw-w64/">https://sourceforge.net/projects/mingw-w64/</a></p></li><li><p>配置</p><p>在环境变量的Path中，把解压的mingw的bin目录加入进去</p></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在cmd输入<code>gcc -v</code>，没有报错即可</p><p><a href="https://imgse.com/i/pPIgD91"><img src="https://z1.ax1x.com/2023/09/21/pPIgD91.png" alt="pPIgD91.png"></a></p><p><a href="https://blog.csdn.net/weixin_43180456/article/details/126374156">参链</a></p><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><h3 id="编写测试程序"><a href="#编写测试程序" class="headerlink" title="编写测试程序"></a>编写测试程序</h3><p>建立一个cpp文件，写入c的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello, world!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成js代码"><a href="#生成js代码" class="headerlink" title="生成js代码"></a>生成js代码</h3><blockquote><p><code>emcc test.cpp -o test.html</code></p></blockquote><p>会生成<code>html</code>，<code>js</code>和<code>wasm</code>文件，html默认引入js文件，js的作用是引入wasm文件</p><ul><li><p><code>-s</code> 表明编译到 Wasm，否则编译到 Asm.js（Wasm 的前身）， 最初 emscripten 是用于编译到 Asm.js 的。</p></li><li><p><code>SIDE_MODULE</code> 表明编译为副模块。有副模块就有主模块，简单理解副模块会去除 C 标准库函数，因为副模块会在运行时被链接到一个主模块，而主模块有C标准库函数。SIDE_MODULE的值可选 1 或者 2，前者会自动导出代码里所有的函数，而后者需要手动声明。</p></li><li><p><code>-o</code> xxxx 导出选项，导出的文件可选 .html、.js、.wasm，区别在于前面两者会帮你把胶水代码写好 ，而 .wasm 则需要在 JS 自己编写胶水代码了，但是前面两者代码冗余，比如编译为 JS 文件时，JS 文件会包含两千多行代码，不过这是学习 Wasm 的现成实例。</p></li></ul><h3 id="搭建本地服务器"><a href="#搭建本地服务器" class="headerlink" title="搭建本地服务器"></a>搭建本地服务器</h3><p>在代码路径中，搭建本地服务。在浏览器访问本地的文件会报错</p><ul><li><p><code>pnpm init</code></p><p>创建package.json文件</p></li><li><p><code>pnpm i http-server</code></p><p>安装<code>http-server</code></p></li><li><p><code>http-server -o</code></p><p>起本地服务，在浏览器打开html文件</p></li></ul><h3 id="验收"><a href="#验收" class="headerlink" title="验收"></a>验收</h3><p>用<code>http-server</code>起了本地服务后，在浏览器访问对应的域名加上生成的html文件，正常运行项目</p><p><a href="https://imgse.com/i/pPIfE5Q"><img src="https://z1.ax1x.com/2023/09/21/pPIfE5Q.png" alt="pPIfE5Q.png"></a></p><h2 id="参链"><a href="#参链" class="headerlink" title="参链"></a>参链</h2><p><a href="http://www.taodudu.cc/news/show-5750307.html?action=onClick">Emscripten编译器安装教程，亲测成功编译出第一个WebAssembly</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【webAsb】-Emscripten环境搭建&quot;&gt;&lt;a href=&quot;#【webAsb】-Emscripten环境搭建&quot; class=&quot;headerlink&quot; title=&quot;【webAsb】- Emscripten环境搭建&quot;&gt;&lt;/a&gt;【webAsb】- Emscri</summary>
      
    
    
    
    <category term="webAssembly" scheme="https://1578536879.github.io/categories/webAssembly/"/>
    
    
  </entry>
  
  <entry>
    <title>【pwa】mainifest</title>
    <link href="https://1578536879.github.io/2024/02/06/%E3%80%90pwa%E3%80%91mainifest/"/>
    <id>https://1578536879.github.io/2024/02/06/%E3%80%90pwa%E3%80%91mainifest/</id>
    <published>2024-02-06T06:54:33.472Z</published>
    <updated>2024-02-06T07:26:01.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mainifest-json"><a href="#mainifest-json" class="headerlink" title="mainifest.json"></a>mainifest.json</h1><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>通过 manifest.json 可以实现自定义启动画面、打开 url、设置界面颜色、设置桌面图标等</p><h2 id="常用字段"><a href="#常用字段" class="headerlink" title="常用字段"></a>常用字段</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;short_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pwa1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pwa-测试用例1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;icons&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;qr-code-fill-144.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;144x144&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;start_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/test1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;display&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standalone&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;theme_color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;background_color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;black&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>name: string</code></li></ul><p>描述应用的名称，会显示在桌面图标的标题位置和启动画面中</p><ul><li><p><code>short_name: string</code></p><p>描述应用的短名称。当应用名字过长，在桌面图标无法全部显示时，会显示 shortname</p></li><li><p><code>scope：string</code></p><p>设置 manifest 对于网站的作用范围。</p></li><li><p><code>start_url: string</code></p><p>描述用户从设备主屏幕点击图标进入时的第一个地址，start_url 必须在 scope 的作用范围内</p><ul><li><p>如果为空，则以 manifest.json 作为 url</p></li><li><p>如果 url 打开失败，则和正常显示的网页打开错误的样式一样</p></li><li><p>如果设置的 url 和当前的项目不在一个域下，无法正常显示</p></li><li><p>如果 starturl 为相对地址，那么根路径基于 manifest 的路径</p></li><li><p>如果 starturl 为绝对路径，那么根路径为将</p></li></ul></li><li><p><code>icon：TIcon</code></p><p>设置 webapp 图标集合。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TIcon</span> = &#123;</span><br><span class="line">  <span class="attr">src</span>: <span class="built_in">string</span>; <span class="comment">//图标地址</span></span><br><span class="line">  <span class="attr">type</span>: <span class="built_in">string</span>; <span class="comment">//图标mime类型，只能为image/png</span></span><br><span class="line">  <span class="attr">sizes</span>: <span class="built_in">string</span>; <span class="comment">//图标大小，用来表示width x height，单位为px，如果图标要适配多个尺寸，则多个尺寸用空格隔开。与真实图片大小要一致</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>适配规则：</p><ul><li><p>将 webapp 添加到桌面时，浏览器会适配最合适尺寸的图标。浏览器会首先去找与显示密度想匹配且尺寸调整为 48dp 屏幕密度的图标。例如在 2 倍像素的设备上使用 96px，3 倍像素的设备上使用 144px 的</p></li><li><p>如果没有找到合适的图标，那么会查找与设备特性匹配度最高的图标</p></li><li><p>如果图标路径错误，那么将显示浏览器的默认图标</p></li></ul></li><li><p><code>background_color: string</code></p><p>启动画面的背景颜色。rgbs、hsl、hsla 等写法浏览器不支持。未设置时，默认白色</p></li><li><p><code>theme_color: string</code></p><p>显示 web app 的主题色，显示在 banner 位置</p></li><li><p><code>display: &#39;fullscreen&#39;|&#39;standalone&#39;|&#39;minimal-ui&#39;|&#39;browser&#39;</code></p><p>webapp 被启动时显示的类型</p></li><li><p><code>orientation</code>: <code>&#39;landscape-primary&#39;|&#39;landscape-secondary&#39;|&#39;landscape&#39;|&#39;portrait-primary&#39;|&#39;portrait-secondary&#39;|&#39;portrait&#39;|&#39;natural&#39;|&#39;any&#39;</code></p><p>webapp 在屏幕上的显示方向</p></li><li><p><code>dir: &#39;ltr&#39;|&#39;rtl&#39;|&#39;auto&#39;</code></p><p>文字的显示方向</p></li><li><p><code>related_applications: &#39;platform&#39;|&#39;id&#39;</code></p><p>用于定义对应的原生应用，类似应用安装横幅提示的形式去推广、引流原生应用</p></li><li><p><code>prefer_related_applications: Boolean</code></p><p>设置是否只允许用户安装原生应用</p></li></ul><h2 id="生效条件"><a href="#生效条件" class="headerlink" title="生效条件"></a>生效条件</h2><ul><li><p>必须是 https 或者 localhost</p></li><li><p>必须注册运行 service worker，且有 fetch 事件监听</p></li><li><p>manifest 必须要有 icons,且必须要至少有尺寸为144x144的</p></li><li><p>diaplay 设置为 standalone 或者 fullscreen</p></li><li><p>必须有 name 或者 short_name，start_url</p></li><li><p>prefer_related_applications 未设置或者为 false</p></li></ul><h2 id="引导安装"><a href="#引导安装" class="headerlink" title="引导安装"></a>引导安装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;beforeinstallprompt&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeinstallprompt&quot;</span>);</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  e.<span class="title function_">prompt</span>();<span class="comment">//显示安装弹窗</span></span><br><span class="line">&#125;);</span><br><span class="line">navigator.<span class="property">serviceWorker</span></span><br><span class="line">  .<span class="title function_">register</span>(<span class="string">&quot;pwa1.js&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;service-pwa1注册成功&quot;</span>, res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;service-pwa1注册失败&quot;</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mainifest-json&quot;&gt;&lt;a href=&quot;#mainifest-json&quot; class=&quot;headerlink&quot; title=&quot;mainifest.json&quot;&gt;&lt;/a&gt;mainifest.json&lt;/h1&gt;&lt;h2 id=&quot;用途&quot;&gt;&lt;a href=&quot;#用途&quot;</summary>
      
    
    
    
    <category term="PWA" scheme="https://1578536879.github.io/categories/PWA/"/>
    
    
  </entry>
  
  <entry>
    <title>【HTML】templates and slots</title>
    <link href="https://1578536879.github.io/2024/02/06/%E3%80%90HTML%E3%80%91templates%20and%20slots/"/>
    <id>https://1578536879.github.io/2024/02/06/%E3%80%90HTML%E3%80%91templates%20and%20slots/</id>
    <published>2024-02-06T06:54:33.470Z</published>
    <updated>2024-02-06T07:25:37.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【HTML】templates-and-slots"><a href="#【HTML】templates-and-slots" class="headerlink" title="【HTML】templates and slots"></a>【HTML】templates and slots</h1><h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a><h1>概况</h1></h2><p>可以用来灵活填充 Web 组件的 shadow DOM 的模板。可以复用相同的标记结构。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><p>编写一个 template</p><p>直接在页面中编写一个 template 不会直接在页面中显示出来</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>测试template<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注册自定义模板</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">customElements.<span class="title function_">define</span>(</span><br><span class="line">  <span class="string">&quot;test-template&quot;</span>,</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">HTMLElement</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>();</span><br><span class="line">      <span class="keyword">let</span> template = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">      <span class="keyword">let</span> templateContent = template.<span class="property">content</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> shadowRoot = <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&quot;open&quot;</span> &#125;);</span><br><span class="line">      shadowRoot.<span class="title function_">appendChild</span>(templateContent.<span class="title function_">cloneNode</span>(<span class="literal">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>组件显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">test-template</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>页面显示</p><p><a href="https://imgse.com/i/pC4aUiV"><img src="https://s1.ax1x.com/2023/07/14/pC4aUiV.png" alt="pC4aUiV.png"></a></p><p>template 的元素的样式也是独立的，并不会因为父级定义的同一个样式而影响内部。</p><p>虽然 template 和使用在同一个页面，但是如果直接在 Elements 面板里面修改 template 的内容，<strong>不会</strong>影响到渲染的地方。</p><p><a href="https://imgse.com/i/pC4aWRO"><img src="https://s1.ax1x.com/2023/07/14/pC4aWRO.png" alt="pC4aWRO.png"></a></p></li><li><p>添加 slot</p><p>添加的slot的样式只收到父级的影响，并不会受到template中定义的样式影响</p><p>如果是template中并没有定义对于的slot，那么传入的slot并不会被渲染</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;text1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>测试template<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">test-template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>默认slot的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&quot;text1&quot;</span>&gt;</span>具名插槽的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">test-template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/pC4azLj"><img src="https://s1.ax1x.com/2023/07/14/pC4azLj.png" alt="pC4azLj.png"></a></p><ul><li>获取slot名</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> el = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;test-template p&#x27;</span>)</span><br><span class="line">  el.<span class="title function_">forEach</span>(<span class="function"><span class="params">ele</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(ele.<span class="property">slot</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">//  输出：&quot;&quot;, &quot;text1&quot;, &quot;text2&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="参链"><a href="#参链" class="headerlink" title="参链"></a>参链</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components/Using_templates_and_slots#%E4%BD%BF%E7%94%A8%E6%A7%BD_slots_%E6%B7%BB%E5%8A%A0%E7%81%B5%E6%B4%BB%E5%BA%A6">使用 templates and slots</a></p><p><a href="https://cloud.tencent.com/developer/article/1009633?areaSource=106001.5">shadow dom解析</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【HTML】templates-and-slots&quot;&gt;&lt;a href=&quot;#【HTML】templates-and-slots&quot; class=&quot;headerlink&quot; title=&quot;【HTML】templates and slots&quot;&gt;&lt;/a&gt;【HTML】templ</summary>
      
    
    
    
    <category term="HTML" scheme="https://1578536879.github.io/categories/HTML/"/>
    
    
  </entry>
  
  <entry>
    <title>【HTML】Shadow DOM</title>
    <link href="https://1578536879.github.io/2024/02/06/%E3%80%90HTML%E3%80%91Shadow%20DOM/"/>
    <id>https://1578536879.github.io/2024/02/06/%E3%80%90HTML%E3%80%91Shadow%20DOM/</id>
    <published>2024-02-06T06:54:33.468Z</published>
    <updated>2024-02-06T07:23:51.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【HTML】Shadow-DOM"><a href="#【HTML】Shadow-DOM" class="headerlink" title="【HTML】Shadow DOM"></a>【HTML】Shadow DOM</h1><h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a><h1>概况</h1></h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>能够为 Web 组件中的 DOM 和 CSS 提供了封装，实际上是在浏览器渲染文档的时候会给指定的 DOM 结构插入编写好的 DOM 元素，但是插入的 Shadow DOM 会与主文档的 DOM 保持<strong>分离</strong>，也就是说 Shadow DOM<strong>不存在</strong>于主 DOM 树上。shadow root 节点为起始根节点，在这个根节点的下方，可以是任意元素，和普通的 DOM 元素一样。</p><p>并且 Shadow DOM 封装出来的 DOM 元素是<strong>独立</strong>的，外部的配置不会影响到内部，内部的配置也不会影响外部。</p><p><a href="https://imgse.com/i/pCfsSyD"><img src="https://s1.ax1x.com/2023/07/12/pCfsSyD.png" alt="pCfsSyD.png"></a></p><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>控制台-》设置按钮-》Preference -》 Elements -》点击 show user anent shadow dom 的 checkbox</p><p><a href="https://imgse.com/i/pCfrOF1"><img src="https://s1.ax1x.com/2023/07/12/pCfrOF1.png" alt="pCfrOF1.png"></a></p><p>打开之后可以看到一些元素的真实布局及内容组成。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><img src="https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM/shadowdom.svg" alt="image.png"></p><ul><li><p><code>Shadow host</code>：一个常规 DOM 节点，Shadow DOM 会被附加到这个节点上。</p></li><li><p><code>Shadow tree</code>：Shadow DOM 内部的 DOM 树。</p></li><li><p><code>Shadow boundary</code>：Shadow DOM 结束的地方，也是常规 DOM 开始的地方。</p></li><li><p><code>Shadow root</code>: Shadow tree 的根节点。</p></li></ul><h2 id="custom-element-自定义标签"><a href="#custom-element-自定义标签" class="headerlink" title="custom element(自定义标签)"></a><h1>custom element(自定义标签)</h1></h2><h3 id="概况-1"><a href="#概况-1" class="headerlink" title="概况"></a>概况</h3><p>可以注册一个自定义标签，<code>CustomElementRegistry</code>提供注册自定义元素和查询已注册元素的方法，使用<code>customElements</code>可以直接获取其实例。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><table><thead><tr><th>方法名</th><th>作用</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>customElements.define</code></td><td>定义了一个自定义元素</td><td><code>name</code>: 自定义元素名; <code>constructor</code>: 自定义元素构造器; <code>options</code>: 控制元素如何定义(目前只支持extends)</td><td>-</td></tr><tr><td><code>customElements.get</code></td><td>返回以前定义自定义元素的构造函数</td><td><code>name</code>: 返回引用的构造函数的自定义元素的名字</td><td>指定名字的自定义元素的构造函数，如果没有使用该名称的自定义元素定义，则为undefined。</td></tr><tr><td><code>customElements.upgrade</code></td><td>将更新节点子树中所有包含阴影的自定义元素，甚至在它们连接到主文档之前也是如此</td><td><code>root</code>: 待升级的包含阴影的派生元素节点</td><td>-</td></tr><tr><td><code>customElements.whenDefined</code></td><td>当一个自定义节点被定义时走入then，如果这个元素名没有被定义，那么返回的是一直pending状态</td><td><code>name</code>: 自定义元素名</td><td>Promise</td></tr></tbody></table><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">customElements.<span class="title function_">define</span>(<span class="string">&quot;test-shadow-dom&quot;</span>, <span class="title class_">TestShadowCls</span>)</span><br></pre></td></tr></table></figure><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a><h1>使用</h1></h2><h3 id="挂载-shadow-dom"><a href="#挂载-shadow-dom" class="headerlink" title="挂载 shadow dom"></a>挂载 shadow dom</h3><p>可以调用<code>Element.attachShadow</code>将 Shadow Dom 选择挂载或者卸载。此方法返回的是一个类 dom，可以像操作普通 dom 一样对其进行操作</p><table><thead><tr><th>参数名</th><th>作用</th><th>可选值</th></tr></thead><tbody><tr><td><code>mode</code></td><td><code>指定 Shadow DOM 树封装模式的字符串</code></td><td><code>open</code>&#x2F;<code>closed</code></td></tr><tr><td><code>delegatesFocus </code></td><td><code>焦点委托</code></td><td><code>boolean</code></td></tr></tbody></table><ul><li><p>挂载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shadow = el.<span class="title function_">attachShadow</span>(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;open&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(shadow);</span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/pCfgDbD"><img src="https://s1.ax1x.com/2023/07/12/pCfgDbD.png" alt="pCfgDbD.png"></a></p></li><li><p>操作 shadow dom</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> html = <span class="string">`&lt;p&gt;测试1&lt;/p&gt;`</span>;</span><br><span class="line">shadow.<span class="property">innerHTML</span> = html;</span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/pCfRCm8"><img src="https://s1.ax1x.com/2023/07/12/pCfRCm8.png" alt="pCfRCm8.png"></a></p></li></ul><h3 id="自定义元素"><a href="#自定义元素" class="headerlink" title="自定义元素"></a>自定义元素</h3><p>Shadow DOM 可以渲染自定义的元素，类似于 vue3 中的组件，但里面的样式并不互相干扰。</p><ul><li><p>新建类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestShadowCls</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(); <span class="comment">//必要的，因为属于子类</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建一个 Shadow DOM 并为其加上需要的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">addShadow</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">shadow</span> = <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123;</span><br><span class="line">      <span class="attr">mode</span>: <span class="string">&quot;open&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createChild</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> pel = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">  pel.<span class="property">textContent</span> = <span class="string">&quot;测试文案&quot;</span>;</span><br><span class="line">  pel.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;test&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> imgae = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">  imgae.<span class="title function_">setAttribute</span>(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;https://psstatic.cdn.bcebos.com/video/wiseindex/aa6eef91f8b5b1a33b454c401_1660835115000.png&quot;</span>)</span><br><span class="line">  imgae.<span class="property">src</span>=<span class="string">&quot;https://psstatic.cdn.bcebos.com/video/wiseindex/aa6eef91f8b5b1a33b454c401_1660835115000.png&quot;</span>;</span><br><span class="line">  el.<span class="title function_">appendChild</span>(pel);</span><br><span class="line">  el.<span class="title function_">appendChild</span>(imgae)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">shadow</span>.<span class="title function_">appendChild</span>(el)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义自定义的元素名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">customElements.<span class="title function_">define</span>(<span class="string">&quot;test-shadow-dom&quot;</span>, <span class="title class_">TestShadowCls</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">test-shadow-dom</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>渲染效果如下，里面的文案并没有因为<code>style</code>加上的元素样式而生效</p><p><a href="https://imgse.com/i/pCfqRu4"><img src="https://s1.ax1x.com/2023/07/12/pCfqRu4.png" alt="pCfqRu4.png"></a></p></li><li><p>添加样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">createClass</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> style = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;style&quot;</span>);</span><br><span class="line">  style.<span class="property">textContent</span> = <span class="string">`</span></span><br><span class="line"><span class="string">      .test&#123;</span></span><br><span class="line"><span class="string">          color: blue;</span></span><br><span class="line"><span class="string">          font-weight: 600</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">shadow</span>.<span class="title function_">appendChild</span>(style)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加上了之后，样式生效</p><p><a href="https://imgse.com/i/pCfL98f"><img src="https://s1.ax1x.com/2023/07/12/pCfL98f.png" alt="pCfL98f.png"></a></p></li></ul><h2 id="参链"><a href="#参链" class="headerlink" title="参链"></a>参链</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components/Using_shadow_DOM">使用 shadow DOM</a></p><p><a href="https://zhuanlan.zhihu.com/p/559759502">究竟什么是 Shadow DOM？</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【HTML】Shadow-DOM&quot;&gt;&lt;a href=&quot;#【HTML】Shadow-DOM&quot; class=&quot;headerlink&quot; title=&quot;【HTML】Shadow DOM&quot;&gt;&lt;/a&gt;【HTML】Shadow DOM&lt;/h1&gt;&lt;h2 id=&quot;概况&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="HTML" scheme="https://1578536879.github.io/categories/HTML/"/>
    
    
  </entry>
  
  <entry>
    <title>【devTools】常用面板</title>
    <link href="https://1578536879.github.io/2024/02/06/%E3%80%90devTools%E3%80%91%E5%B8%B8%E7%94%A8%E9%9D%A2%E6%9D%BF/"/>
    <id>https://1578536879.github.io/2024/02/06/%E3%80%90devTools%E3%80%91%E5%B8%B8%E7%94%A8%E9%9D%A2%E6%9D%BF/</id>
    <published>2024-02-06T06:54:33.466Z</published>
    <updated>2024-02-06T07:17:45.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【devTools】常用面板"><a href="#【devTools】常用面板" class="headerlink" title="【devTools】常用面板"></a>【devTools】常用面板</h1><h2 id="Elements面板"><a href="#Elements面板" class="headerlink" title="Elements面板"></a>Elements面板</h2><h3 id="将元素存入变量"><a href="#将元素存入变量" class="headerlink" title="将元素存入变量"></a>将元素存入变量</h3><ul><li><p>右击</p></li><li><p>选择store as global variable</p></li><li><p>通过$0、$1…获取对应的元素</p></li></ul><p><a href="https://imgse.com/i/pCVIrHH"><img src="https://s1.ax1x.com/2023/06/11/pCVIrHH.png" alt="pCVIrHH.png"></a></p><h2 id="console面板"><a href="#console面板" class="headerlink" title="console面板"></a>console面板</h2><h3 id="自动合并相似信息"><a href="#自动合并相似信息" class="headerlink" title="自动合并相似信息"></a>自动合并相似信息</h3><p>Group similar message in console，浏览器默认开启的</p><p><a href="https://imgse.com/i/pCVoeqe"><img src="https://s1.ax1x.com/2023/06/11/pCVoeqe.png" alt="pCVoeqe.png"></a></p><h3 id="Hide-network"><a href="#Hide-network" class="headerlink" title="Hide network"></a>Hide network</h3><p>隐藏网络的错误提示信息</p><h3 id="preserve-log"><a href="#preserve-log" class="headerlink" title="preserve log"></a>preserve log</h3><p>页面跳转时保留console信息</p><h3 id="show-timestamps"><a href="#show-timestamps" class="headerlink" title="show timestamps"></a>show timestamps</h3><p>打印时，会默认输入每一行信息的时间</p><p>打开：devtools右上角设置按钮，perferces下show timestamps</p><p><a href="https://imgse.com/i/pCVoGM8"><img src="https://s1.ax1x.com/2023/06/11/pCVoGM8.png" alt="pCVoGM8.png"></a></p><h3 id=""><a href="#" class="headerlink" title="$_"></a>$_</h3><p>作用：获取最近一次的执行结果</p><p><a href="https://imgse.com/i/pCVosMT"><img src="https://s1.ax1x.com/2023/06/11/pCVosMT.png" alt="pCVosMT.png"></a></p><h3 id="和"><a href="#和" class="headerlink" title="$和$$"></a>$和$$</h3><p><code>$</code>：document.querySelector</p><p><code>$$</code>: document.querySelectorAll</p><h3 id="x"><a href="#x" class="headerlink" title="$x"></a>$x</h3><p>可以使用xpath选择元素。</p><p>eg：$x(“&#x2F;html&#x2F;body&#x2F;div”)</p><p><a href="https://imgse.com/i/pCVofiR"><img src="https://s1.ax1x.com/2023/06/11/pCVofiR.png" alt="pCVofiR.png"></a></p><h3 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h3><p>执行到该函数时就会触发断点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">debug</span>(fn)</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/pCVo4Rx"><img src="https://s1.ax1x.com/2023/06/11/pCVo4Rx.png" alt="pCVo4Rx.png"></a></p><p><a href="https://imgse.com/i/pCVooQK"><img src="https://s1.ax1x.com/2023/06/11/pCVooQK.png" alt="pCVooQK.png"></a></p><h3 id="monitor"><a href="#monitor" class="headerlink" title="monitor"></a>monitor</h3><p>函数执行时打印参数值，但无法打印箭头函数的参数</p><p>执行unmonitor删除效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">monitor</span>(fn3)</span><br><span class="line"><span class="title function_">fn3</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">//输出：VM3370:1 function fn3 called with arguments: 1, 2</span></span><br></pre></td></tr></table></figure><h3 id="monitroEvents"><a href="#monitroEvents" class="headerlink" title="monitroEvents"></a>monitroEvents</h3><p>监听并打印元素触发的事件，可以用数组一次性监听多个事件。</p><p>执行unmonitorEvents取消监听</p><h3 id="getEventListeners"><a href="#getEventListeners" class="headerlink" title="getEventListeners"></a>getEventListeners</h3><p>获取注册在元素上的所有事件监听器</p><h3 id="queryObjects"><a href="#queryObjects" class="headerlink" title="queryObjects"></a>queryObjects</h3><p>获取所有原型链中包含该原型的对象</p><h2 id="source面板"><a href="#source面板" class="headerlink" title="source面板"></a>source面板</h2><h3 id="FileSystem"><a href="#FileSystem" class="headerlink" title="FileSystem"></a>FileSystem</h3><p>可以直接与本地的文件连接，在devtools修改文件之后，会将本地的文件内容也进行修改</p><p><a href="https://imgse.com/i/pCVXADP"><img src="https://s1.ax1x.com/2023/06/11/pCVXADP.png" alt="pCVXADP.png"></a></p><h3 id="overrides"><a href="#overrides" class="headerlink" title="overrides"></a>overrides</h3><p>可以以本地的文件取代页面中载入的资源</p><h3 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h3><h4 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h4><p>在source代码块需要设置时，在对应的行号右键，选择Add Condition Break Point，写上具体的条件</p><p><a href="https://imgse.com/i/pCVXrb6"><img src="https://s1.ax1x.com/2023/06/11/pCVXrb6.png" alt="pCVXrb6.png"></a></p><h4 id="断点打印信息，Logpoint"><a href="#断点打印信息，Logpoint" class="headerlink" title="断点打印信息，Logpoint"></a>断点打印信息，Logpoint</h4><p>在执行时经过该程序代码时打印信息</p><p><a href="https://imgse.com/i/pCVXR8H"><img src="https://s1.ax1x.com/2023/06/11/pCVXR8H.png" alt="pCVXR8H.png"></a></p><h4 id="dom断点"><a href="#dom断点" class="headerlink" title="dom断点"></a>dom断点</h4><p>在element tab，右键元素，展开break on，有三种断点形式：</p><ul><li><p>subtree modifications ：元素内发生变化时暂停，如添加、删除、修改子节点</p></li><li><p>attribute modifications ：添加、删除、修改元素本身的属性时暂停</p></li><li><p>node removal：元素被删除时暂停，同时删除dom断点</p></li></ul><h4 id="请求断点"><a href="#请求断点" class="headerlink" title="请求断点"></a>请求断点</h4><p>在debugger时，点击在XHR&#x2F;fetch Breapoints列表右上角的+按钮，输入data，回车保存。</p><h4 id="事件监听器断点"><a href="#事件监听器断点" class="headerlink" title="事件监听器断点"></a>事件监听器断点</h4><p>在debugger时，在Event Listener BreakPoint列表的Control下勾选对应的事件，然后手动触发对应的事件</p><h4 id="忽略进入文件"><a href="#忽略进入文件" class="headerlink" title="忽略进入文件"></a>忽略进入文件</h4><p>在对应的文件代码内容区域，右键选择Add script to ignore list，添加之后，这个文件就不会在调试时进入了</p><h2 id="NetWork"><a href="#NetWork" class="headerlink" title="NetWork"></a>NetWork</h2><h3 id="设置区域"><a href="#设置区域" class="headerlink" title="设置区域"></a>设置区域</h3><p><a href="https://imgse.com/i/pCVjISJ"><img src="https://s1.ax1x.com/2023/06/11/pCVjISJ.png" alt="pCVjISJ.png"></a></p><ul><li><p>Use large request rows</p><p>使用宽版的流量记录列表来显示</p></li><li><p>Group by frame</p><p>将来自相同iframe的请求聚焦在一起</p></li><li><p>show overview</p><p>是否显示时间轴</p></li></ul><p><a href="https://imgse.com/i/pCVj7O1"><img src="https://s1.ax1x.com/2023/06/11/pCVj7O1.png" alt="pCVj7O1.png"></a></p><ul><li><p>Capture screenslots</p><p>是否截图</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【devTools】常用面板&quot;&gt;&lt;a href=&quot;#【devTools】常用面板&quot; class=&quot;headerlink&quot; title=&quot;【devTools】常用面板&quot;&gt;&lt;/a&gt;【devTools】常用面板&lt;/h1&gt;&lt;h2 id=&quot;Elements面板&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="浏览器" scheme="https://1578536879.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>【devTools】performance</title>
    <link href="https://1578536879.github.io/2024/02/06/%E3%80%90devTools%E3%80%91performance/"/>
    <id>https://1578536879.github.io/2024/02/06/%E3%80%90devTools%E3%80%91performance/</id>
    <published>2024-02-06T06:54:33.464Z</published>
    <updated>2024-02-06T07:17:15.144Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Performance面板"><a href="#Performance面板" class="headerlink" title="Performance面板"></a>Performance面板</h1><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul><li><p>保持环境整洁，例如使用隐私模式、清除缓存等</p></li><li><p>确定目标，在执行过程中，尽可能缩短持续时间，避免额外的操作等</p></li></ul><h3 id="开始记录"><a href="#开始记录" class="headerlink" title="开始记录"></a>开始记录</h3><ul><li><p>打开devTools，切换到Performance面板</p></li><li><p>点击左上角的圆形按钮开始记录</p></li></ul><p><a href="https://imgse.com/i/pCVcIH0"><img src="https://s1.ax1x.com/2023/06/11/pCVcIH0.png" alt="pCVcIH0.png"></a></p><ul><li><p>记录过程种可以做一些交互</p></li><li><p>点击stop停止监测</p></li></ul><h3 id="生成内容"><a href="#生成内容" class="headerlink" title="生成内容"></a>生成内容</h3><p><a href="https://imgse.com/i/pCVvNc9"><img src="https://s1.ax1x.com/2023/06/11/pCVvNc9.png" alt="pCVvNc9.png"></a></p><ul><li><p>工具栏：与整体面板有关的操作选项和设置</p></li><li><p>overview图表：可视化呈现完整时间轴的基本信息</p></li><li><p>Activities：将性能信息以方块式的Activity为单位显示在不同种类的列表中</p></li></ul><h2 id="工具栏"><a href="#工具栏" class="headerlink" title="工具栏"></a>工具栏</h2><p><a href="https://imgse.com/i/pCVvshD"><img src="https://s1.ax1x.com/2023/06/11/pCVvshD.png" alt="pCVvshD.png"></a></p><h3 id="Disabled-Javascript-Call-Stack"><a href="#Disabled-Javascript-Call-Stack" class="headerlink" title="Disabled Javascript Call Stack"></a>Disabled Javascript Call Stack</h3><p>Main列表不会显示js的Call stack信息</p><h3 id="Enable-advanced-paint-instrumentation"><a href="#Enable-advanced-paint-instrumentation" class="headerlink" title="Enable advanced paint instrumentation"></a>Enable advanced paint instrumentation</h3><p>记录绘制性能的详细信息，并显示在</p><ul><li><p>Frames：Frame activity的Layers分页</p></li><li><p>Main：Paint activity的Paint Profiler分页</p></li></ul><h2 id="Overview图表"><a href="#Overview图表" class="headerlink" title="Overview图表"></a>Overview图表</h2><p><a href="https://imgse.com/i/pCVv79g"><img src="https://s1.ax1x.com/2023/06/11/pCVv79g.png" alt="pCVv79g.png"></a></p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>FPS，帧数</td><td><font color=green>绿色</font>竖线越高，FPS 越高。 FPS 图表上的<font color=red>红色</font>块表示长时间帧，很可能会出现卡顿</td></tr><tr><td>CPU，CPU 资源</td><td>指示消耗 CPU 资源的事件类型</td></tr><tr><td>NET，网络请求</td><td>每条彩色横杠表示一种资源。横杠越长，检索资源所需的时间越长。 每个横杠的浅色部分表示等待时间（从请求资源到第一个字节下载完成的时间），可以在屏幕快照下面查看具体的网络请求数据</td></tr></tbody></table><h3 id="FPS"><a href="#FPS" class="headerlink" title="FPS"></a>FPS</h3><p>绿色方块：每秒帧数的变化，红色、粉色横条为低帧数警告，即可能会让用户感受到卡顿的部分</p><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><ul><li><p>灰色：浏览器内部的工作</p></li><li><p>蓝色：HTML请求、文件解析</p></li><li><p>黄色：事件、js</p></li><li><p>绿色：图像处理、画面绘制</p></li><li><p>紫色：样式计算</p></li></ul><h3 id="NET"><a href="#NET" class="headerlink" title="NET"></a>NET</h3><ul><li><p>蓝色：有请求正在执行</p></li><li><p>深色：优先权较高的请求</p></li></ul><h2 id="Activities"><a href="#Activities" class="headerlink" title="Activities"></a>Activities</h2><h3 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h3><p><a href="https://imgse.com/i/pCVxZE6"><img src="https://s1.ax1x.com/2023/06/11/pCVxZE6.png" alt="pCVxZE6.png"></a></p><ul><li><p>作用</p><p>显示主线程所有的任务，持续事件超过50ms（长任务）的任务会以红色虚线和右上角的三角形标识</p></li></ul><p>任务底下的Activities依据类型有不同颜色，黄色的js Activity底下以随机颜色显示Call Stack Activities</p><h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><p><a href="https://imgse.com/i/pCVx5rR"><img src="https://s1.ax1x.com/2023/06/11/pCVx5rR.png" alt="pCVx5rR.png"></a></p><ul><li><p>左侧的细线：连接至发送请求前</p></li><li><p>浅色区域：等待服务器响应</p></li><li><p>深色区域：下载资源</p></li><li><p>右侧的细线：解析资源</p></li><li><p>左上角的小方块：请求优先级，深色表示高，浅色表示浅</p></li></ul><h3 id="Frames"><a href="#Frames" class="headerlink" title="Frames"></a>Frames</h3><p>显示每一帧画面的详细信息</p><h3 id="Timeings"><a href="#Timeings" class="headerlink" title="Timeings"></a>Timeings</h3><p>显示网页使用的重要时间点</p><ul><li><p>DCL：HTML已经加载且解析完毕</p></li><li><p>FP：绘制出默认背景颜色之外的任何内容</p></li><li><p>FCP：绘制出任何文字、图片、有颜色的canvas时</p></li><li><p>LCP：绘制出页面最大的内容时</p></li><li><p>L：解析HTML期间请求的资源都载入完成时</p></li></ul><h3 id="Experience"><a href="#Experience" class="headerlink" title="Experience"></a>Experience</h3><p>显示所有元素位移并计算分数，越低表示页面稳定性越高</p><h3 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a>GPU</h3><p>显示GPU的使用事件</p><h3 id="Raster"><a href="#Raster" class="headerlink" title="Raster"></a>Raster</h3><p>定义：浏览器渲染流程中Paint阶段的一环</p><p>作用：显示产生Raster时各个线程的信息</p><h2 id="信息面板："><a href="#信息面板：" class="headerlink" title="信息面板："></a>信息面板：</h2><ul><li><p>summary：显示activity的持续时间，并将期间发生的其他activities分类显示</p></li><li><p>botton-up：将同一种activity的运行时间加总</p></li><li><p>call tree：以触发关系自上而下显示activities，最上方的称为root activity，是下面各个activities的起点</p></li><li><p>event log：以时间顺序显示activities</p></li></ul><blockquote><p>注：activity占用主线程超过50ms会被加上红色三角形，成为long task</p></blockquote><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>显示该Activity的持续事件，并将期间发生的其他Activists分类显示</p><h3 id="call-tree"><a href="#call-tree" class="headerlink" title="call tree"></a>call tree</h3><p><a href="https://imgse.com/i/pCV2ztK"><img src="https://s1.ax1x.com/2023/06/11/pCV2ztK.png" alt="pCV2ztK.png"></a></p><p>call tree会显示任务由哪些activities组成，若activity的类型为程序代码，则层层展开可以看到函数的call stack</p><ul><li><p>self time</p><p>函数本身的运行时间，并不包含函数执行其他函数的时间</p></li><li><p>total time</p><p>函数本身和其下所有函数的运行时间的总和</p></li></ul><h3 id="bottom-up"><a href="#bottom-up" class="headerlink" title="bottom-up"></a>bottom-up</h3><p>会将同一种activity的运行时间加总，因此分页中self time较长的函数通常是性能瓶颈的来源</p><p>注：总运行时间长也可能是因为执行次数多</p><h3 id="Event-Log"><a href="#Event-Log" class="headerlink" title="Event Log"></a>Event Log</h3><p>以触发事件顺序显示Activities</p><h2 id="performance-monitor"><a href="#performance-monitor" class="headerlink" title="performance monitor"></a>performance monitor</h2><h3 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h3><p>1、在devtool按esc打开drawer，在左上角三个点打开</p><p>2、在devtools右上角的三个点，打开more tools打开</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>实时监测性能信息，用于检查特定功能是否存在内存泄漏的问题，实时反应内存用量的趋势。一般会把重点放在js heap size（js内存使用占有量）和dom tools</p><p><a href="https://imgse.com/i/pCVf0T1"><img src="https://s1.ax1x.com/2023/06/11/pCVf0T1.png" alt="pCVf0T1.png"></a></p><h2 id="Web-Vitals"><a href="#Web-Vitals" class="headerlink" title="Web Vitals"></a>Web Vitals</h2><h3 id="LCP：前端性能指标，用于表示加载速度"><a href="#LCP：前端性能指标，用于表示加载速度" class="headerlink" title="LCP：前端性能指标，用于表示加载速度"></a>LCP：前端性能指标，用于表示加载速度</h3><p>可以在performance的timeing中可以看到</p><p><a href="https://imgse.com/i/pCV4QP0"><img src="https://s1.ax1x.com/2023/06/11/pCV4QP0.png" alt="pCV4QP0.png"></a></p><h3 id="FID：表示首次输入延迟"><a href="#FID：表示首次输入延迟" class="headerlink" title="FID：表示首次输入延迟"></a>FID：表示首次输入延迟</h3><p>通过rendering分页的Core Web Vitals来判断</p><p><a href="https://imgse.com/i/pCV45z8"><img src="https://s1.ax1x.com/2023/06/11/pCV45z8.png" alt="pCV45z8.png"></a></p><h3 id="CLS：表示累计布局偏移"><a href="#CLS：表示累计布局偏移" class="headerlink" title="CLS：表示累计布局偏移"></a>CLS：表示累计布局偏移</h3><p>通过performance的Experience的layout shift标签</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Performance面板&quot;&gt;&lt;a href=&quot;#Performance面板&quot; class=&quot;headerlink&quot; title=&quot;Performance面板&quot;&gt;&lt;/a&gt;Performance面板&lt;/h1&gt;&lt;h2 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; cla</summary>
      
    
    
    
    <category term="浏览器" scheme="https://1578536879.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>【devTools】layers</title>
    <link href="https://1578536879.github.io/2024/02/06/%E3%80%90devTools%E3%80%91layers/"/>
    <id>https://1578536879.github.io/2024/02/06/%E3%80%90devTools%E3%80%91layers/</id>
    <published>2024-02-06T06:54:33.462Z</published>
    <updated>2024-02-06T07:16:46.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【devTools】layers"><a href="#【devTools】layers" class="headerlink" title="【devTools】layers"></a>【devTools】layers</h1><h2 id="元素绘制"><a href="#元素绘制" class="headerlink" title="元素绘制"></a>元素绘制</h2><p>可以查看哪些元素正在绘制</p><h3 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h3><ul><li><p>在devtools页面按esc，点击左上角的三个点，打开rendering分页</p></li><li><p>勾选对应的选项</p></li></ul><h3 id="页面表现"><a href="#页面表现" class="headerlink" title="页面表现"></a>页面表现</h3><ul><li>勾选了paint flashing</li></ul><p>元素正在绘制时，会由绿色小框表示</p><p><a href="https://imgse.com/i/pCVha38"><img src="https://s1.ax1x.com/2023/06/11/pCVha38.png" alt="pCVha38.png"></a></p><ul><li>勾选layer borders</li></ul><p>可以显示每个图层的区域范围</p><p><a href="https://imgse.com/i/pCVh4u4"><img src="https://s1.ax1x.com/2023/06/11/pCVh4u4.png" alt="pCVh4u4.png"></a></p><h2 id="layers"><a href="#layers" class="headerlink" title="layers"></a>layers</h2><h3 id="打开-1"><a href="#打开-1" class="headerlink" title="打开"></a>打开</h3><p>在devtools右上角三个点，点击more tools，点击layers打开layers标签</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><a href="https://imgse.com/i/pCV4AxS"><img src="https://s1.ax1x.com/2023/06/11/pCV4AxS.png" alt="pCV4AxS.png"></a></p><p>可以显示当前页面存在哪些图层，对于具体的图层，可以看到其对应的大小、产生原因及内存占有量</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【devTools】layers&quot;&gt;&lt;a href=&quot;#【devTools】layers&quot; class=&quot;headerlink&quot; title=&quot;【devTools】layers&quot;&gt;&lt;/a&gt;【devTools】layers&lt;/h1&gt;&lt;h2 id=&quot;元素绘制&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="浏览器" scheme="https://1578536879.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>【css】记录小点</title>
    <link href="https://1578536879.github.io/2024/02/06/%E3%80%90css%E3%80%91%E8%AE%B0%E5%BD%95%E5%B0%8F%E7%82%B9/"/>
    <id>https://1578536879.github.io/2024/02/06/%E3%80%90css%E3%80%91%E8%AE%B0%E5%BD%95%E5%B0%8F%E7%82%B9/</id>
    <published>2024-02-06T06:54:33.458Z</published>
    <updated>2024-02-06T07:16:27.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="border：0与border：none区别"><a href="#border：0与border：none区别" class="headerlink" title="border：0与border：none区别"></a>border：0与border：none区别</h2><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><p>两者都可以将元素的边框设为不可见</p><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><ul><li><p>性能差异</p></li><li><p>border：0</p></li></ul><p>其表示为将元素边框设置为0像素，虽然在页面上无法看见，但是浏览器依旧会对边框进行渲染。因此渲染的是一个像素为0的b order。</p><p>即border：0依旧会占用内存</p><ul><li>border：none</li></ul><p>其表示的是将元素边框设置无，因此浏览器在解析时，并不会对其进行渲染</p><p>即其不会占用浏览器内存</p><ul><li>兼容</li></ul><p>在ie6&#x2F;7的button元素中，border：none并不会生效</p><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">display</span>: table-cell;</span><br><span class="line"><span class="comment">// 子元素</span></span><br><span class="line">vertical-<span class="attr">align</span>: center;</span><br></pre></td></tr></table></figure><h3 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h3><ul><li>line-height</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br></pre></td></tr></table></figure><h2 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h2><ul><li><p>line-height指的是两行文字基线与基线之间的高度</p></li><li><p>单位为%时，计算规则是相对于当前元素的font-size计算的，即0.x*fontsize</p></li><li><p>无单位时，是相对于当前元素的font-size计算的，即x*fontsize</p></li></ul><h2 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h2><ul><li>元素没有设置时，继承的是父元素line-height的像素值，即如果父元素的line-height是%单位，那么浏览器计算出来的实际line-height值才会被子元素继承。</li></ul><h2 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h2><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td>#</td><td>id选择器</td></tr><tr><td>.</td><td>class选择器</td></tr><tr><td>M N</td><td>后代选择器，选择M元素内部后代的所有N元素</td></tr><tr><td>M&gt;N</td><td>子代选择器，选择M元素内部后代的第一个子级N元素</td></tr><tr><td>M～N</td><td>兄弟选择器，选择M元素后所有的同级N元素</td></tr><tr><td>M+N</td><td>相邻选择器，选择M元素相邻的下一个N元素，M和N是同一级</td></tr></tbody></table><h2 id="包含块"><a href="#包含块" class="headerlink" title="包含块"></a>包含块</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>与css盒子模型类似。作用是为这个矩形内部的后代元素提供一个参考，一个元素的大小和定位往往是由该元素所在的包含块决定的。</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul><li>根元素</li></ul><p>html元素，它没有父元素，是页面中最顶端的元素。根元素存在的包含块，被称为初始包含块。</p><ul><li>固定定位元素</li></ul><p>若元素的position&#x3D;fixed，那么它的包含块是当前可视窗口，即当前浏览器的窗口</p><ul><li>静态定位和相对定位元素</li></ul><p>若元素的position&#x3D;relative&#x2F;absolute，那么其包含块是由离他最近的块级祖先元素创建的。祖先元素必须是block、inline-block或table-cell</p><ul><li>绝对定位元素</li></ul><p>若元素的position&#x3D;absolute，那么其包含块是最近的position！&#x3D;static的元素。祖先元素可以是块元素，也可以是行内元素</p><h2 id="em"><a href="#em" class="headerlink" title="em"></a>em</h2><p>em是相对于当前元素的父元素计算的</p><p>但是当用于fontsize时，如果多有个嵌套的元素，那么从父层到子层，其元素字号会越来越小</p><h2 id="background-size-auto-渲染规则"><a href="#background-size-auto-渲染规则" class="headerlink" title="background-size: auto 渲染规则"></a>background-size: auto 渲染规则</h2><ul><li>如果图像没有内在尺寸和内在比例</li></ul><p>按背景定位区域的大小进行渲染，等同于设置属性100%</p><ul><li>水平和垂直方向同时具有内在尺寸</li></ul><p>按图像原始大小进行渲染</p><ul><li>没有内在尺寸，但有内在比例</li></ul><p>渲染效果等同于contain</p><ul><li>只有一个方向有内在尺寸，但具有内在比例</li></ul><p>图像会拉伸到该内在尺寸的大小，同时宽高比符合内在比例</p><ul><li>只有一个方向有内在尺寸，没有内在比例</li></ul><p>图像有内在尺寸的一侧会拉伸到该内在尺寸大小，没有设置内在尺寸的一侧会拉伸到背景定位区域大小</p><p>##background-size：一个为auto，一个为非auto</p><ul><li>有内在比例</li></ul><p>会拉伸到指定的尺寸，宽高依然保持原有的比例</p><ul><li>没有内在比例</li></ul><p>图像会拉伸到指定尺寸。</p><p>如果图像有内在尺寸，则auto到计算尺寸就是图像的尺寸</p><p>如果图像没有内在尺寸，那么auto的计算尺寸就是背景定位区域的尺寸</p><h2 id="background-position"><a href="#background-position" class="headerlink" title="background-position"></a>background-position</h2><ul><li>只有一个值</li></ul><p>例如：20px &#x3D;&#x3D; 20px center</p><p>如果只有一个值，那么无论是具体的数值或者百分比或者是关键字，另一个值一定是center</p><ul><li><p>两个值</p></li><li><p>两个都是关键属性值</p></li></ul><p>left、right表示水平，top、bottom表示垂直。</p><p>不能包含对立的方位，即top bottom是无效的</p><ul><li>一个是关键属性值，一个是数值或者百分比</li></ul><p>如果第一个值是百分比或者数值，那么表示水平方向，另一个关键属性值表示垂直方向</p><p>如果第一个值是关键属性值，那么表示水平方向，另一个百分比或者数值表示垂直方向</p><ul><li>两个值都是数值或者百分比</li></ul><p>第一个表示水平方向，第二个表示垂直方向</p><ul><li>3个值或者4个值</li></ul><p>数值和百分比表示偏移量，第一个值一定要是关键属性值，这个关键属性值表示偏移方向</p><h2 id="opacity"><a href="#opacity" class="headerlink" title="opacity"></a>opacity</h2><p>opacity不等于1的元素会创建一个层叠上下文，层叠顺序会变高</p><h2 id="border-raduis"><a href="#border-raduis" class="headerlink" title="border-raduis"></a>border-raduis</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li>只有一个值</li></ul><p>表示圆角属性作用在全部四个角上</p><ul><li>有两个值</li></ul><p>第一个作用于左上角和右下角，第二个作用于右上角和左下角</p><ul><li>三个值</li></ul><p>第一个作用于左上角，第二个作用于右上角和左下角，第三个作用于右下角</p><ul><li>四个值</li></ul><p>按照顺时针的方向，左上、右上、右下、左下</p><h3 id="水平半径和垂直半径"><a href="#水平半径和垂直半径" class="headerlink" title="水平半径和垂直半径"></a>水平半径和垂直半径</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-left</span>-<span class="attribute">top</span>-radius: <span class="number">10px</span> <span class="number">20px</span></span><br><span class="line">border-raduis：<span class="number">10px</span> / <span class="number">20px</span></span><br></pre></td></tr></table></figure><p>表示圆角是水平半径为10px，垂直半径为20px的椭圆产生的</p><h3 id="重叠曲线"><a href="#重叠曲线" class="headerlink" title="重叠曲线"></a>重叠曲线</h3><p>f&#x3D;min(Lh&#x2F;Sh, Lv&#x2F;Sv)</p><p>S为半径之和，L为元素宽高，h和v表示方向，f为计算值。</p><p>Lh：元素宽</p><p>Sh：垂直方向的半径和</p><p>Lv：元素高度</p><p>Sv：水平方向的半径和</p><p>如果f计算值小于1，那么所有圆角半径都乘以f</p><p>eg：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-top</span>-<span class="attribute">left</span>-raduis：<span class="number">30px</span> <span class="number">100%</span>；</span><br><span class="line"><span class="attribute">border-bottom</span>-<span class="attribute">left</span>-raduis：<span class="number">30px</span> <span class="number">100%</span>；</span><br><span class="line"><span class="attribute">width</span>：<span class="number">150px</span>；</span><br><span class="line"><span class="attribute">height</span>：<span class="number">100px</span>；</span><br></pre></td></tr></table></figure><p>左上角和左下角的垂直半径是100%（元素高），水平半径是30px<br>f&#x3D;min（150&#x2F;60，100&#x2F;200）&#x3D;0.5</p><p>所以渲染结果为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-top</span>-<span class="attribute">left</span>-raduis：<span class="number">15px</span> <span class="number">50%</span>；</span><br><span class="line"><span class="attribute">border-bottom</span>-<span class="attribute">left</span>-raduis：<span class="number">15px</span> <span class="number">50%</span>；</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;border：0与border：none区别&quot;&gt;&lt;a href=&quot;#border：0与border：none区别&quot; class=&quot;headerlink&quot; title=&quot;border：0与border：none区别&quot;&gt;&lt;/a&gt;border：0与border：none</summary>
      
    
    
    
    <category term="css" scheme="https://1578536879.github.io/categories/css/"/>
    
    
  </entry>
  
</feed>
