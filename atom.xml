<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欣のblog</title>
  
  
  <link href="https://1578536879.github.io/atom.xml" rel="self"/>
  
  <link href="https://1578536879.github.io/"/>
  <updated>2024-06-14T07:50:22.168Z</updated>
  <id>https://1578536879.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>维生素</title>
    <link href="https://1578536879.github.io/2024/04/09/%E8%90%A5%E5%85%BB%E5%AD%A6/%E3%80%90%E8%90%A5%E5%85%BB%E5%AD%A6%E5%9F%BA%E7%A1%80%E3%80%91%E7%BB%B4%E7%94%9F%E7%B4%A0%E5%90%88%E9%9B%86/"/>
    <id>https://1578536879.github.io/2024/04/09/%E8%90%A5%E5%85%BB%E5%AD%A6/%E3%80%90%E8%90%A5%E5%85%BB%E5%AD%A6%E5%9F%BA%E7%A1%80%E3%80%91%E7%BB%B4%E7%94%9F%E7%B4%A0%E5%90%88%E9%9B%86/</id>
    <published>2024-04-09T13:16:16.712Z</published>
    <updated>2024-06-14T07:50:22.168Z</updated>
    
    <content type="html"><![CDATA[<h2 id="维生素"><a href="#维生素" class="headerlink" title="维生素"></a>维生素</h2><p>不是构成身体组织原料，也不是能量来源，是一类生理调节物质，在代谢中起重要作用</p><p>体内不能&#x2F;很少合成，必须由食物提供</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li><p>水溶性</p><p>在体内少量存储，缺乏不足易出现缺乏症</p><p>维生素 B1（硫胺素，抗脚气病因子） 酸性稳定</p><p>维生素 B2（核黄素，维生素 PP，尼克酸， 抗赖皮病因子）</p><p>烟酸</p><p>维生素 B6（吡哆酸，抗皮炎维生素，泛酸，遍多酸，生物素，）</p><p>叶酸</p><p>维生素 B12（钴胺素，抗恶性贫血维生素）</p><p>维 C（100mg）</p></li><li><p>脂溶性</p><p>大部分存储在脂肪中，过量摄入会导致中毒</p><p>维生素 A（视黄醇）</p><p>维生素 D（钙化醇， 抗佝偻病维生素，10ug）</p><p>维生素 E（生育酚，抗不育维生素）</p><p>维生素 K（凝血维生素）</p></li></ul><h2 id="维生素A"><a href="#维生素A" class="headerlink" title="维生素A"></a>维生素A</h2><p>包括维A1、A2</p><p>维A原：分解形式形成维A的类胡萝卜素</p><h3 id="理化性质"><a href="#理化性质" class="headerlink" title="理化性质"></a>理化性质</h3><ul><li>溶于脂肪，不溶于水</li><li>酸、热、碱稳定，易氧化破坏</li><li>食物中含磷脂、维E、抗坏血酸或其他抗氧化剂时非常稳定</li></ul><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li>视觉</li><li>上皮组织和细胞健康</li><li>骨骼生长发育</li><li>促进生长生殖</li><li>其他：防癌、抗氧化、提高免疫力</li></ul><h3 id="缺乏"><a href="#缺乏" class="headerlink" title="缺乏"></a>缺乏</h3><ul><li>原因<ul><li>摄入不足</li><li>吸收利用障碍：慢性消化道疾病（慢性腹泻、肝胆疾病等</li><li>需要量增加：生长发育、重体力劳动者、急慢性消耗性疾病、传染病</li><li>代谢障碍：甲状腺功能低下，糖尿病</li><li>营养素影响：蛋白质、Zn缺乏</li><li>其他：酗酒、药物影响（消胆胺、新霉素、秋水仙碱）</li></ul></li><li>表现<ul><li>视力<ul><li>暗适应能力下降，眼干燥症，夜盲，角膜软化（最早症状），失明</li></ul></li><li>皮肤<ul><li>干燥、蟾皮症</li></ul></li><li>骨骼<ul><li>儿童骨组织停止生长，发育迟缓，牙龈增生角质，牙齿生长缓慢</li></ul></li><li>生殖系统<ul><li>女性受孕和怀胎或导致婴儿畸形或死亡，男性精子减少，性激素合成障碍</li></ul></li><li>免疫功能低下<ul><li>儿童反复呼吸道感染和腹泻</li></ul></li></ul></li><li>预防<ul><li>摄入维A及β-胡萝卜素丰富食物</li><li>检测易感人群（婴幼儿、孕妇乳母、儿童）维A状况</li><li>进行干预：视黄醇制剂，维A强化食品</li></ul></li></ul><h3 id="过量"><a href="#过量" class="headerlink" title="过量"></a>过量</h3><ul><li>急性中毒</li><li>婴幼儿慢性中毒</li><li>皮肤干粗&#x2F;薄而发亮</li><li>脂溢性皮炎</li><li>唇及口角皲裂</li><li>骨痛</li><li>毛发稀少。干枯</li></ul><h3 id="影响吸收因素"><a href="#影响吸收因素" class="headerlink" title="影响吸收因素"></a>影响吸收因素</h3><ul><li>小肠中的胆汁 乳化维A必须</li><li>足量脂肪促进</li><li>抗氧化剂</li><li>矿物油及肠道寄生虫的存在不利于吸收</li></ul><h3 id="视黄醇活性当量ugRAE"><a href="#视黄醇活性当量ugRAE" class="headerlink" title="视黄醇活性当量ugRAE"></a>视黄醇活性当量ugRAE</h3><blockquote><p>膳食或食物中的视黄醇活性当量ugRAE&#x3D;全反式视黄醇（ug）+1&#x2F;2补充剂纯品反式β-胡萝卜素（ug）+1&#x2F;12膳食全反式β-胡萝卜素（ug）+1&#x2F;24其他膳食维A原胡萝卜素（yg）</p></blockquote><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><ul><li>维A<ul><li>动物肝脏，动物肉、鱼油、全奶、蛋黄等</li></ul></li><li>β-胡萝卜素<ul><li>植物性、有色蔬菜和水果</li></ul></li></ul><h3 id="测定"><a href="#测定" class="headerlink" title="测定"></a>测定</h3><ul><li>眼结膜印迹细胞学法</li><li>血清视黄醇（0.7umol&#x2F;g 0.35umol&#x2F;g</li><li>生理盲点</li><li>暗适应能力</li></ul><h2 id="维生素D"><a href="#维生素D" class="headerlink" title="维生素D"></a>维生素D</h2><ul><li>维D原<ul><li>皮肤7-脱氧胆固醇-》D3</li><li>植物麦角固醇 -》D2</li></ul></li><li>肝脏<ul><li>25-OH-D3 -》第一次羟化</li></ul></li><li>肾脏<ul><li>1,25-(OH)2-D3 -》第二次羟化  活性形式</li></ul></li></ul><h3 id="理化性质-1"><a href="#理化性质-1" class="headerlink" title="理化性质"></a>理化性质</h3><ul><li>溶于脂肪</li><li>不溶于水</li><li>热碱稳定</li></ul><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><ul><li>促进小肠黏膜对Ca吸收</li><li>促进肾小管对Ca、P重吸收</li><li>促进骨组织软化</li></ul><h3 id="缺乏-1"><a href="#缺乏-1" class="headerlink" title="缺乏"></a>缺乏</h3><ul><li>婴幼儿佝偻病<ul><li>神经精神状况：多汗、夜惊、枕秃</li><li>骨骼：颅骨软化，肋骨串珠，胸廓串珠</li><li>其他：发育不良，神情呆滞、呼吸运动限制、易继发性肺部感染和消化功能障碍</li><li>判断<ul><li>血清25-(OH)D3水平</li><li>X射线检查</li></ul></li></ul></li><li>成人骨软化病<ul><li>肌无力、骨痛、骨压痛、步态特殊，”鸭步“</li><li>判断标准<ul><li>骨质软化，骨样组织增生，骨骼变形</li></ul></li></ul></li><li>预防<ul><li>系统管理</li><li>综合防治</li><li>因地制宜</li><li>早治早防</li></ul></li></ul><h3 id="来源-1"><a href="#来源-1" class="headerlink" title="来源"></a>来源</h3><ul><li>太阳皮肤，取决于照射皮肤面积，照射时长，程度</li><li>脂肪含量高的海鱼、肝脏、蛋黄；</li><li>奶油、干酪、天然浓缩鱼油</li></ul><h2 id="维E"><a href="#维E" class="headerlink" title="维E"></a>维E</h2><h3 id="理化性质-2"><a href="#理化性质-2" class="headerlink" title="理化性质"></a>理化性质</h3><ul><li>有8种化合物，α-生育酚</li><li>热、光、碱稳定</li></ul><h3 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h3><ul><li>抗氧化</li><li>保持红细胞活性</li><li>调节体内某些物质活性</li><li>其他</li></ul><h3 id="膳食中α-TE当量"><a href="#膳食中α-TE当量" class="headerlink" title="膳食中α-TE当量"></a>膳食中α-TE当量</h3><blockquote><p>膳食中α-TE当量&#x3D;1*α-生育酚（mg）+ 0.5 *β-生育酚（mg）+ 0.1 * γ-生育酚 + 0.02 * δ-生育酚 + 0.3 * 三烯生育酚</p></blockquote><h3 id="来源-2"><a href="#来源-2" class="headerlink" title="来源"></a>来源</h3><ul><li>只能在植物种合成</li><li>麦胚、向日葵及其油富含α-生育酚</li></ul><h2 id="维K"><a href="#维K" class="headerlink" title="维K"></a>维K</h2><h3 id="理化性质-3"><a href="#理化性质-3" class="headerlink" title="理化性质"></a>理化性质</h3><ul><li>常温下黄色油状物，其衍生物为黄色结晶</li><li>溶于脂肪</li><li>光、热敏感，热氧化剂稳定</li></ul><h3 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a>功能</h3><ul><li>血液凝固</li><li>骨代谢 辅酶<ul><li>作为骨质疏松预判指标</li></ul></li></ul><h3 id="缺乏-2"><a href="#缺乏-2" class="headerlink" title="缺乏"></a>缺乏</h3><ul><li>很少缺乏，新生儿出血症</li></ul><h3 id="来源-3"><a href="#来源-3" class="headerlink" title="来源"></a>来源</h3><ul><li>绿色蔬菜（最多</li><li>肝脏、鱼类</li><li>肉、乳（中等含量</li><li>水果、谷物</li></ul><h2 id="维C"><a href="#维C" class="headerlink" title="维C"></a>维C</h2><h3 id="理化性质-4"><a href="#理化性质-4" class="headerlink" title="理化性质"></a>理化性质</h3><ul><li>易溶于水，不溶于脂肪</li><li>酸性稳定，有氧、碱、热、光不稳定</li><li>氧化酶、痕量铜、Fe存在，氧化破坏</li><li>黄瓜、白菜氧化酶多，但不稳定</li><li>枣、刺梨中含生物类黄酮，稳定</li></ul><h3 id="功能-4"><a href="#功能-4" class="headerlink" title="功能"></a>功能</h3><ul><li>羟化反应<ul><li>酶的辅助酶</li><li>促进胶原合成，神经递质合成</li><li>类固醇羟化，有机物或毒物羟化解读</li></ul></li><li>还原作用<ul><li>促进抗体合成</li><li>Fe吸收，四氢叶酸形成</li><li>维持疏基酶形成</li></ul></li><li>其他<ul><li>解毒</li><li>预防癌症</li><li>消除自由基</li></ul></li></ul><h3 id="缺乏-3"><a href="#缺乏-3" class="headerlink" title="缺乏"></a>缺乏</h3><ul><li>原因<ul><li>摄入降低</li><li>吸收率降低</li><li>需要量升高</li><li>药物</li></ul></li><li>表现<ul><li>面色苍白，倦怠无力，食欲减退，抑郁等</li><li>儿童易激惹，体重不增，水肿，发热</li><li>贫血</li><li>出血症状：皮肤瘀点为较突出症状，牙龈出现，鼻出血</li><li>骨骼：四肢疼痛呈蛙状，坏血性串珠</li></ul></li><li>判断标准-典型症状<ul><li>毛细血管脆性实验</li><li>血浆及白细胞中维C含量测定</li><li>维C尿负荷实验</li><li>治疗实验</li></ul></li><li>预防<ul><li>摄入富含维C的蔬果</li><li>合理烹调（加碱被破坏</li><li>定期监测</li></ul></li></ul><h3 id="来源-4"><a href="#来源-4" class="headerlink" title="来源"></a>来源</h3><ul><li>新鲜蔬果</li></ul><h2 id="维B1"><a href="#维B1" class="headerlink" title="维B1"></a>维B1</h2><h3 id="理化性质-5"><a href="#理化性质-5" class="headerlink" title="理化性质"></a>理化性质</h3><ul><li>极溶于水，1%溶于乙醇，不溶于其他有机溶剂</li><li>耐酸不耐碱</li></ul><h3 id="功能-5"><a href="#功能-5" class="headerlink" title="功能"></a>功能</h3><ul><li>构成辅酶，维持体内正常代谢<ul><li>硫胺素焦磷酸（TPP）是活性形式</li></ul></li><li>促进肠胃蠕动<ul><li>抑制胆碱酯酶对乙酰胆碱水解</li></ul></li><li>对神经组织作用</li></ul><h3 id="缺乏-4"><a href="#缺乏-4" class="headerlink" title="缺乏"></a>缺乏</h3><ul><li>原因<ul><li>摄入减少（谷类淘洗次数过多，或者加碱</li><li>利用率低</li><li>需要量&#x2F;消耗量增加</li><li>抗硫胺素因子</li><li>慢性乙醇中毒导致吸收减少</li></ul></li><li>表现<ul><li>亚临床型（3个月<ul><li>疲乏无力，烦躁不安，易激动，肠胃功能紊乱，下肢倦怠酸痛</li></ul></li><li>神经型<ul><li>主累及肢体远端，下肢发病比上肢早，呈上升性，对称性感觉异常早于运动异常</li><li>病情加重烦躁不安，声音嘶哑</li><li>韦尼克脑病</li></ul></li><li>心血管型<ul><li>以右心为主的左右心室衰竭，常见症状为水肿</li></ul></li><li>婴儿脚气病：多发于数月婴幼儿，发病急<ul><li>初期食欲不振，呕吐，兴奋，腹痛便秘，水肿，呼吸急促困难</li><li>喉鸣，晚期发绀，心力衰竭，肺充血及肝淤血</li><li>严重时脑充血，脑高压，强直痉挛，昏迷甚至死亡</li></ul></li></ul></li><li>预防<ul><li>改善谷类加工方法，调整饮食结构</li><li>开展易感人群监测</li><li>开展健康活动</li><li>B1强化食品</li></ul></li></ul><h3 id="来源-5"><a href="#来源-5" class="headerlink" title="来源"></a>来源</h3><ul><li>瓜子、花生</li><li>小麦粉、大豆粉、玉米等谷类</li><li>瘦猪肉</li><li>鱼、蔬果少</li></ul><h2 id="维B2"><a href="#维B2" class="headerlink" title="维B2"></a>维B2</h2><h3 id="理化性质-6"><a href="#理化性质-6" class="headerlink" title="理化性质"></a>理化性质</h3><ul><li>在酸性&#x2F;中性环境中，短期加盐不被破坏</li><li>碱性加热不稳定</li><li>热稳定，光敏感</li></ul><h3 id="功能-6"><a href="#功能-6" class="headerlink" title="功能"></a>功能</h3><ul><li>构成黄酶、辅酶，参与物质代谢</li><li>参与细胞正常生长</li><li>其他：肾上腺皮质激素的产生，骨髓中红细胞生成及Fe吸收，储存</li></ul><h3 id="缺乏-5"><a href="#缺乏-5" class="headerlink" title="缺乏"></a>缺乏</h3><ul><li>原因<ul><li>摄入减少</li><li>吸收障碍</li><li>需要&#x2F;消耗量增加</li></ul></li><li>表现<ul><li>视觉<ul><li>视线模糊、畏光、暗适应能力下降</li><li>视力疲劳，角膜充血，流泪</li></ul></li><li>口角炎，舌（地图舌）唇炎、脂溢性皮炎</li><li>阴囊、阴唇炎，脱发</li><li>口腔-生殖综合征</li></ul></li><li>预发<ul><li>摄入增加，改善烹饪方法</li><li>开展活动</li><li>营养干预</li></ul></li></ul><h3 id="来源-6"><a href="#来源-6" class="headerlink" title="来源"></a>来源</h3><ul><li>动物肝脏</li><li>蛋黄、牛奶</li><li>大豆、绿叶蔬菜</li></ul><h2 id="维B6"><a href="#维B6" class="headerlink" title="维B6"></a>维B6</h2><p>空肠吸收</p><h3 id="理化性质-7"><a href="#理化性质-7" class="headerlink" title="理化性质"></a>理化性质</h3><ul><li>酸、氧稳定</li><li>碱不稳</li></ul><h3 id="功能-7"><a href="#功能-7" class="headerlink" title="功能"></a>功能</h3><ul><li>氨基酸代谢</li><li>糖原与脂肪代谢</li><li>其他：降低同型半胱氨酸水平，核酸代谢</li></ul><h3 id="缺乏-6"><a href="#缺乏-6" class="headerlink" title="缺乏"></a>缺乏</h3><ul><li>脂溢性皮炎</li><li>小细胞性贫血</li><li>癫病样惊厥及忧郁，精神错乱</li></ul><h3 id="来源-7"><a href="#来源-7" class="headerlink" title="来源"></a>来源</h3><ul><li>豆、畜肉、肝脏、鱼</li><li>蛋、蔬果</li><li>乳、油少</li></ul><h2 id="烟酸"><a href="#烟酸" class="headerlink" title="烟酸"></a>烟酸</h2><h3 id="理化性质-8"><a href="#理化性质-8" class="headerlink" title="理化性质"></a>理化性质</h3><ul><li>溶于水、乙醇</li><li>酸、碱、氧不易破坏</li></ul><h3 id="功能-8"><a href="#功能-8" class="headerlink" title="功能"></a>功能</h3><ul><li>构成辅酶</li><li>葡萄糖耐药因子构成成分（Cr</li><li>保护心血管</li></ul><h3 id="缺乏-7"><a href="#缺乏-7" class="headerlink" title="缺乏"></a>缺乏</h3><ul><li>赖皮病，3D症状<ul><li>皮炎、腹泻、痴呆</li><li>前驱症状：体重降低，疲乏无力，记忆力降低，失眠</li></ul></li></ul><h3 id="烟酸当量-mgNE"><a href="#烟酸当量-mgNE" class="headerlink" title="烟酸当量 mgNE"></a>烟酸当量 mgNE</h3><blockquote><p>mgNE&#x3D;烟酸mg+1&#x2F;60色氨酸mg</p></blockquote><h3 id="来源-8"><a href="#来源-8" class="headerlink" title="来源"></a>来源</h3><ul><li>肝肾、瘦畜肉，鱼类、坚果含量高</li><li>玉米<ul><li>含量不低，但是是结合性烟酸（加碱变为游离型）</li><li>不易被人体利用吸收，色氨酸含量低</li></ul></li></ul><h2 id="叶酸"><a href="#叶酸" class="headerlink" title="叶酸"></a>叶酸</h2><h3 id="理化性质-9"><a href="#理化性质-9" class="headerlink" title="理化性质"></a>理化性质</h3><ul><li>微溶于水，钠盐易溶解</li><li>不溶于乙醇、乙醚</li><li>热、光、酸不稳定</li><li>碱、中性中对热稳定</li></ul><h3 id="生理功能"><a href="#生理功能" class="headerlink" title="生理功能"></a>生理功能</h3><ul><li>参与嘌呤和胸腺嘧啶的合成，进一步合成DNA、RNA</li><li>参与氨基酸之间的转换</li><li>参与血红蛋白和重要化合物合成<ul><li>如肾上腺素、肌酸、胆碱等</li></ul></li></ul><h3 id="缺乏-8"><a href="#缺乏-8" class="headerlink" title="缺乏"></a>缺乏</h3><ul><li>原因<ul><li>摄入减少</li><li>消化吸收、利用率低</li><li>需要&#x2F;消耗量增加</li><li>排除量增加</li></ul></li><li>表现<ul><li>巨幼红细胞贫血</li><li>高同型半胱氨酸血症</li><li>胎儿神经异常</li></ul></li><li>预防<ul><li>一般人群注意食物多样，平衡膳食</li><li>妊娠妇女从围孕期开始补充</li></ul></li></ul><h3 id="叶酸当量-ugDEF"><a href="#叶酸当量-ugDEF" class="headerlink" title="叶酸当量 ugDEF"></a>叶酸当量 ugDEF</h3><blockquote><p>ugDEF&#x3D;膳食叶酸ug（50%利用率+1.7*叶酸补充剂（85%利用率</p></blockquote><h3 id="来源-9"><a href="#来源-9" class="headerlink" title="来源"></a>来源</h3><ul><li>动物肝肾</li><li>鸡蛋、豆类</li><li>酵母</li><li>绿叶菜，水果，坚果</li></ul><h3 id="维B12（钴胺素、氰钴胺"><a href="#维B12（钴胺素、氰钴胺" class="headerlink" title="维B12（钴胺素、氰钴胺"></a>维B12（钴胺素、氰钴胺</h3><h3 id="理化性质-10"><a href="#理化性质-10" class="headerlink" title="理化性质"></a>理化性质</h3><ul><li>弱酸稳定，强酸&#x2F;碱性易分解</li><li>活性形式<ul><li>甲基B12（甲基钴胺素</li><li>辅酶B12（腺苷基钴胺素</li></ul></li></ul><h3 id="功能-9"><a href="#功能-9" class="headerlink" title="功能"></a>功能</h3><ul><li>参与同型半胱氨酸甲基转变为蛋氨酸：甲基B12</li><li>参与甲基丙二酸  琥珀酸的异化反应</li></ul><h3 id="缺乏-9"><a href="#缺乏-9" class="headerlink" title="缺乏"></a>缺乏</h3><ul><li>高同型半胱氨酸血症</li><li>巨幼红细胞贫血</li></ul><h3 id="来源-10"><a href="#来源-10" class="headerlink" title="来源"></a>来源</h3><ul><li>肉、内脏、鱼、禽、贝类、蛋</li><li>乳（少</li><li>植物几乎不含</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;维生素&quot;&gt;&lt;a href=&quot;#维生素&quot; class=&quot;headerlink&quot; title=&quot;维生素&quot;&gt;&lt;/a&gt;维生素&lt;/h2&gt;&lt;p&gt;不是构成身体组织原料，也不是能量来源，是一类生理调节物质，在代谢中起重要作用&lt;/p&gt;
&lt;p&gt;体内不能&amp;#x2F;很少合成，必须由食物</summary>
      
    
    
    
    <category term="营养学" scheme="https://1578536879.github.io/categories/%E8%90%A5%E5%85%BB%E5%AD%A6/"/>
    
    
    <category term="营养学" scheme="https://1578536879.github.io/tags/%E8%90%A5%E5%85%BB%E5%AD%A6/"/>
    
    <category term="营养学基础" scheme="https://1578536879.github.io/tags/%E8%90%A5%E5%85%BB%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>axios取消请求原理</title>
    <link href="https://1578536879.github.io/2024/03/25/%E3%80%90%E6%BA%90%E7%A0%81%E3%80%91axios-%E5%8F%96%E6%B6%88%E8%AF%B7%E6%B1%82/"/>
    <id>https://1578536879.github.io/2024/03/25/%E3%80%90%E6%BA%90%E7%A0%81%E3%80%91axios-%E5%8F%96%E6%B6%88%E8%AF%B7%E6%B1%82/</id>
    <published>2024-03-25T07:29:33.336Z</published>
    <updated>2024-04-07T03:39:15.509Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://imgse.com/i/pFqWBin"><img src="https://s21.ax1x.com/2024/04/07/pFqWBin.png" alt="pFqWBin.png"></a></p><p><a href="https://imgse.com/i/pFqWrR0"><img src="https://s21.ax1x.com/2024/04/07/pFqWrR0.png" alt="pFqWrR0.png"></a></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CancelToken</span> = axios.<span class="property">CancelToken</span>;</span><br><span class="line"><span class="keyword">const</span> source = <span class="title class_">CancelToken</span>.<span class="title function_">source</span>();</span><br><span class="line"></span><br><span class="line">axios</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&quot;/get/server&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">cancelToken</span>: source.<span class="property">token</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (axios.<span class="title function_">isCancel</span>(err)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求取消&quot;</span>, err.<span class="property">message</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// handle error</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消函数。</span></span><br><span class="line">source.<span class="title function_">cancel</span>(<span class="string">&quot;调用cancel方法&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="取消类"><a href="#取消类" class="headerlink" title="取消类"></a>取消类</h2><h3 id="CancelToken"><a href="#CancelToken" class="headerlink" title="CancelToken"></a>CancelToken</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /lib/cancel/CancelToken.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CancelToken</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">  <span class="comment">// executor传入的函数，参数是取消函数，调用这个参数可以直接取消请求</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> executor !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;executor must be a function.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> resolvePromise;</span><br><span class="line">  <span class="comment">// 实例化一个Promise</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">promise</span> = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> <span class="title function_">promiseExecutor</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">    resolvePromise = resolve;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> token = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">// 如果执行了取消，那么就执行监听取消的函数</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">promise</span>.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">cancel</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!token.<span class="property">_listeners</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> i;</span><br><span class="line">    <span class="keyword">var</span> l = token.<span class="property">_listeners</span>.<span class="property">length</span>;</span><br><span class="line">    <span class="comment">// 循环执行</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">      token.<span class="property">_listeners</span>[i](cancel);</span><br><span class="line">    &#125;</span><br><span class="line">    token.<span class="property">_listeners</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这个没有在axios里面看到使用过，猜测应该是之前老axios遗留代码</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">promise</span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onfulfilled</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> _resolve;</span><br><span class="line">    <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">      token.<span class="title function_">subscribe</span>(resolve);</span><br><span class="line">      _resolve = resolve;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(onfulfilled);</span><br><span class="line"></span><br><span class="line">    promise.<span class="property">cancel</span> = <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params"></span>) &#123;</span><br><span class="line">      token.<span class="title function_">unsubscribe</span>(_resolve);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 执行传入的函数，当source.cancel时，就执行这个回调</span></span><br><span class="line">  <span class="title function_">executor</span>(<span class="keyword">function</span> <span class="title function_">cancel</span>(<span class="params">message</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果已经有reason，那么表示是已经取消请求了</span></span><br><span class="line">    <span class="keyword">if</span> (token.<span class="property">reason</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把CanceledError实例作为一个reason，并且把message作为reason的message</span></span><br><span class="line">    token.<span class="property">reason</span> = <span class="keyword">new</span> <span class="title class_">CanceledError</span>(message);</span><br><span class="line">    <span class="comment">// 执行this.promise.then()的回调</span></span><br><span class="line">    <span class="title function_">resolvePromise</span>(token.<span class="property">reason</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否已经取消，因为只有reason有值时，才表示已经取消请求了</span></span><br><span class="line"><span class="comment"> * 如果已经取消请求，那么直接抛出错误，走入catch</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">CancelToken</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">throwIfRequested</span> = <span class="keyword">function</span> <span class="title function_">throwIfRequested</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">reason</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="variable language_">this</span>.<span class="property">reason</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加取消监听函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">CancelToken</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">subscribe</span> = <span class="keyword">function</span> <span class="title function_">subscribe</span>(<span class="params">listener</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果已经执行取消，那么就直接执行监听函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">reason</span>) &#123;</span><br><span class="line">    <span class="title function_">listener</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将监听函数加入数组中</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_listeners</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_listeners</span>.<span class="title function_">push</span>(listener);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_listeners</span> = [listener];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除监听函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">CancelToken</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">unsubscribe</span> = <span class="keyword">function</span> <span class="title function_">unsubscribe</span>(<span class="params">listener</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_listeners</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> index = <span class="variable language_">this</span>.<span class="property">_listeners</span>.<span class="title function_">indexOf</span>(listener);</span><br><span class="line">  <span class="keyword">if</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_listeners</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns an object that contains a new `CancelToken` and a function that, when called,</span></span><br><span class="line"><span class="comment"> * cancels the `CancelToken`.</span></span><br><span class="line"><span class="comment"> * 调用创建取消token的函数，返回一个对象，包含一个取消token和一个取消函数</span></span><br><span class="line"><span class="comment"> * token是返回的函数实例，即可以直接访问函数内部</span></span><br><span class="line"><span class="comment"> * cancel是在CancelToken里面执行executor时，里面包裹的回调函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">CancelToken</span>.<span class="property">source</span> = <span class="keyword">function</span> <span class="title function_">source</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> cancel;</span><br><span class="line">  <span class="comment">// 创建一个实例</span></span><br><span class="line">  <span class="keyword">var</span> token = <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="keyword">function</span> <span class="title function_">executor</span>(<span class="params">c</span>) &#123;</span><br><span class="line">    cancel = c;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 返回实例和取消调用的函数</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">token</span>: token,</span><br><span class="line">    <span class="attr">cancel</span>: cancel,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">CancelToken</span>;</span><br></pre></td></tr></table></figure><h2 id="取消调用流程"><a href="#取消调用流程" class="headerlink" title="取消调用流程"></a>取消调用流程</h2><p>以下是以浏览器的流程为示例</p><ul><li><p><code>dispatchRequest</code>中判断一次此请求是否确认取消</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /lib/core/dispatchRequest.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throwIfCancellationRequested</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果有cancelToken，那么表示这个请求是可被取消的，调用cancelToken的请求取消报错即可结束</span></span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">cancelToken</span>) &#123;</span><br><span class="line">    config.<span class="property">cancelToken</span>.<span class="title function_">throwIfRequested</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">signal</span> &amp;&amp; config.<span class="property">signal</span>.<span class="property">aborted</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CanceledError</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 xhr 文件中，进行取消监听函数的添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果配置列表里有cancelToken，那么表示需要走取消监听</span></span><br><span class="line"><span class="comment">// /lib/adapters/xhr</span></span><br><span class="line"><span class="keyword">if</span> (config.<span class="property">cancelToken</span> || config.<span class="property">signal</span>) &#123;</span><br><span class="line">    <span class="comment">// 取消函数的回调</span></span><br><span class="line">    onCanceled = <span class="keyword">function</span>(<span class="params">cancel</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果这个请求已经进行完成了,那么就不走后面的函数</span></span><br><span class="line">      <span class="keyword">if</span> (!request) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果这个请求还没有结束或者取消,那么就使请求回调走入catch中</span></span><br><span class="line">      <span class="title function_">reject</span>(!cancel || (cancel &amp;&amp; cancel.<span class="property">type</span>) ? <span class="keyword">new</span> <span class="title class_">CanceledError</span>() : cancel);</span><br><span class="line">      <span class="comment">// 取消请求.调用xhr的取消</span></span><br><span class="line">      request.<span class="title function_">abort</span>();</span><br><span class="line">      <span class="comment">// 表明请求已经结束,防止重复取消</span></span><br><span class="line">      request = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 如果有cancelToken,那么就添加取消函数</span></span><br><span class="line">    config.<span class="property">cancelToken</span> &amp;&amp; config.<span class="property">cancelToken</span>.<span class="title function_">subscribe</span>(onCanceled);</span><br><span class="line">   <span class="comment">// 这个是针对于fetch的取消处理</span></span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">signal</span>) &#123;</span><br><span class="line">      config.<span class="property">signal</span>.<span class="property">aborted</span> ? <span class="title function_">onCanceled</span>() : config.<span class="property">signal</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;abort&#x27;</span>, onCanceled);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>onCanceled</code>这个函数的执行是在调用<code>source.cancel()</code>执行的</p></li><li><p>请求结束后,在 xhr 的<code>onloadend</code>&#x2F;<code>onreadystatechange</code>也进行了处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求结束之后的回调,不管是失败还是成功都会执行</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">done</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 如果有cancelToken,那么就取消监听订阅的这个函数</span></span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">cancelToken</span>) &#123;</span><br><span class="line">    config.<span class="property">cancelToken</span>.<span class="title function_">unsubscribe</span>(onCanceled);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// fetch则是取消监听取消的函数</span></span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">signal</span>) &#123;</span><br><span class="line">    config.<span class="property">signal</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;abort&quot;</span>, onCanceled);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;onloadend&quot;</span> <span class="keyword">in</span> request) &#123;</span><br><span class="line">  <span class="comment">// Use onloadend if available</span></span><br><span class="line">  request.<span class="property">onloadend</span> = onloadend;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(onloadend);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onloadend</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 如果请求已经取消,那么直接结束就行</span></span><br><span class="line">  <span class="keyword">if</span> (!request) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> responseHeaders =</span><br><span class="line">    <span class="string">&quot;getAllResponseHeaders&quot;</span> <span class="keyword">in</span> request</span><br><span class="line">      ? <span class="title function_">parseHeaders</span>(request.<span class="title function_">getAllResponseHeaders</span>())</span><br><span class="line">      : <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> responseData =</span><br><span class="line">    !responseType || responseType === <span class="string">&quot;text&quot;</span> || responseType === <span class="string">&quot;json&quot;</span></span><br><span class="line">      ? request.<span class="property">responseText</span></span><br><span class="line">      : request.<span class="property">response</span>;</span><br><span class="line">  <span class="keyword">var</span> response = &#123;</span><br><span class="line">    <span class="attr">data</span>: responseData,</span><br><span class="line">    <span class="attr">status</span>: request.<span class="property">status</span>,</span><br><span class="line">    <span class="attr">statusText</span>: request.<span class="property">statusText</span>,</span><br><span class="line">    <span class="attr">headers</span>: responseHeaders,</span><br><span class="line">    <span class="attr">config</span>: config,</span><br><span class="line">    <span class="attr">request</span>: request,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 用请求结果去进行判断</span></span><br><span class="line">  <span class="title function_">settle</span>(</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(value);</span><br><span class="line">      <span class="title function_">done</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(err);</span><br><span class="line">      <span class="title function_">done</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    response</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /lib/core/settle.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">settle</span>(<span class="params">resolve, reject, response</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> validateStatus = response.<span class="property">config</span>.<span class="property">validateStatus</span>;</span><br><span class="line">  <span class="comment">// 如果请求返回状态是合理的,那么就直接resolve</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    !response.<span class="property">status</span> ||</span><br><span class="line">    !validateStatus ||</span><br><span class="line">    <span class="title function_">validateStatus</span>(response.<span class="property">status</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(response);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">AxiosError</span>(</span><br><span class="line">        <span class="string">&quot;Request failed with status code &quot;</span> + response.<span class="property">status</span>,</span><br><span class="line">        [<span class="title class_">AxiosError</span>.<span class="property">ERR_BAD_REQUEST</span>, <span class="title class_">AxiosError</span>.<span class="property">ERR_BAD_RESPONSE</span>][</span><br><span class="line">          <span class="title class_">Math</span>.<span class="title function_">floor</span>(response.<span class="property">status</span> / <span class="number">100</span>) - <span class="number">4</span></span><br><span class="line">        ],</span><br><span class="line">        response.<span class="property">config</span>,</span><br><span class="line">        response.<span class="property">request</span>,</span><br><span class="line">        response</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>请求结束后,在<code>dispatchRequest</code>中,也有相对于取消请求的处理</p><p>其实和开始请求之前的逻辑一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title function_">adapter</span>(config).<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">onAdapterResolution</span>(<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="title function_">throwIfCancellationRequested</span>(config);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>总结: </p><ul><li><p>对于请求开始前和结束后,都是在<code>dispatchRequest</code>文件中调用<code>cancelToken.throwIfRequested()</code>进行请求取消的</p></li><li><p>对于已经开始请求的,分为两个</p><ul><li><p>请求结果还未返回: 调用<code>cancelToken.subscribe()</code>进行请求取消回调的<strong>添加</strong></p></li><li><p>请求结果已经返回: 调用<code>cancelToken.unsubscribe()</code>进行请求取消回调的<strong>删除</strong></p></li><li><p>取消请求回调具体是在外部调用<code>source.cancel</code>进行的,因此会存在请求结果前或者请求结果返回后都存在的情况</p></li></ul></li></ul><h2 id="参链"><a href="#参链" class="headerlink" title="参链"></a>参链</h2><ul><li><p><a href="https://juejin.cn/post/7284417436752265277?searchId=202403261358326BBE4B654AB52795AB71">五分钟！让你彻底搞懂axios的请求取消原理！附源码分析</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5MjQwMzQyNw==&mid=2650744604&idx=1&sn=51d8d865c9848fd59f7763f5fb9ce789&chksm=88662490bf11ad86061ae76ff71a1177eeddab02c38d046eecd0e1ad25dc16f7591f91e9e3b2&scene=21#wechat_redirect">学习 axios 源码整体架构，打造属于自己的请求库</a></p><p>注:由于这篇文章时间较久,所以里面对于xhr的取消处理是之前的流程,和现在的最新版本不一致</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/AbortController">AbortController</a></p><p>针对于fetch的取消请求处理控制器</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://imgse.com/i/pFqWBin&quot;&gt;&lt;img src=&quot;https://s21.ax1x.com/2024/04/07/pFqWBin.png&quot; alt=&quot;pFqWBin.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https</summary>
      
    
    
    
    <category term="axios 源码" scheme="https://1578536879.github.io/categories/axios-%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="axios 源码" scheme="https://1578536879.github.io/tags/axios-%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>axios拦截器原理</title>
    <link href="https://1578536879.github.io/2024/03/22/%E3%80%90%E6%BA%90%E7%A0%81%E3%80%91axios-%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>https://1578536879.github.io/2024/03/22/%E3%80%90%E6%BA%90%E7%A0%81%E3%80%91axios-%E6%8B%A6%E6%88%AA%E5%99%A8/</id>
    <published>2024-03-22T07:39:37.730Z</published>
    <updated>2024-04-03T11:34:11.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="拦截器使用"><a href="#拦截器使用" class="headerlink" title="拦截器使用"></a>拦截器使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http request 拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config: any</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求拦截器&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http response 拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;响应拦截器&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">onError</span>(<span class="string">&quot;系统异常！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(url).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求结果&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line"><span class="comment">// 请求结果</span></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br></pre></td></tr></table></figure><h2 id="入口代码"><a href="#入口代码" class="headerlink" title="入口代码"></a>入口代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /lib/core/axios.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Axios</span>(<span class="params">instanceConfig</span>) &#123;</span><br><span class="line">  <span class="comment">// 分别设置请求和响应拦截器管理</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">interceptors</span> = &#123;</span><br><span class="line">    <span class="attr">request</span>: <span class="keyword">new</span> <span class="title class_">InterceptorManager</span>(),</span><br><span class="line">    <span class="attr">response</span>: <span class="keyword">new</span> <span class="title class_">InterceptorManager</span>(),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span> = <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">configOrUrl, config</span>) &#123;</span><br><span class="line">  <span class="comment">// 不相关代码...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// filter out skipped interceptors</span></span><br><span class="line">  <span class="comment">// 请求拦截器相关</span></span><br><span class="line">  <span class="keyword">var</span> requestInterceptorChain = [];</span><br><span class="line">  <span class="keyword">var</span> synchronousRequestInterceptors = <span class="literal">true</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">unshiftRequestInterceptors</span>(<span class="params"></span></span><br><span class="line"><span class="params">    interceptor</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="keyword">typeof</span> interceptor.<span class="property">runWhen</span> === <span class="string">&quot;function&quot;</span> &amp;&amp;</span><br><span class="line">      interceptor.<span class="title function_">runWhen</span>(config) === <span class="literal">false</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    synchronousRequestInterceptors =</span><br><span class="line">      synchronousRequestInterceptors &amp;&amp; interceptor.<span class="property">synchronous</span>;</span><br><span class="line"></span><br><span class="line">    requestInterceptorChain.<span class="title function_">unshift</span>(</span><br><span class="line">      interceptor.<span class="property">fulfilled</span>,</span><br><span class="line">      interceptor.<span class="property">rejected</span></span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 响应拦截器相关代码</span></span><br><span class="line">  <span class="keyword">var</span> responseInterceptorChain = [];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">pushResponseInterceptors</span>(<span class="params"></span></span><br><span class="line"><span class="params">    interceptor</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    responseInterceptorChain.<span class="title function_">push</span>(interceptor.<span class="property">fulfilled</span>, interceptor.<span class="property">rejected</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> promise;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!synchronousRequestInterceptors) &#123;</span><br><span class="line">    <span class="keyword">var</span> chain = [dispatchRequest, <span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">unshift</span>.<span class="title function_">apply</span>(chain, requestInterceptorChain);</span><br><span class="line">    chain = chain.<span class="title function_">concat</span>(responseInterceptorChain);</span><br><span class="line"></span><br><span class="line">    promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(config);</span><br><span class="line">    <span class="keyword">while</span> (chain.<span class="property">length</span>) &#123;</span><br><span class="line">      promise = promise.<span class="title function_">then</span>(chain.<span class="title function_">shift</span>(), chain.<span class="title function_">shift</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> newConfig = config;</span><br><span class="line">  <span class="keyword">while</span> (requestInterceptorChain.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> onFulfilled = requestInterceptorChain.<span class="title function_">shift</span>();</span><br><span class="line">    <span class="keyword">var</span> onRejected = requestInterceptorChain.<span class="title function_">shift</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      newConfig = <span class="title function_">onFulfilled</span>(newConfig);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">onRejected</span>(error);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    promise = <span class="title function_">dispatchRequest</span>(newConfig);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (responseInterceptorChain.<span class="property">length</span>) &#123;</span><br><span class="line">    promise = promise.<span class="title function_">then</span>(</span><br><span class="line">      responseInterceptorChain.<span class="title function_">shift</span>(),</span><br><span class="line">      responseInterceptorChain.<span class="title function_">shift</span>()</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="拦截器管理"><a href="#拦截器管理" class="headerlink" title="拦截器管理"></a>拦截器管理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /lib/core/InterceptorManager.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">&quot;./../utils&quot;</span>);</span><br><span class="line"><span class="comment">// 回调数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">InterceptorManager</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">handlers</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将新的拦截器添加到回调中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; fulfilled The function to handle `then` for a `Promise`</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; rejected The function to handle `reject` for a `Promise`</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">Number</span>&#125; An ID used to remove interceptor later</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">InterceptorManager</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">use</span> = <span class="keyword">function</span> <span class="title function_">use</span>(<span class="params">fulfilled, rejected, options</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">fulfilled</span>: fulfilled,</span><br><span class="line">    <span class="attr">rejected</span>: rejected,</span><br><span class="line">    <span class="attr">synchronous</span>: options ? options.<span class="property">synchronous</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">runWhen</span>: options ? options.<span class="property">runWhen</span> : <span class="literal">null</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; id The ID that was returned by `use`</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">InterceptorManager</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eject</span> = <span class="keyword">function</span> <span class="title function_">eject</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">handlers</span>[id]) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handlers</span>[id] = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遍历拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; fn The function to call for each interceptor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">InterceptorManager</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">forEach</span> = <span class="keyword">function</span> <span class="title function_">forEach</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  utils.<span class="title function_">forEach</span>(<span class="variable language_">this</span>.<span class="property">handlers</span>, <span class="keyword">function</span> <span class="title function_">forEachHandler</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (h !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="title function_">fn</span>(h);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">InterceptorManager</span>;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li><code>InterceptorManager</code>是一个管理拦截器的类，它包含一个<code>handlers</code>数组，用于存储拦截器。<code>use</code>方法用于添加拦截器，<code>eject</code>方法用于删除拦截器，<code>forEach</code>方法用于遍历拦截器。</li><li>在使用拦截器时，调用的<code>use</code>实际上是调用的<code>InterceptorManager</code>的<code>use</code>方法</li></ul><h2 id="请求拦截器"><a href="#请求拦截器" class="headerlink" title="请求拦截器"></a>请求拦截器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> requestInterceptorChain = [];</span><br><span class="line"><span class="keyword">var</span> synchronousRequestInterceptors = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// this.interceptors指向的是在文件`/lib/core/Axios.js`中Axios方法中定义的`this.interceptors`</span></span><br><span class="line"><span class="comment">// this.interceptors是一个InterceptorManager实例</span></span><br><span class="line"><span class="comment">// 在外部(项目)调用axios.interceptors.request的时候，会把对应的请求回调加入到this.interceptors.request的handlers中</span></span><br><span class="line"><span class="comment">// 这里的this.interceptors.request实际调用的是InterceptorManager的`forEach`方法，所以这里的foreach实际是遍历this.interceptors.request的handlers数组</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">unshiftRequestInterceptors</span>(<span class="params"></span></span><br><span class="line"><span class="params">  interceptor</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> interceptor.<span class="property">runWhen</span> === <span class="string">&quot;function&quot;</span> &amp;&amp;</span><br><span class="line">    interceptor.<span class="title function_">runWhen</span>(config) === <span class="literal">false</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断请求拦截器中是否有异步的函数</span></span><br><span class="line">  synchronousRequestInterceptors =</span><br><span class="line">    synchronousRequestInterceptors &amp;&amp; interceptor.<span class="property">synchronous</span>;</span><br><span class="line">  <span class="comment">// 将请求拦截器的回调方法加入到requestInterceptorChain中，注意这里其实是以request的顺序倒叙了一次</span></span><br><span class="line">  <span class="comment">// 即如果request.handlers = [1,2,3]</span></span><br><span class="line">  <span class="comment">// 那么requestInterceptorChain = [3,2,1]</span></span><br><span class="line">  requestInterceptorChain.<span class="title function_">unshift</span>(interceptor.<span class="property">fulfilled</span>, interceptor.<span class="property">rejected</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 如果请求拦截器中有异步的函数</span></span><br><span class="line"><span class="keyword">if</span> (!synchronousRequestInterceptors) &#123;</span><br><span class="line">  <span class="comment">// dispatchRequest是实际的请求</span></span><br><span class="line">    <span class="keyword">var</span> chain = [dispatchRequest, <span class="literal">undefined</span>];</span><br><span class="line">    <span class="comment">// chain组成一个[请求拦截器1成功， 请求拦截器1失败，请求拦截器2成功，请求拦截器2失败，实际请求，响应拦截器1成功，响应拦截器1失败，响应拦截器2成功，响应拦截器2失败]</span></span><br><span class="line">    <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">unshift</span>.<span class="title function_">apply</span>(chain, requestInterceptorChain);</span><br><span class="line">    chain = chain.<span class="title function_">concat</span>(responseInterceptorChain);</span><br><span class="line"></span><br><span class="line">    promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(config);</span><br><span class="line">    <span class="keyword">while</span> (chain.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="comment">// 执行顺序应该为：</span></span><br><span class="line">      <span class="comment">// promise.then(请求拦截器1成功， 请求拦截器1失败)</span></span><br><span class="line">      <span class="comment">// promise.then(请求拦截器2成功，请求拦截器2失败)</span></span><br><span class="line">      <span class="comment">// promise.then(实际请求, undefined)</span></span><br><span class="line">      <span class="comment">// promise.then(响应拦截器1成功，响应拦截器1失败)</span></span><br><span class="line">      <span class="comment">// promise.then(响应拦截器2成功，响应拦截器2失败)</span></span><br><span class="line">      promise = promise.<span class="title function_">then</span>(chain.<span class="title function_">shift</span>(), chain.<span class="title function_">shift</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 无关代码...</span></span><br><span class="line"><span class="comment">// 将原有的请求配置浅拷贝一份出来</span></span><br><span class="line"><span class="keyword">var</span> newConfig = config;</span><br><span class="line"><span class="comment">// 循环执行requestInterceptorChain中的回调方法;</span></span><br><span class="line"><span class="keyword">while</span> (requestInterceptorChain.<span class="property">length</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> onFulfilled = requestInterceptorChain.<span class="title function_">shift</span>();</span><br><span class="line">  <span class="keyword">var</span> onRejected = requestInterceptorChain.<span class="title function_">shift</span>();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 执行新的请求拦截器，并将请求拦截器的结果作为下一次执行请求拦截器的参数</span></span><br><span class="line">    newConfig = <span class="title function_">onFulfilled</span>(newConfig);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 如果请求拦截器中报错，那么不执行后续的操作</span></span><br><span class="line">    <span class="title function_">onRejected</span>(error);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行请求</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  promise = <span class="title function_">dispatchRequest</span>(newConfig);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>请求拦截器的执行顺序是与书写顺序相反的<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config: any</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求拦截器1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config: any</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求拦截器2&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 执行结果：</span></span><br><span class="line"><span class="comment">// 请求拦截器2</span></span><br><span class="line"><span class="comment">// 请求拦截器1</span></span><br></pre></td></tr></table></figure></li><li>请求拦截器中如果报错，那么不执行后续的操作</li><li>如果请求拦截器中传入<code>synchronous=false</code>表示为异步请求，默认都是异步请求处理操作</li><li>如果是异步请求，axios是和相应拦截器一样的处理，用Promise包裹了一层</li><li>如果是同步请求，那么是直接循环执行的</li></ul><h2 id="响应拦截器"><a href="#响应拦截器" class="headerlink" title="响应拦截器"></a>响应拦截器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span> = <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">configOrUrl, config</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 响应拦截器数组</span></span><br><span class="line">  <span class="keyword">var</span> responseInterceptorChain = [];</span><br><span class="line">  <span class="comment">// 按书写顺序将响应拦截器加入到数组中</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">pushResponseInterceptors</span>(<span class="params">interceptor</span>) &#123;</span><br><span class="line">    responseInterceptorChain.<span class="title function_">push</span>(interceptor.<span class="property">fulfilled</span>, interceptor.<span class="property">rejected</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 无关代码...</span></span><br><span class="line">  <span class="keyword">var</span> promise;</span><br><span class="line">  <span class="comment">// 执行真实请求</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    promise = <span class="title function_">dispatchRequest</span>(newConfig);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 按书写顺序执行响应拦截器，并且是以异步执行的</span></span><br><span class="line">  <span class="keyword">while</span> (responseInterceptorChain.<span class="property">length</span>) &#123;</span><br><span class="line">    promise = promise.<span class="title function_">then</span>(responseInterceptorChain.<span class="title function_">shift</span>(), responseInterceptorChain.<span class="title function_">shift</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>与请求拦截器执行顺序不同，响应拦截器按书写顺序执行</li><li>响应拦截器是默认用异步函数包裹了一层，而请求拦截器是将同步和异步分为两种情况的</li></ul><h2 id="参链"><a href="#参链" class="headerlink" title="参链"></a>参链</h2><ul><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5MjQwMzQyNw==&mid=2650744604&idx=1&sn=51d8d865c9848fd59f7763f5fb9ce789&chksm=88662490bf11ad86061ae76ff71a1177eeddab02c38d046eecd0e1ad25dc16f7591f91e9e3b2&scene=21#wechat_redirect">学习 axios 源码整体架构，打造属于自己的请求库</a></p></li><li><p><a href="http://www.axios-js.com/zh-cn/docs/#axios-spread-callback">axios官网</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;拦截器使用&quot;&gt;&lt;a href=&quot;#拦截器使用&quot; class=&quot;headerlink&quot; title=&quot;拦截器使用&quot;&gt;&lt;/a&gt;拦截器使用&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</summary>
      
    
    
    
    <category term="axios 源码" scheme="https://1578536879.github.io/categories/axios-%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="axios 源码" scheme="https://1578536879.github.io/tags/axios-%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>axios请求流程</title>
    <link href="https://1578536879.github.io/2024/03/22/%E3%80%90%E6%BA%90%E7%A0%81%E3%80%91axios-%E6%B5%81%E7%A8%8B/"/>
    <id>https://1578536879.github.io/2024/03/22/%E3%80%90%E6%BA%90%E7%A0%81%E3%80%91axios-%E6%B5%81%E7%A8%8B/</id>
    <published>2024-03-22T07:00:09.825Z</published>
    <updated>2024-03-25T02:11:06.930Z</updated>
    
    <content type="html"><![CDATA[<h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><p>axios的入口是<code>/lib/axios.js</code>，实际主要的流程在<code>/lib/core/Axios.js</code>中</p><p>在<code>/lib/axios.js</code>中，创建了一个<code>/lib/core/Axios.js</code>实例，并继承了其父类的方法，其中就包括<code>get</code>&#x2F;<code>post</code>&#x2F;<code>delete</code>等方法</p><p><code>axios</code>实际是从<code>request</code>方法发起全部请求的，只是封装了<code>get</code>&#x2F;<code>post</code>&#x2F;<code>delete</code>等方法，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /lib/core/Axios.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Axios</span>(<span class="params">instanceConfig</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">defaults</span> = instanceConfig;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">interceptors</span> = &#123;</span><br><span class="line">    <span class="attr">request</span>: <span class="keyword">new</span> <span class="title class_">InterceptorManager</span>(),</span><br><span class="line">    <span class="attr">response</span>: <span class="keyword">new</span> <span class="title class_">InterceptorManager</span>()</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /lib/axios.js</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Axios</span> = <span class="built_in">require</span>(<span class="string">&#x27;./core/Axios&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createInstance</span>(<span class="params">defaultConfig</span>) &#123;</span><br><span class="line">  <span class="comment">// context的prototype上已经包含了get等方法</span></span><br><span class="line">  <span class="keyword">var</span> context = <span class="keyword">new</span> <span class="title class_">Axios</span>(defaultConfig);</span><br><span class="line">  <span class="comment">// 直接调用instance时，实际就是调用了request方法</span></span><br><span class="line">  <span class="comment">// 这就是为什么在调用axios时，除了可以通过get/post进行请求，也可以直接作为一个函数进行直接调用</span></span><br><span class="line">  <span class="keyword">var</span> instance = <span class="title function_">bind</span>(<span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span>, context);</span><br><span class="line"></span><br><span class="line">  utils.<span class="title function_">extend</span>(instance, <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>, context);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Copy context to instance</span></span><br><span class="line">  utils.<span class="title function_">extend</span>(instance, context);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Factory for creating new instances</span></span><br><span class="line">  instance.<span class="property">create</span> = <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">instanceConfig</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createInstance</span>(<span class="title function_">mergeConfig</span>(defaultConfig, instanceConfig));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请求流程"><a href="#请求流程" class="headerlink" title="请求流程"></a>请求流程</h2><p>主要的请求流程都在<code>request</code>方法里，方法存在于<code>/lib/core/Axios.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /lib/core/Axios.js</span></span><br><span class="line"><span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span> = <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">configOrUrl, config</span>) &#123;</span><br><span class="line">  <span class="comment">// 适配无额外配置，直接传入url的情况</span></span><br><span class="line">  <span class="comment">// 比如 axios(&#x27;example/url&#x27;)</span></span><br><span class="line">  <span class="comment">// Allow for axios(&#x27;example/url&#x27;[, config]) a la fetch API</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> configOrUrl === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    config = config || &#123;&#125;;</span><br><span class="line">    config.<span class="property">url</span> = configOrUrl;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    config = configOrUrl || &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将默认配置和传入的配置合并</span></span><br><span class="line">  config = <span class="title function_">mergeConfig</span>(<span class="variable language_">this</span>.<span class="property">defaults</span>, config);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置请求方法</span></span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">method</span>) &#123;</span><br><span class="line">    config.<span class="property">method</span> = config.<span class="property">method</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">defaults</span>.<span class="property">method</span>) &#123;</span><br><span class="line">    config.<span class="property">method</span> = <span class="variable language_">this</span>.<span class="property">defaults</span>.<span class="property">method</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    config.<span class="property">method</span> = <span class="string">&#x27;get&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> transitional = config.<span class="property">transitional</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (transitional !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    validator.<span class="title function_">assertOptions</span>(transitional, &#123;</span><br><span class="line">      <span class="comment">// 版本兼容配置-返回值转换为 Json 出错时是否置为 null 返回</span></span><br><span class="line">      <span class="attr">silentJSONParsing</span>: validators.<span class="title function_">transitional</span>(validators.<span class="property">boolean</span>),</span><br><span class="line">      <span class="comment">// 版本兼容配置-responseType 设置非 json 类型时是否强制转换成 json 格式</span></span><br><span class="line">      <span class="attr">forcedJSONParsing</span>: validators.<span class="title function_">transitional</span>(validators.<span class="property">boolean</span>),</span><br><span class="line">      <span class="comment">// 版本兼容配置-请求超时时是否默认返回 ETIMEDOUT 类型错</span></span><br><span class="line">      <span class="attr">clarifyTimeoutError</span>: validators.<span class="title function_">transitional</span>(validators.<span class="property">boolean</span>)</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// filter out skipped interceptors</span></span><br><span class="line">  <span class="comment">// 请求拦截器数组</span></span><br><span class="line">  <span class="keyword">var</span> requestInterceptorChain = [];</span><br><span class="line">  <span class="keyword">var</span> synchronousRequestInterceptors = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 循环访问拦截器的请求数组，将其放在请求真实执行之前</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">unshiftRequestInterceptors</span>(<span class="params">interceptor</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> interceptor.<span class="property">runWhen</span> === <span class="string">&#x27;function&#x27;</span> &amp;&amp; interceptor.<span class="title function_">runWhen</span>(config) === <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    synchronousRequestInterceptors = synchronousRequestInterceptors &amp;&amp; interceptor.<span class="property">synchronous</span>;</span><br><span class="line"></span><br><span class="line">    requestInterceptorChain.<span class="title function_">unshift</span>(interceptor.<span class="property">fulfilled</span>, interceptor.<span class="property">rejected</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 响应拦截器数组</span></span><br><span class="line">  <span class="comment">// 循环访问拦截器的响应数组，将其放在请求真实执行之后</span></span><br><span class="line">  <span class="keyword">var</span> responseInterceptorChain = [];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">pushResponseInterceptors</span>(<span class="params">interceptor</span>) &#123;</span><br><span class="line">    responseInterceptorChain.<span class="title function_">push</span>(interceptor.<span class="property">fulfilled</span>, interceptor.<span class="property">rejected</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> promise;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!synchronousRequestInterceptors) &#123;</span><br><span class="line">    <span class="keyword">var</span> chain = [dispatchRequest, <span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">unshift</span>.<span class="title function_">apply</span>(chain, requestInterceptorChain);</span><br><span class="line">    chain = chain.<span class="title function_">concat</span>(responseInterceptorChain);</span><br><span class="line"></span><br><span class="line">    promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(config);</span><br><span class="line">    <span class="keyword">while</span> (chain.<span class="property">length</span>) &#123;</span><br><span class="line">      promise = promise.<span class="title function_">then</span>(chain.<span class="title function_">shift</span>(), chain.<span class="title function_">shift</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> newConfig = config;</span><br><span class="line">  <span class="comment">// 一步步执行请求拦截器，并将其执行结果覆盖请求配置</span></span><br><span class="line">  <span class="keyword">while</span> (requestInterceptorChain.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> onFulfilled = requestInterceptorChain.<span class="title function_">shift</span>();</span><br><span class="line">    <span class="keyword">var</span> onRejected = requestInterceptorChain.<span class="title function_">shift</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      newConfig = <span class="title function_">onFulfilled</span>(newConfig);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">onRejected</span>(error);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行请求</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    promise = <span class="title function_">dispatchRequest</span>(newConfig);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 一步步执行响应拦截器</span></span><br><span class="line">  <span class="keyword">while</span> (responseInterceptorChain.<span class="property">length</span>) &#123;</span><br><span class="line">    promise = promise.<span class="title function_">then</span>(responseInterceptorChain.<span class="title function_">shift</span>(), responseInterceptorChain.<span class="title function_">shift</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里包含的流程如下：</p><ul><li>合并配置，包括默认配置和传入的配置</li><li>设置请求方法</li><li>请求拦截器 requestInterceptorChain</li><li>响应拦截器 responseInterceptorChain</li><li>执行请求（dispatchRequest），且是在请求拦截器之后，响应拦截器之前</li></ul><p>注意点：</p><ul><li>这里的执行是放在一个数组里面的，最开始只有实际的请求，然后在数组开头加上请求的拦截器函数，在数组最后加上请求的响应拦截器处理函数</li><li>拦截器的函数的参数是从上一个拦截器中返回的结果</li><li>默认请求头是<code>get</code></li></ul><h2 id="派发请求"><a href="#派发请求" class="headerlink" title="派发请求"></a>派发请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /lib/core/dispatchRequest.js</span></span><br><span class="line"><span class="comment">// 派发请求</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> <span class="title function_">dispatchRequest</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="comment">// 取消请求相关</span></span><br><span class="line">  <span class="title function_">throwIfCancellationRequested</span>(config);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Ensure headers exist</span></span><br><span class="line">  config.<span class="property">headers</span> = config.<span class="property">headers</span> || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Transform the data for a request or a response</span></span><br><span class="line">  config.<span class="property">data</span> = transformData.<span class="title function_">call</span>(</span><br><span class="line">    config,</span><br><span class="line">    config.<span class="property">data</span>,<span class="comment">//方法参数，如果是多个方法，那么方法2的参数是由方法1的返回值决定的</span></span><br><span class="line">    config.<span class="property">headers</span>,<span class="comment">//请求头</span></span><br><span class="line">    config.<span class="property">transformRequest</span><span class="comment">//执行的方法，具体是在axios里面自己定义了，在/lib/defaults.js文件中，主要是用于请求头的修改</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 合并拉平请求头</span></span><br><span class="line">  config.<span class="property">headers</span> = utils.<span class="title function_">merge</span>(</span><br><span class="line">    config.<span class="property">headers</span>.<span class="property">common</span> || &#123;&#125;,</span><br><span class="line">    config.<span class="property">headers</span>[config.<span class="property">method</span>] || &#123;&#125;,</span><br><span class="line">    config.<span class="property">headers</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果是这些请求，那么就删除掉对应的请求头</span></span><br><span class="line">  utils.<span class="title function_">forEach</span>(</span><br><span class="line">    [<span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;head&#x27;</span>, <span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;put&#x27;</span>, <span class="string">&#x27;patch&#x27;</span>, <span class="string">&#x27;common&#x27;</span>],</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">cleanHeaderConfig</span>(<span class="params">method</span>) &#123;</span><br><span class="line">      <span class="keyword">delete</span> config.<span class="property">headers</span>[method];</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> adapter = config.<span class="property">adapter</span> || defaults.<span class="property">adapter</span>;</span><br><span class="line">  <span class="comment">// 执行适配器</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">adapter</span>(config).<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">onAdapterResolution</span>(<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 取消相关请求的</span></span><br><span class="line">    <span class="title function_">throwIfCancellationRequested</span>(config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Transform response data</span></span><br><span class="line">    response.<span class="property">data</span> = transformData.<span class="title function_">call</span>(</span><br><span class="line">      config,</span><br><span class="line">      response.<span class="property">data</span>,</span><br><span class="line">      response.<span class="property">headers</span>,</span><br><span class="line">      config.<span class="property">transformResponse</span><span class="comment">//执行的方法，具体是在axios里面自己定义了，在/lib/defaults.js文件中，主要是用于响应结果的修改</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="keyword">function</span> <span class="title function_">onAdapterRejection</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">isCancel</span>(reason)) &#123;</span><br><span class="line">      <span class="title function_">throwIfCancellationRequested</span>(config);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Transform response data</span></span><br><span class="line">      <span class="keyword">if</span> (reason &amp;&amp; reason.<span class="property">response</span>) &#123;</span><br><span class="line">        reason.<span class="property">response</span>.<span class="property">data</span> = transformData.<span class="title function_">call</span>(</span><br><span class="line">          config,</span><br><span class="line">          reason.<span class="property">response</span>.<span class="property">data</span>,</span><br><span class="line">          reason.<span class="property">response</span>.<span class="property">headers</span>,</span><br><span class="line">          config.<span class="property">transformResponse</span></span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(reason);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>流程：</p><ul><li>统一处理请求头</li><li>合并拉平请求头</li><li>某些请求会删除请求头的<code>config.headers[method]</code></li><li>执行请求</li><li>获取到响应数据后，统一处理响应结果</li></ul><p>注意点：</p><ul><li><code>[&#39;delete&#39;, &#39;get&#39;, &#39;head&#39;, &#39;post&#39;, &#39;put&#39;, &#39;patch&#39;, &#39;common&#39;]</code>这些请求axios会删除请求头的<code>config.headers[method]</code></li><li>关于请求头的统一额外处理，在这个阶段进行</li><li>关于响应结果的解析，是在这个阶段执行的</li></ul><h2 id="实际请求发送"><a href="#实际请求发送" class="headerlink" title="实际请求发送"></a>实际请求发送</h2><p>适配器解释了为什么axios可以在nodejs和浏览器里面都发送请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /lib/defaults/index,js</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getDefaultAdapter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> adapter;</span><br><span class="line">  <span class="comment">// 如果是浏览器的环境，那么就用的是xhr</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">XMLHttpRequest</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// For browsers use XHR adapter</span></span><br><span class="line">    adapter = <span class="built_in">require</span>(<span class="string">&#x27;../adapters/xhr&#x27;</span>);</span><br><span class="line">  <span class="comment">// 如果是非浏览器的环境（例如nodejs），那么就用的是http的文件</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> process !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(process) === <span class="string">&#x27;[object process]&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// For node use HTTP adapter</span></span><br><span class="line">    adapter = <span class="built_in">require</span>(<span class="string">&#x27;../adapters/http&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> adapter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /lib/adapters/xhr.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> <span class="title function_">xhrAdapter</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> <span class="title function_">dispatchXhrRequest</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">// 拿到请求配置项</span></span><br><span class="line">    <span class="keyword">var</span> requestData = config.<span class="property">data</span>;</span><br><span class="line">    <span class="keyword">var</span> requestHeaders = config.<span class="property">headers</span>;</span><br><span class="line">    <span class="keyword">var</span> responseType = config.<span class="property">responseType</span>;</span><br><span class="line">    <span class="keyword">var</span> onCanceled;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">done</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 如果有取消的，那么走取消请求</span></span><br><span class="line">      <span class="keyword">if</span> (config.<span class="property">cancelToken</span>) &#123;</span><br><span class="line">        config.<span class="property">cancelToken</span>.<span class="title function_">unsubscribe</span>(onCanceled);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (config.<span class="property">signal</span>) &#123;</span><br><span class="line">        config.<span class="property">signal</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;abort&#x27;</span>, onCanceled);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置form请求的请求头</span></span><br><span class="line">    <span class="keyword">if</span> (utils.<span class="title function_">isFormData</span>(requestData) &amp;&amp; utils.<span class="title function_">isStandardBrowserEnv</span>()) &#123;</span><br><span class="line">      <span class="keyword">delete</span> requestHeaders[<span class="string">&#x27;Content-Type&#x27;</span>]; <span class="comment">// Let the browser set it</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建xhr请求</span></span><br><span class="line">    <span class="keyword">var</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有设置授权相关的，那么配置其请求头</span></span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">auth</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> username = config.<span class="property">auth</span>.<span class="property">username</span> || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      <span class="keyword">var</span> password = config.<span class="property">auth</span>.<span class="property">password</span> ? <span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(config.<span class="property">auth</span>.<span class="property">password</span>)) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      requestHeaders.<span class="property">Authorization</span> = <span class="string">&#x27;Basic &#x27;</span> + <span class="title function_">btoa</span>(username + <span class="string">&#x27;:&#x27;</span> + password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fullPath = <span class="title function_">buildFullPath</span>(config.<span class="property">baseURL</span>, config.<span class="property">url</span>);</span><br><span class="line"></span><br><span class="line">    request.<span class="title function_">open</span>(config.<span class="property">method</span>.<span class="title function_">toUpperCase</span>(), <span class="title function_">buildURL</span>(fullPath, config.<span class="property">params</span>, config.<span class="property">paramsSerializer</span>), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the request timeout in MS</span></span><br><span class="line">    request.<span class="property">timeout</span> = config.<span class="property">timeout</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">onloadend</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!request) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Prepare the response</span></span><br><span class="line">      <span class="keyword">var</span> responseHeaders = <span class="string">&#x27;getAllResponseHeaders&#x27;</span> <span class="keyword">in</span> request ? <span class="title function_">parseHeaders</span>(request.<span class="title function_">getAllResponseHeaders</span>()) : <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">var</span> responseData = !responseType || responseType === <span class="string">&#x27;text&#x27;</span> ||  responseType === <span class="string">&#x27;json&#x27;</span> ?</span><br><span class="line">        request.<span class="property">responseText</span> : request.<span class="property">response</span>;</span><br><span class="line">      <span class="keyword">var</span> response = &#123;</span><br><span class="line">        <span class="attr">data</span>: responseData,</span><br><span class="line">        <span class="attr">status</span>: request.<span class="property">status</span>,</span><br><span class="line">        <span class="attr">statusText</span>: request.<span class="property">statusText</span>,</span><br><span class="line">        <span class="attr">headers</span>: responseHeaders,</span><br><span class="line">        <span class="attr">config</span>: config,</span><br><span class="line">        <span class="attr">request</span>: request</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="title function_">settle</span>(<span class="keyword">function</span> <span class="title function_">_resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(value);</span><br><span class="line">        <span class="title function_">done</span>();</span><br><span class="line">      &#125;, <span class="keyword">function</span> <span class="title function_">_reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">        <span class="title function_">done</span>();</span><br><span class="line">      &#125;, response);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Clean up request</span></span><br><span class="line">      request = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;onloadend&#x27;</span> <span class="keyword">in</span> request) &#123;</span><br><span class="line">      <span class="comment">// Use onloadend if available</span></span><br><span class="line">      request.<span class="property">onloadend</span> = onloadend;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Listen for ready state to emulate onloadend</span></span><br><span class="line">      request.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> <span class="title function_">handleLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!request || request.<span class="property">readyState</span> !== <span class="number">4</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The request errored out and we didn&#x27;t get a response, this will be</span></span><br><span class="line">        <span class="comment">// handled by onerror instead</span></span><br><span class="line">        <span class="comment">// With one exception: request that using file: protocol, most browsers</span></span><br><span class="line">        <span class="comment">// will return status as 0 even though it&#x27;s a successful request</span></span><br><span class="line">        <span class="keyword">if</span> (request.<span class="property">status</span> === <span class="number">0</span> &amp;&amp; !(request.<span class="property">responseURL</span> &amp;&amp; request.<span class="property">responseURL</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;file:&#x27;</span>) === <span class="number">0</span>)) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// readystate handler is calling before onerror or ontimeout handlers,</span></span><br><span class="line">        <span class="comment">// so we should call onloadend on the next &#x27;tick&#x27;</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(onloadend);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle browser request cancellation (as opposed to a manual cancellation)</span></span><br><span class="line">    request.<span class="property">onabort</span> = <span class="keyword">function</span> <span class="title function_">handleAbort</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!request) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">AxiosError</span>(<span class="string">&#x27;Request aborted&#x27;</span>, <span class="title class_">AxiosError</span>.<span class="property">ECONNABORTED</span>, config, request));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Clean up request</span></span><br><span class="line">      request = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle low level network errors</span></span><br><span class="line">    request.<span class="property">onerror</span> = <span class="keyword">function</span> <span class="title function_">handleError</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// Real errors are hidden from us by the browser</span></span><br><span class="line">      <span class="comment">// onerror should only fire if it&#x27;s a network error</span></span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">AxiosError</span>(<span class="string">&#x27;Network Error&#x27;</span>, <span class="title class_">AxiosError</span>.<span class="property">ERR_NETWORK</span>, config, request, request));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Clean up request</span></span><br><span class="line">      request = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle timeout</span></span><br><span class="line">    request.<span class="property">ontimeout</span> = <span class="keyword">function</span> <span class="title function_">handleTimeout</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> timeoutErrorMessage = config.<span class="property">timeout</span> ? <span class="string">&#x27;timeout of &#x27;</span> + config.<span class="property">timeout</span> + <span class="string">&#x27;ms exceeded&#x27;</span> : <span class="string">&#x27;timeout exceeded&#x27;</span>;</span><br><span class="line">      <span class="keyword">var</span> transitional = config.<span class="property">transitional</span> || transitionalDefaults;</span><br><span class="line">      <span class="keyword">if</span> (config.<span class="property">timeoutErrorMessage</span>) &#123;</span><br><span class="line">        timeoutErrorMessage = config.<span class="property">timeoutErrorMessage</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">AxiosError</span>(</span><br><span class="line">        timeoutErrorMessage,</span><br><span class="line">        transitional.<span class="property">clarifyTimeoutError</span> ? <span class="title class_">AxiosError</span>.<span class="property">ETIMEDOUT</span> : <span class="title class_">AxiosError</span>.<span class="property">ECONNABORTED</span>,</span><br><span class="line">        config,</span><br><span class="line">        request));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Clean up request</span></span><br><span class="line">      request = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add xsrf header</span></span><br><span class="line">    <span class="comment">// This is only done if running in a standard browser environment.</span></span><br><span class="line">    <span class="comment">// Specifically not if we&#x27;re in a web worker, or react-native.</span></span><br><span class="line">    <span class="keyword">if</span> (utils.<span class="title function_">isStandardBrowserEnv</span>()) &#123;</span><br><span class="line">      <span class="comment">// Add xsrf header</span></span><br><span class="line">      <span class="keyword">var</span> xsrfValue = (config.<span class="property">withCredentials</span> || <span class="title function_">isURLSameOrigin</span>(fullPath)) &amp;&amp; config.<span class="property">xsrfCookieName</span> ?</span><br><span class="line">        cookies.<span class="title function_">read</span>(config.<span class="property">xsrfCookieName</span>) :</span><br><span class="line">        <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (xsrfValue) &#123;</span><br><span class="line">        requestHeaders[config.<span class="property">xsrfHeaderName</span>] = xsrfValue;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add headers to the request</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;setRequestHeader&#x27;</span> <span class="keyword">in</span> request) &#123;</span><br><span class="line">      utils.<span class="title function_">forEach</span>(requestHeaders, <span class="keyword">function</span> <span class="title function_">setRequestHeader</span>(<span class="params">val, key</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> requestData === <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; key.<span class="title function_">toLowerCase</span>() === <span class="string">&#x27;content-type&#x27;</span>) &#123;</span><br><span class="line">          <span class="comment">// Remove Content-Type if data is undefined</span></span><br><span class="line">          <span class="keyword">delete</span> requestHeaders[key];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// Otherwise add header to the request</span></span><br><span class="line">          request.<span class="title function_">setRequestHeader</span>(key, val);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add withCredentials to request if needed</span></span><br><span class="line">    <span class="keyword">if</span> (!utils.<span class="title function_">isUndefined</span>(config.<span class="property">withCredentials</span>)) &#123;</span><br><span class="line">      request.<span class="property">withCredentials</span> = !!config.<span class="property">withCredentials</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add responseType to request if needed</span></span><br><span class="line">    <span class="keyword">if</span> (responseType &amp;&amp; responseType !== <span class="string">&#x27;json&#x27;</span>) &#123;</span><br><span class="line">      request.<span class="property">responseType</span> = config.<span class="property">responseType</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle progress if needed</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> config.<span class="property">onDownloadProgress</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      request.<span class="title function_">addEventListener</span>(<span class="string">&#x27;progress&#x27;</span>, config.<span class="property">onDownloadProgress</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Not all browsers support upload events</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> config.<span class="property">onUploadProgress</span> === <span class="string">&#x27;function&#x27;</span> &amp;&amp; request.<span class="property">upload</span>) &#123;</span><br><span class="line">      request.<span class="property">upload</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;progress&#x27;</span>, config.<span class="property">onUploadProgress</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取消请求相关</span></span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">cancelToken</span> || config.<span class="property">signal</span>) &#123;</span><br><span class="line">      <span class="comment">// Handle cancellation</span></span><br><span class="line">      <span class="comment">// eslint-disable-next-line func-names</span></span><br><span class="line">      onCanceled = <span class="keyword">function</span>(<span class="params">cancel</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!request) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">reject</span>(!cancel || (cancel &amp;&amp; cancel.<span class="property">type</span>) ? <span class="keyword">new</span> <span class="title class_">CanceledError</span>() : cancel);</span><br><span class="line">        request.<span class="title function_">abort</span>();</span><br><span class="line">        request = <span class="literal">null</span>;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      config.<span class="property">cancelToken</span> &amp;&amp; config.<span class="property">cancelToken</span>.<span class="title function_">subscribe</span>(onCanceled);</span><br><span class="line">      <span class="keyword">if</span> (config.<span class="property">signal</span>) &#123;</span><br><span class="line">        config.<span class="property">signal</span>.<span class="property">aborted</span> ? <span class="title function_">onCanceled</span>() : config.<span class="property">signal</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;abort&#x27;</span>, onCanceled);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!requestData) &#123;</span><br><span class="line">      requestData = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> protocol = <span class="title function_">parseProtocol</span>(fullPath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (protocol &amp;&amp; [ <span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;https&#x27;</span>, <span class="string">&#x27;file&#x27;</span> ].<span class="title function_">indexOf</span>(protocol) === -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">AxiosError</span>(<span class="string">&#x27;Unsupported protocol &#x27;</span> + protocol + <span class="string">&#x27;:&#x27;</span>, <span class="title class_">AxiosError</span>.<span class="property">ERR_BAD_REQUEST</span>, config));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Send the request</span></span><br><span class="line">    request.<span class="title function_">send</span>(requestData);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li><code>auth</code>是表示授权相关的请求头，axios会默认加上配置</li><li>如果是form表单请求，axios会删除<code>Content-Type</code>请求头</li><li>在这里也做了取消请求相关的，利用的是xhr的<code>abort</code>函数进行请求取消</li></ul><h2 id="参链"><a href="#参链" class="headerlink" title="参链"></a>参链</h2><ul><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5MjQwMzQyNw==&mid=2650744604&idx=1&sn=51d8d865c9848fd59f7763f5fb9ce789&chksm=88662490bf11ad86061ae76ff71a1177eeddab02c38d046eecd0e1ad25dc16f7591f91e9e3b2&scene=21#wechat_redirect">学习 axios 源码整体架构，打造属于自己的请求库</a></p></li><li><p><a href="http://www.axios-js.com/zh-cn/docs/#axios-spread-callback">axios官网</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;入口&quot;&gt;&lt;a href=&quot;#入口&quot; class=&quot;headerlink&quot; title=&quot;入口&quot;&gt;&lt;/a&gt;入口&lt;/h2&gt;&lt;p&gt;axios的入口是&lt;code&gt;/lib/axios.js&lt;/code&gt;，实际主要的流程在&lt;code&gt;/lib/core/Axios.js&lt;/</summary>
      
    
    
    
    <category term="axios 源码" scheme="https://1578536879.github.io/categories/axios-%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="axios 源码" scheme="https://1578536879.github.io/tags/axios-%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>【js】修饰器（Decorator）</title>
    <link href="https://1578536879.github.io/2024/03/06/%E3%80%90JS%E3%80%91%E4%BF%AE%E9%A5%B0%E5%99%A8/"/>
    <id>https://1578536879.github.io/2024/03/06/%E3%80%90JS%E3%80%91%E4%BF%AE%E9%A5%B0%E5%99%A8/</id>
    <published>2024-03-06T03:42:26.957Z</published>
    <updated>2024-03-13T08:12:26.256Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修饰器"><a href="#修饰器" class="headerlink" title="修饰器"></a>修饰器</h2><p>修饰器是 ES7 的提案，是一种用于修改类、方法或属性的语法，它可以在不修改原始代码的情况下增强其功能。修饰器可以实现横切关注点（cross-cutting concerns）的功能，例如日志记录、性能分析、缓存等。通过将这些功能与原始代码分离，我们可以更好地组织和维护代码，并实现更高的可重用性和可扩展性。</p><p>它的出现可以解决其下两个问题:</p><ul><li><p>不同类之间共享方法</p></li><li><p>编译期对类和方法的行为进行改变</p></li></ul><h2 id="类修饰器"><a href="#类修饰器" class="headerlink" title="类修饰器"></a>类修饰器</h2><p>类修饰器用于修改类的行为和属性。它可以在类定义之前应用，以修改类的构造函数或原型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> originCon = target;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;log&quot;</span>, target);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">newCon</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newCon&quot;</span>, args);</span><br><span class="line">    args[<span class="number">0</span>] = <span class="string">&quot;234&quot;</span>; <span class="comment">//修改传给class的参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">originCon</span>(...args);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newCon;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@log</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">classA</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;classA&quot;</span>, props);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// log class&#123;...&#125;</span></span><br><span class="line"><span class="keyword">const</span> objA = <span class="keyword">new</span> <span class="title function_">classA</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// new Con [&#x27;123&#x27;]</span></span><br><span class="line"><span class="comment">// classA [&#x27;234&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li><p>访问静态属性</p><p>定义了一个修饰器函数 log，然后将这个修饰器应用在 classA，在使用这个修饰器的时候，就会执行修饰器函数 log。</p><p>但是如果需要访问类的静态属性或者方法，会直接报错：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@log</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">classA</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;classA&quot;</span>, props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">staticFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;staticFn&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">classA.<span class="title function_">staticFn</span>();</span><br><span class="line"><span class="comment">//   报错：TypeError: classA.staticFn is not a function</span></span><br></pre></td></tr></table></figure><p>因为 log 返回的新实例，不是原始的类，所以没有 staticFn 方法，导致报错。所以需要在修饰器函数中，将静态属性和方法进行赋值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">target</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> originCon = target;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(target);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">newCon</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newCon&quot;</span>, args);</span><br><span class="line">    args[<span class="number">0</span>] = <span class="string">&quot;234&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">originCon</span>(...args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 辅助函数，用于复制静态方法</span></span><br><span class="line">+  <span class="keyword">function</span> <span class="title function_">copyStatic</span>(<span class="params">originalConstructor, newConstructor</span>) &#123;</span><br><span class="line">+    <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(originalConstructor).<span class="title function_">forEach</span>(<span class="function">(<span class="params">prop</span>) =&gt;</span> &#123;</span><br><span class="line">+      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;prop&quot;</span>, prop);</span><br><span class="line">+      <span class="keyword">if</span> (prop !== <span class="string">&quot;prototype&quot;</span> &amp;&amp; prop !== <span class="string">&quot;length&quot;</span> &amp;&amp; prop !== <span class="string">&quot;name&quot;</span>) &#123;</span><br><span class="line">+        newConstructor[prop] = originalConstructor[prop];</span><br><span class="line">+      &#125;</span><br><span class="line">+    &#125;);</span><br><span class="line">+  &#125;</span><br><span class="line">+  <span class="title function_">copyStatic</span>(originCon, newCon);</span><br><span class="line"><span class="keyword">return</span> newCon;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">classA.<span class="title function_">staticFn</span>();</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="comment">// staticFn</span></span><br></pre></td></tr></table></figure></li><li><p>应用场景</p><ul><li><strong>日志记录</strong>：在类的方法执行前后记录日志信息。</li><li><strong>验证和授权</strong>：对类的方法进行验证和授权操作。</li><li><strong>性能分析</strong>：测量类的方法执行时间，进行性能分析。</li><li><strong>依赖注入</strong>：为类的构造函数注入依赖项。</li></ul></li></ul><h2 id="方法修饰器"><a href="#方法修饰器" class="headerlink" title="方法修饰器"></a>方法修饰器</h2><p>方法修饰器用于修改类的方法行为。它可以在方法定义之前应用，以修改方法的特性和行为。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">target, name, descriptor</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">dir</span>(target);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">dir</span>(name);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">dir</span>(descriptor);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;初始化调用修饰器&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...descriptor,</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;修饰器函数的方法&quot;</span>);</span><br><span class="line">      <span class="keyword">const</span> res = descriptor.<span class="property">value</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">      <span class="keyword">return</span> res * <span class="number">100</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">classA</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;classA&quot;</span>, props);</span><br><span class="line">  &#125;</span><br><span class="line">  @log</span><br><span class="line">  <span class="title function_">addFn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;调用了原始函数&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> objA = <span class="keyword">new</span> <span class="title function_">classA</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> res = objA.<span class="title function_">addFn</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res&quot;</span>, res);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Object &#123; addFn, constructor: class classA &#125;</span></span><br><span class="line"><span class="comment">// addFn</span></span><br><span class="line"><span class="comment">// &#123;value: f addFn(a, b), enumerable: false, configurable: true, writable: true&#125;</span></span><br><span class="line"><span class="comment">// 初始化调用修饰器</span></span><br><span class="line"><span class="comment">// classA 123</span></span><br><span class="line"><span class="comment">// 修饰器函数的方法</span></span><br><span class="line"><span class="comment">// 调用了原始函数</span></span><br><span class="line"><span class="comment">// res 300</span></span><br></pre></td></tr></table></figure><p>方法修饰器函数接收三个参数，分别是<code>target</code>（类的原型或构造函数）、<code>name</code>（方法名）和<code>descriptor</code>（方法的属性描述符）。修改<code>descriptor.value</code>可以替换原有的方法</p><ul><li><p>应用场景</p></li><li><p><strong>日志记录</strong>：在方法执行前后记录日志信息。</p></li><li><p><strong>验证和授权</strong>：对方法进行验证和授权操作。</p></li><li><p><strong>性能分析</strong>：测量方法执行时间，进行性能分析。</p></li><li><p><strong>缓存</strong>：为方法添加缓存功能，提高性能。</p></li></ul><h2 id="属性修饰器"><a href="#属性修饰器" class="headerlink" title="属性修饰器"></a>属性修饰器</h2><p>用于修改类的属性行为。它可以在属性定义之前应用，以修改属性的特性和行为</p><p>虽然有很多博客说可以直接用类属性修饰器，但是个人实际使用了一下，并未成功</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">protoDec</span>(<span class="params">initVal</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">target, name</span>) &#123;</span><br><span class="line">    target[name] = initVal;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">dir</span>(target);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">    <span class="keyword">let</span> val = target[name];</span><br><span class="line">    <span class="keyword">const</span> getter = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;获取值：&quot;</span>, val);</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> setter = <span class="keyword">function</span> (<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> newVal === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;设置值：&quot;</span>, newVal);</span><br><span class="line">        val = newVal + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;设置值必须为数字&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, name, &#123;</span><br><span class="line">      <span class="attr">get</span>: getter,</span><br><span class="line">      <span class="attr">set</span>: setter,</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">classA</span> &#123;</span><br><span class="line">  @<span class="title function_">protoDec</span>(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">  num;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;classA&quot;</span>, props);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> objA = <span class="keyword">new</span> <span class="title function_">classA</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;objA&quot;</span>, objA.<span class="property">num</span>);</span><br><span class="line">objA.<span class="property">num</span> = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;objA&quot;</span>, objA.<span class="property">num</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前输出：</span></span><br><span class="line"><span class="comment">// Object &#123; num: &quot;0&quot; &#125;</span></span><br><span class="line"><span class="comment">// num</span></span><br><span class="line"><span class="comment">// classA 123</span></span><br><span class="line"><span class="comment">// objA undefined</span></span><br><span class="line"><span class="comment">// objA 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 预期输出：</span></span><br><span class="line"><span class="comment">// Object &#123; num: &quot;0&quot; &#125;</span></span><br><span class="line"><span class="comment">// num</span></span><br><span class="line"><span class="comment">// classA 123</span></span><br><span class="line"><span class="comment">// 获取值：0</span></span><br><span class="line"><span class="comment">// objA &quot;0&quot;</span></span><br><span class="line"><span class="comment">// 设置值：100</span></span><br><span class="line"><span class="comment">// objA 101</span></span><br></pre></td></tr></table></figure><h2 id="参数修饰器"><a href="#参数修饰器" class="headerlink" title="参数修饰器"></a>参数修饰器</h2><p>参数修饰器用于修改方法的参数行为。它可以在方法参数声明之前应用，以修改参数的特性和行为</p><p>参数装饰器只能用来<strong>监视</strong>一个方法的参数是否被传入，无法修改函数执行结果</p><p>参数装饰器表达式会在运行时当作函数被调用，传入下列 3 个参数：</p><ul><li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</li><li>成员的名字。</li><li>参数在函数参数列表中的索引。</li></ul><p>参数装饰器的返回值会被<strong>忽略</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">paramsDec</span>(<span class="params">target, name, index</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">dir</span>(target)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">dir</span>(name)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">dir</span>(index)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">classA</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">fn</span>(<span class="params">@paramsDec num1, @paramsDec num2</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行函数&quot;</span>)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;classA&quot;</span>, props);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> objA = <span class="keyword">new</span> <span class="title function_">classA</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">objA.<span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="title class_">Object</span> &#123;</span><br><span class="line">    <span class="attr">constructor</span>: <span class="keyword">class</span> <span class="title class_">classA</span>,</span><br><span class="line">    <span class="attr">fn</span>: ƒ <span class="title function_">fn</span>(num1, num2)</span><br><span class="line">&#125;</span><br><span class="line">fn</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="title class_">Object</span> &#123;</span><br><span class="line">    <span class="attr">constructor</span>: <span class="keyword">class</span> <span class="title class_">classA</span>,</span><br><span class="line">    <span class="attr">fn</span>: ƒ <span class="title function_">fn</span>(num1, num2)</span><br><span class="line">&#125;</span><br><span class="line">fn</span><br><span class="line"><span class="number">0</span></span><br><span class="line">classA <span class="number">123</span></span><br><span class="line">执行函数</span><br></pre></td></tr></table></figure><h2 id="装饰器执行顺序"><a href="#装饰器执行顺序" class="headerlink" title="装饰器执行顺序"></a>装饰器执行顺序</h2><p>当多个装饰器应用在一个声明上时会进行如下步骤的操作：</p><ul><li>由上至下依次对装饰器表达式求值。</li><li>求值的结果会被当作函数，由下至上依次调用。</li></ul><h2 id="参链"><a href="#参链" class="headerlink" title="参链"></a>参链</h2><p><a href="https://www.coding-time.cn/js/advance/%E8%A3%85%E9%A5%B0%E5%99%A8.html#_8-%E5%B8%B8%E7%94%A8%E4%BF%AE%E9%A5%B0%E5%99%A8%E5%BA%93%E5%92%8C%E5%B7%A5%E5%85%B7">JavaScript修饰器：简化代码，增强功能</a></p><p><a href="https://www.tslang.cn/docs/handbook/decorators.html">装饰器</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;修饰器&quot;&gt;&lt;a href=&quot;#修饰器&quot; class=&quot;headerlink&quot; title=&quot;修饰器&quot;&gt;&lt;/a&gt;修饰器&lt;/h2&gt;&lt;p&gt;修饰器是 ES7 的提案，是一种用于修改类、方法或属性的语法，它可以在不修改原始代码的情况下增强其功能。修饰器可以实现横切关注点（c</summary>
      
    
    
    
    <category term="JS" scheme="https://1578536879.github.io/categories/JS/"/>
    
    
    <category term="js" scheme="https://1578536879.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>是否外部在调试</title>
    <link href="https://1578536879.github.io/2024/02/16/%E3%80%90%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%E3%80%91%E6%98%AF%E5%90%A6%E5%A4%96%E9%83%A8%E5%9C%A8%E8%B0%83%E8%AF%95/"/>
    <id>https://1578536879.github.io/2024/02/16/%E3%80%90%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%E3%80%91%E6%98%AF%E5%90%A6%E5%A4%96%E9%83%A8%E5%9C%A8%E8%B0%83%E8%AF%95/</id>
    <published>2024-02-16T06:37:19.365Z</published>
    <updated>2024-02-16T06:55:33.805Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>键盘</p><p>用F12键去判断是否有打开</p></li><li><p>浏览器内外宽度差</p></li><li><p>开发者人员工具变量是否为true</p></li><li><p>console</p></li><li><p>代码运行时间差</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">debugger</span></span><br><span class="line"><span class="keyword">const</span> time2 = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">const</span> space = time2 - time;</span><br></pre></td></tr></table></figure></li><li><p>toString</p><p>  当鼠标放在函数名上时，会调用函数的toString方法</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isDebug</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">isDebug.<span class="title function_">toString</span>() = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;debuging&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">isDebug</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>caller</p><p>  返回函数调用方，监测栈的层数</p></li><li><p>监测非浏览器的环境</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;键盘&lt;/p&gt;
&lt;p&gt;用F12键去判断是否有打开&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浏览器内外宽度差&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;开发者人员工具变量是否为true&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;console&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代码</summary>
      
    
    
    
    <category term="业务场景" scheme="https://1578536879.github.io/categories/%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF/"/>
    
    
    <category term="业务场景" scheme="https://1578536879.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF/"/>
    
  </entry>
  
  <entry>
    <title>SSR和CSR</title>
    <link href="https://1578536879.github.io/2024/02/16/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91SSR%E5%92%8CCSR/"/>
    <id>https://1578536879.github.io/2024/02/16/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91SSR%E5%92%8CCSR/</id>
    <published>2024-02-16T06:28:53.525Z</published>
    <updated>2024-02-16T06:36:13.575Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h2><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><ul><li><p>浏览器向网站发起请求</p></li><li><p>服务器接收到请求后，先查询数据库中的动态数据(如用户数据)，然后将数据通过模板引擎编译为HTML字符串，然后再返回给浏览器</p></li><li><p>浏览器接收到HTML文档后，将其渲染为可视的UI</p></li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>有利于SEO，首屏渲染快</p><h2 id="CSR"><a href="#CSR" class="headerlink" title="CSR"></a>CSR</h2><h3 id="工作流程-1"><a href="#工作流程-1" class="headerlink" title="工作流程"></a>工作流程</h3><ul><li><p>浏览器发起请求</p></li><li><p>服务器接收到请求后，立即返回静态的HTML部分，这部分内容通常是与用户无关的静态数据</p></li><li><p>浏览器解析html文档，待js脚本加载完成后发起异步请求，获取动态数据</p></li><li><p>服务器接收到异步请求后，查询数据库并将动态数据返回给网络浏览器</p></li><li><p>浏览器接收到动态数据后，使用js将数据编译为html字符串并渲染为可视的UI</p></li></ul><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><p>更好支持离线场景和前后端分离等</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SSR&quot;&gt;&lt;a href=&quot;#SSR&quot; class=&quot;headerlink&quot; title=&quot;SSR&quot;&gt;&lt;/a&gt;SSR&lt;/h2&gt;&lt;h3 id=&quot;工作流程&quot;&gt;&lt;a href=&quot;#工作流程&quot; class=&quot;headerlink&quot; title=&quot;工作流程&quot;&gt;&lt;/a&gt;工作流</summary>
      
    
    
    
    <category term="前端" scheme="https://1578536879.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://1578536879.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>性能指标</title>
    <link href="https://1578536879.github.io/2024/02/06/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/"/>
    <id>https://1578536879.github.io/2024/02/06/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/</id>
    <published>2024-02-06T06:54:33.517Z</published>
    <updated>2024-02-06T07:33:57.377Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基于用户的性能指标"><a href="#基于用户的性能指标" class="headerlink" title="基于用户的性能指标"></a>基于用户的性能指标</h2><h3 id="FCP：白屏时间"><a href="#FCP：白屏时间" class="headerlink" title="FCP：白屏时间"></a>FCP：白屏时间</h3><h1></h1><table><thead><tr><th>FCP 时长</th><th>颜色编码</th><th>FCP 分数(HTTP 存档百分位数)</th></tr></thead><tbody><tr><td>0-2s</td><td><font color=green>快速</font></td><td>75-100</td></tr><tr><td>2-4s</td><td><font color=yellow>中等</font></td><td>50-74</td></tr><tr><td>&gt;4s</td><td><font color=red>慢</font></td><td>0-49</td></tr></tbody></table><h3 id="LCP：主要内容可见时间"><a href="#LCP：主要内容可见时间" class="headerlink" title="LCP：主要内容可见时间"></a>LCP：主要内容可见时间</h3><p>(可视区域最大-资源较大 元素到屏幕上的间隔时间)</p><h1></h1><p>并不是只初始加载页面的，而是指页面元素变化的时候</p><blockquote><p>LCP 考虑的元素</p></blockquote><ul><li><code>&lt;img&gt;</code>元素</li><li><code>&lt;image&gt;</code>元素的<code>&lt;svg&gt;</code></li><li><code>&lt;video&gt;</code></li><li>通过<code>[url()](https://developer.mozilla.org/en-US/docs/Web/CSS/url())</code>函数加载背景图片的元素</li><li>包含文本节点或者其他内联文字元素子级的块级元素</li></ul><table><thead><tr><th>LCP 时长</th><th>颜色编码</th></tr></thead><tbody><tr><td>0-2.5s</td><td><font color=green>快速</font></td></tr><tr><td>2.5-4s</td><td><font color=yellow>中等</font></td></tr><tr><td>&gt;4s</td><td><font color=red>慢</font></td></tr></tbody></table><h3 id="FID：首次输入延迟"><a href="#FID：首次输入延迟" class="headerlink" title="FID：首次输入延迟"></a>FID：首次输入延迟</h3><p>第一次与页面交互(点击按钮链接等)到浏览器实际能够响应这次交互的时间</p><h1></h1><blockquote><p>输入延迟是因为浏览器的主线程处于繁忙状态(比如忙于解析和执行程序加载的大量计算的 js)，导致无法及时响应用户。</p></blockquote><blockquote><p>第一次的输入延迟通常发生在 FCP 和 TTI 之间，因为页面虽然已经呈现了，但是还无法可靠交互</p></blockquote><table><thead><tr><th>FID 时长</th><th>颜色编码</th></tr></thead><tbody><tr><td>0-0.1s</td><td><font color=green>快速</font></td></tr><tr><td>0.1-0.3s</td><td><font color=yellow>中等</font></td></tr><tr><td>&gt;0.3s</td><td><font color=red>慢</font></td></tr></tbody></table><h3 id="TTI：第一次完全达到可交互状态"><a href="#TTI：第一次完全达到可交互状态" class="headerlink" title="TTI：第一次完全达到可交互状态"></a>TTI：第一次完全达到可交互状态</h3><p>浏览器可以持续性的响应用户的交互事件。完全达到可交互的状态时间点是在最后一个长文物(50ms 以上才能完成的任务)完成的事件，并且在随后的 5s 内网络和主线程是空闲的</p><h1></h1><table><thead><tr><th>TTI 时长</th><th>颜色编码</th></tr></thead><tbody><tr><td>0-3.8s</td><td><font color=green>快速</font></td></tr><tr><td>3.8-7.3s</td><td><font color=yellow>中等</font></td></tr><tr><td>&gt;7.3s</td><td><font color=red>慢</font></td></tr></tbody></table><h3 id="TBT：总阻塞时间"><a href="#TBT：总阻塞时间" class="headerlink" title="TBT：总阻塞时间"></a>TBT：总阻塞时间</h3><p>即 FCP 和 TTI 之间的间隔时长，在改时间范围内，主线程被阻塞足够长的时间以防止用户的输入事件。</p><h1></h1><blockquote><p>长任务，执行时长超过了 50ms</p></blockquote><blockquote><p>页面总阻塞时间&#x3D;FCP 和 TTI 之间发生的每个长任务的阻塞时间总和</p></blockquote><blockquote><p>长任务的阻塞时间&#x3D;长任务的实际执行时长-50ms</p></blockquote><table><thead><tr><th>TBT 时长</th><th>颜色编码</th></tr></thead><tbody><tr><td>0-0.3s</td><td><font color=green>快速</font></td></tr><tr><td>0.3-0.6s</td><td><font color=yellow>中等</font></td></tr><tr><td>&gt;0.6s</td><td><font color=red>慢</font></td></tr></tbody></table><h3 id="CLS：累计布局偏移"><a href="#CLS：累计布局偏移" class="headerlink" title="CLS：累计布局偏移"></a>CLS：累计布局偏移</h3><p>在整个生命周期中发生的每个意外的布局移位(即在不是预计的位置偏移或者样式错乱)的所有单独布局。</p><p>保证页面的视觉稳定性</p><h1></h1><blockquote><p>元素的意外移动通常是由于异步加载资源或者 DOM 元素动态添加到现有内容商法的页面而发生的</p></blockquote><blockquote><p>可能是由于尺寸未知的多媒体资源，字体变化或者动态调整自身大小的第三方广告、小部件</p></blockquote><table><thead><tr><th>TBT 时长</th><th>颜色编码</th></tr></thead><tbody><tr><td>0-0.1ms</td><td><font color=green>快速</font></td></tr><tr><td>0.1-0.25ms</td><td><font color=yellow>中等</font></td></tr><tr><td>&gt;0.25ms</td><td><font color=red>慢</font></td></tr></tbody></table><h3 id="速度指数-SI-：页面可视区域中内容的填充速度"><a href="#速度指数-SI-：页面可视区域中内容的填充速度" class="headerlink" title="速度指数(SI)：页面可视区域中内容的填充速度"></a>速度指数(SI)：页面可视区域中内容的填充速度</h3><p>计算页面可见区域内容显示的平均时间来衡量</p><h1></h1><blockquote><p>捕获浏览器加载页面过程的视频，然后对每 100ms 间隔的页面截图计算页面内容的填充百分比</p></blockquote><table><thead><tr><th>TBT 时长</th><th>颜色编码</th></tr></thead><tbody><tr><td>0-4.3s</td><td><font color=green>快速</font></td></tr><tr><td>4.3-5.8ms</td><td><font color=yellow>中等</font></td></tr><tr><td>&gt;5.8ms</td><td><font color=red>慢</font></td></tr></tbody></table><h2 id="RAIL-性能模型"><a href="#RAIL-性能模型" class="headerlink" title="RAIL 性能模型"></a><a href="https://zhuanlan.zhihu.com/p/422402515">RAIL 性能模型</a></h2><blockquote><p>RAIL</p></blockquote><ul><li>R(响应)：应该尽可能快速的响应用户，应该在 100ms 内相应用户</li><li>A(Animation)：在展示动画的时候，每一帧应该以 16ms 进行渲染，这样可以保持动画的一致性，避免卡顿</li><li>I(空闲)：当使用 JS 主线程的时候，应该把任务划分到执行时间小于 50ms 的片段中，这样可以释放线程以进行用户交互</li><li>L(加载)：应该在小于 1s 的时间内完成加载网页，且可以进行用户交互</li></ul><blockquote><p>感知延迟的时间窗口</p></blockquote><table><thead><tr><th>延迟时长</th><th>用户反映</th></tr></thead><tbody><tr><td>0-16ms</td><td>人眼可以感知每秒 60 帧的动画，即每帧 16ms，除了浏览器将一帧画面绘制到屏幕上的时间，网站应用大约需要 10ms 生成一帧</td></tr><tr><td>0-100ms</td><td>在该范围内相应用户的操作，属于流畅的体验</td></tr><tr><td>100-1000ms</td><td>能够感知明显延迟</td></tr><tr><td>&gt;1s</td><td>用户注意力将离开对执行任务的关注</td></tr><tr><td>&gt;10s</td><td>感到过于长以至于失望，可能回放弃任务</td></tr></tbody></table><h2 id="Web-Vitals"><a href="#Web-Vitals" class="headerlink" title="Web Vitals"></a>Web Vitals</h2><h3 id="Core-Web-Vitals"><a href="#Core-Web-Vitals" class="headerlink" title="Core Web Vitals"></a>Core Web Vitals</h3><p>应用于所有 web 页面的 Web Vitals 子集，为其最重要的核心</p><p>主要指标</p><ul><li>LCP：加载性能</li><li>FID：交互性</li><li>CLS：视觉稳定性</li></ul><h2 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h2><ul><li>LightHouse</li><li><a href="https://www.webpagetest.org/">WebPageTest</a></li><li>DevTools</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基于用户的性能指标&quot;&gt;&lt;a href=&quot;#基于用户的性能指标&quot; class=&quot;headerlink&quot; title=&quot;基于用户的性能指标&quot;&gt;&lt;/a&gt;基于用户的性能指标&lt;/h2&gt;&lt;h3 id=&quot;FCP：白屏时间&quot;&gt;&lt;a href=&quot;#FCP：白屏时间&quot; class=&quot;</summary>
      
    
    
    
    <category term="额外内容" scheme="https://1578536879.github.io/categories/%E9%A2%9D%E5%A4%96%E5%86%85%E5%AE%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>从地址栏到页面展示的流程</title>
    <link href="https://1578536879.github.io/2024/02/06/%E8%BE%93%E5%85%A5url%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA/"/>
    <id>https://1578536879.github.io/2024/02/06/%E8%BE%93%E5%85%A5url%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA/</id>
    <published>2024-02-06T06:54:33.515Z</published>
    <updated>2024-02-16T06:23:53.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浏览器进程"><a href="#浏览器进程" class="headerlink" title="浏览器进程"></a>浏览器进程</h2><h1></h1><blockquote><p>1、<font color=red>UI 线程</font>会判断输入的内容是搜索关键词还是 URL</p></blockquote><ul><li>如果是搜索关键词，跳转至默认搜索引擎对应都搜索 URL，</li><li>如果输入的内容是 URL，则开始请求 URL。</li></ul><blockquote><p>2、UI 线程将关键词搜索对应的 URL 或输入的 URL 交给<font color=red>网络线程</font></p></blockquote><ul><li>UI 线程使 Tab 前的图标展示为加载中状态</li></ul><blockquote><p>3、网络线程发出请求，获取请求返回内容</p></blockquote><ul><li>先查询是否有url是ip还是域名，如果是域名，先去进行查看是否有对应的ip解析缓存，没有就进行DNS查询</li><li>建立三次握手（AKC，seq这些）</li><li>发送请求</li><li>服务器返回请求</li><li>如果收到服务器的 301 重定向响应，它就会告知 UI 线程进行重定向然后它会再次发起一个新的网络请求。</li><li>根据响应头中的 Content-Type 字段来确定响应主体的媒体类型</li><li>如果媒体类型是一个<font color=red>HTML</font>文件，则将响应数据交给<font color=red>渲染进程</font></li><li>如果是<font color=red>zip </font>文件或者<font color=red>其它</font>文件，会把相关数据传输给<font color=red>存储线程</font>，下载管理器。</li><li>浏览器会进行 <font color=red>Safe Browsing </font>安全检查，如果域名或者请求内容匹配到已知的恶意站点，网络线程会展示一个<font color=red>警告页</font>。除此之外，网络线程还会做<font color=red> CORB</font>（Cross Origin Read Blocking）检查来确定那些敏感的跨站数据不会被发送至渲染进程</li><li>四次挥手</li></ul><blockquote><p>4、<font color=red>网络线程</font>确信浏览器可以导航到请求网页，网络线程会通知<font color=red> UI 线程</font>数据已经准备好，UI 线程会查找到一个 <font color=red>渲染进程</font>进行网页的渲染。</p></blockquote><ul><li>浏览器为了对查找渲染进程这一步骤进行优化，考虑到网络请求获取响应需要时间，所以在第二步开始，浏览器已经预先查找和启动了一个渲染进程，如果中间步骤一切顺利，当 network thread 接收到数据时，渲染进程已经准备好了，但是如果遇到重定向，这个准备好的渲染进程也许就不可用了，这个时候会重新启动一个渲染进程。</li></ul><blockquote><p>5、浏览器进程 会向 渲染进程 发送 IPC 消息(进程通信的一种方式)来确认导航</p></blockquote><ul><li>浏览器进程将准备好的数据发送给渲染进程，渲染进程接收到数据之后，又发送 IPC 消息给浏览器进程，告诉浏览器进程导航已经提交了，页面开始加载。</li></ul><blockquote><p>6、当导航提交完成后，渲染进程开始加载资源及渲染页面，当页面渲染完成后（页面及内部的 iframe 都触发了 onload 事件），会向浏览器进程发送 IPC 消息，告知浏览器进程，这个时候 UI thread 会停止展示 tab 中的加载中图标。</p></blockquote><h2 id="渲染进程-关键渲染路径-CRP"><a href="#渲染进程-关键渲染路径-CRP" class="headerlink" title="渲染进程-关键渲染路径(CRP)"></a>渲染进程-关键渲染路径(CRP)</h2><h1></h1><blockquote><p>当渲染进程接受到导航的确认信息后，开始接受来自浏览器进程的数据，<font color=red>主线程</font>会解析数据转化为 DOM 对象。</p></blockquote><ul><li>解析到图片、CSS、JavaScript 脚本等<font color=red>资源</font>，这些资源是需要从网络或者缓存中获取的，主线程在构建 DOM 过程中如果遇到了这些资源，逐一发起<font color=red>请求</font>去获取，而为了提升效率，浏览器也会运行<font color=red>预加载扫描</font>（preload scanner）程序。“预加载扫描器”是<font color=red>并发</font>运行的，如果如果 HTML 中存在 img、link 等标签，预加载扫描程序会把这些请求传递给<font color=red>浏览器进程的网络线程</font>进行资源下载。</li><li>找到一个<font color=red><code>&lt; script &gt;</code>标签</font>时，它会<font color=red>暂停</font> HTML 文档的解析，并且必须加载、解析和执行 JavaScript 代码。因为<font color=red> JS 可以使用<code>document.write()</code>改变整个 DOM 结构之类的东西来改变文档的形状</font>（ HTML 规范中的解析模型概述有一个很好的图表）。这就是 HTML 解析器必须等待 JavaScript 运行才能继续解析 HTML 文档的原因。<a href="https://mathiasbynens.be/notes/shapes-ics">V8 关于 JS 执行中的事情</a></li><li>因此如果 js 没有<code>document.write()</code>，可以添加 async 或 defer 属性到<code>&lt; script &gt;</code>标签。然后浏览器异步加载和运行 JavaScript 代码，这样不会阻止解析 DOM</li></ul><blockquote><p><font color=red>主线程</font>依据 Css 选择器以及浏览器默认样式来计算每个元素应该具备的具体样式</p></blockquote><blockquote><p><font color=red>主线程</font>会遍历 DOM 及相关元素的计算样式，构建出包含每个元素的页面坐标信息及盒子模型大小的布局树（Render Tree），遍历过程中，会<font color=red>跳过</font>隐藏的元素（display: none），另外，<font color=red>伪元素</font>虽然在 DOM 树上不可见，但是在<font color=red>布局树</font>上是可见的。</p></blockquote><blockquote><p>遍历布局树（layout tree），生成一系列的绘画记录（paint records）。绘画记录可以看做是记录各元素绘制先后顺序的笔记-绘画顺序表。</p></blockquote><blockquote><p><font color=red>主线程</font>需要遍历渲染树来创建一棵<font color=red>层次树</font>（Layer Tree），对于添加了<font color=red> will-change</font> CSS 属性的元素，会被看做<font color=red>单独</font>的一层，没有 will-change CSS 属性的元素，浏览器会根据情况决定是否要把该元素放在单独的层。</p></blockquote><ul><li>当页面的层超过一定的数量后，层的合成操作要比在每个帧中光栅化页面的一小部分还要慢，因此衡量你应用的渲染性能是十分重要的一件事情。</li></ul><blockquote><p>主线程会把这些信息通知给<font color=red>合成器</font>线程，合成器线程开始对层次数的每一层进行光栅化。 <br/>为了优化显示体验，合成线程可以给不同的光栅线程赋予不同的优先级，将那些在视口中的或者视口附近的层先被光栅化。</p></blockquote><ul><li><p>有的层的可以达到整个页面的大小，合成器需要将它们切分为一块又一块的小图块（tiles）</p></li><li><p>合成器将这些小图块分别进行发送给一系列<font color=red>光栅</font>线程（raster threads）进行光栅化</p></li><li><p>结束后光栅线程会将每个图块的光栅结果存在 GPU Process 的内存中</p></li></ul><blockquote><p>合成线程会收集图块上面叫做绘画四边形（draw quads）的信息来构建一个合成帧（compositor frame）。</p></blockquote><ul><li><p>绘画四边形：包含图块在内存的位置以及图层合成后图块在页面的位置之类的信息。</p></li><li><p>合成帧：代表页面一个帧的内容的绘制四边形集合。</p></li></ul><blockquote><p><font color=red>合成线程</font>就会通过 IPC 向<font color=red>浏览器进程</font>（browser process）提交（commit）一个<font color=red>渲染帧</font>。</p></blockquote><ul><li><p>这个时候可能有另外一个合成帧被浏览器进程的 UI 线程（UI thread）提交以改变浏览器的 UI。这些合成帧都会被发送给 GPU 从而展示在屏幕上。</p></li><li><p>如果合成线程收到页面滚动的事件，合成线程会构建另外一个组合帧发送给 GPU 来更新页面。</p></li></ul><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><blockquote><p>当点击或者输入的时候，首先接受到事件的是<font color=red>浏览器进程</font></p></blockquote><blockquote><p>浏览器进程不处理，将事件丢给<font color=red>渲染进程</font></p></blockquote><blockquote><p>渲染进程依据事件发生的<font color=red>坐标</font>，找到<font color=red>目标对象</font>，运行附加的事件侦听器来适当地处理事件。</p></blockquote><blockquote><p><font color=red>合成器线程</font>会标记页面中绑定有事件处理器的区域为<font color=red>非快速滚动区域</font>(non-fast scrollable region)</p></blockquote><ul><li><p>当合成器线程向主线程发送输入事件时，首先要运行的是命中测试以找到事件目标。命中测试使用渲染过程中生成的绘制记录数据来找出发生事件的点坐标下方的内容。</p></li><li><p>如果事件发生在这些存在标注的区域，合成器线程会把事件信息发送给主线程，等待主线程进行事件处理</p></li><li><p>如果事件不是发生在这些区域，合成器线程则会直接合成新的帧而不用等到主线程的响应。</p></li><li><p>所以，在进行事件监听的时候，尤其是事件捕获或者对整个文档进行事件监听的时候需要考虑一下，因为整个页面都被标记为非快速滚动区域。这意味着即使不关心来自页面某些部分的输入，合成器线程也必须与主线程通信并在每次输入事件进入时等待它。因此，合成器的平滑滚动能力被打败了。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浏览器在主线程中侦听事件，但合成器也可以继续合成新帧。</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">addEventListener</span>(enent, func, &#123; <span class="attr">passive</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/qq_41499782/article/details/120039980">合成器线程详解&#x2705;</a></p><p><a href="https://blog.csdn.net/qq_35546787/article/details/107788179?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.topblog&spm=1001.2101.3001.4242.1&utm_relevant_index=3">一文搞懂浏览器的工作原理&#x270B;</a></p><p> <a href="https://blog.csdn.net/qq_41499782/article/details/120035602">chrome 渲染器进程的内部工作原理&#x270B;</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;浏览器进程&quot;&gt;&lt;a href=&quot;#浏览器进程&quot; class=&quot;headerlink&quot; title=&quot;浏览器进程&quot;&gt;&lt;/a&gt;浏览器进程&lt;/h2&gt;&lt;h1&gt;&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;1、&lt;font color=red&gt;UI 线程&lt;/font&gt;会判断输</summary>
      
    
    
    
    <category term="浏览器" scheme="https://1578536879.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
    <category term="浏览器" scheme="https://1578536879.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>手写题</title>
    <link href="https://1578536879.github.io/2024/02/06/%E6%89%8B%E5%86%99%E9%A2%98/"/>
    <id>https://1578536879.github.io/2024/02/06/%E6%89%8B%E5%86%99%E9%A2%98/</id>
    <published>2024-02-06T06:54:33.513Z</published>
    <updated>2024-02-06T07:34:12.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="将一维数组转化为-tree"><a href="#将一维数组转化为-tree" class="headerlink" title="将一维数组转化为 tree"></a>将一维数组转化为 tree</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&quot;01&quot;</span>, <span class="attr">parentId</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&quot;节点1&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&quot;011&quot;</span>, <span class="attr">parentId</span>: <span class="string">&quot;01&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;节点1-1&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&quot;0111&quot;</span>, <span class="attr">parentId</span>: <span class="string">&quot;011&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;节点1-1-1&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&quot;02&quot;</span>, <span class="attr">parentId</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&quot;节点2&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&quot;022&quot;</span>, <span class="attr">parentId</span>: <span class="string">&quot;02&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;节点2-2&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&quot;023&quot;</span>, <span class="attr">parentId</span>: <span class="string">&quot;02&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;节点2-3&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&quot;0222&quot;</span>, <span class="attr">parentId</span>: <span class="string">&quot;022&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;节点2-2-2&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&quot;03&quot;</span>, <span class="attr">parentId</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&quot;节点3&quot;</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li><p>解法 1：</p><p>使用循环+递归的形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findParent</span>(<span class="params">tree, child</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> cur <span class="keyword">of</span> tree) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      cur.<span class="property">id</span> !== child.<span class="property">parentId</span> &amp;&amp;</span><br><span class="line">      cur.<span class="property">children</span> &amp;&amp;</span><br><span class="line">      cur.<span class="property">children</span>.<span class="property">length</span> !== <span class="number">0</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      cur = <span class="title function_">findParent</span>(cur.<span class="property">children</span>, child);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur.<span class="property">id</span> === child.<span class="property">parentId</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (cur.<span class="property">children</span>) &#123;</span><br><span class="line">        cur.<span class="property">children</span>.<span class="title function_">push</span>(child);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cur.<span class="property">children</span> = [child];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> tree;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arrToTree</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> tree = [];</span><br><span class="line">  <span class="keyword">const</span> len = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i].<span class="property">parentId</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      tree.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      tree = <span class="title function_">findParent</span>(tree, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解法 2：</p><p>使用 map 映射和 js 当引用类型赋值时，是<strong>拷贝的地址</strong>的特性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">con</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">const</span> map = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">res, v</span>) =&gt;</span> ((res[v.<span class="property">id</span>] = v), res), &#123;&#125;);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">parentId</span> <span class="keyword">in</span> map) &#123;</span><br><span class="line">      <span class="keyword">const</span> parent = map[item.<span class="property">parentId</span>];</span><br><span class="line">      parent.<span class="property">children</span> = parent.<span class="property">children</span> || [];</span><br><span class="line">      parent.<span class="property">children</span>.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="object-键扁平化"><a href="#object-键扁平化" class="headerlink" title="object 键扁平化"></a>object 键扁平化</h2><p>原始数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;d&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;d&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;e&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;h&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;i&quot;</span><span class="punctuation">:</span> <span class="string">&quot;i&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>转换数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;a.b.c&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;a.d&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;d&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;e.f.g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;e.f.f.h.i&quot;</span><span class="punctuation">:</span> <span class="string">&quot;i&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;e.g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g2&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>解法 1<br>采用 dfs 思维做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dfs</span>(<span class="params">tree, preKey = <span class="string">&quot;&quot;</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> tree !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">key</span>: preKey,</span><br><span class="line">      <span class="attr">value</span>: tree,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(tree);</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> keys) &#123;</span><br><span class="line">    <span class="keyword">let</span> val = <span class="title function_">dfs</span>(tree[key], preKey + <span class="string">&quot;.&quot;</span> + key);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(val)) &#123;</span><br><span class="line">      res = res.<span class="title function_">concat</span>(val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ObjectKeyToStr</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj);</span><br><span class="line">  <span class="keyword">let</span> res = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> keys) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="title function_">dfs</span>(obj[key], key);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(data)) &#123;</span><br><span class="line">      data.<span class="title function_">forEach</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">        res[ele.<span class="property">key</span>] = ele.<span class="property">value</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res[data.<span class="property">key</span>] = data.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解法 2</p><p>采用类bfs的思路</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getKeys</span>(<span class="params">tree</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(tree);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bfs</span>(<span class="params">tree</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> stack = [];</span><br><span class="line">  <span class="keyword">let</span> res = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> item = tree;</span><br><span class="line">  <span class="keyword">while</span> (item) &#123;</span><br><span class="line">    <span class="title function_">getKeys</span>(item).<span class="title function_">forEach</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> currdata = item[ele];</span><br><span class="line">      <span class="comment">// 因为额外加了_key属性，因此需要跳过这个属性</span></span><br><span class="line">      <span class="keyword">if</span> (ele !== <span class="string">&quot;_key&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(currdata) === <span class="string">&quot;[object Object]&quot;</span>) &#123;</span><br><span class="line">          stack.<span class="title function_">unshift</span>(&#123;</span><br><span class="line">            ...currdata,</span><br><span class="line">            <span class="attr">_key</span>: item.<span class="property">_key</span> ? item.<span class="property">_key</span> + <span class="string">&quot;.&quot;</span> + ele : ele,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> key = item.<span class="property">_key</span> ? item.<span class="property">_key</span> + <span class="string">&quot;.&quot;</span> + ele : ele;</span><br><span class="line">          <span class="keyword">delete</span> currdata.<span class="property">_key</span>;</span><br><span class="line">          res[key] = currdata;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    item = stack.<span class="title function_">shift</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;将一维数组转化为-tree&quot;&gt;&lt;a href=&quot;#将一维数组转化为-tree&quot; class=&quot;headerlink&quot; title=&quot;将一维数组转化为 tree&quot;&gt;&lt;/a&gt;将一维数组转化为 tree&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;</summary>
      
    
    
    
    <category term="js" scheme="https://1578536879.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>大数据渲染</title>
    <link href="https://1578536879.github.io/2024/02/06/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B8%B2%E6%9F%93/"/>
    <id>https://1578536879.github.io/2024/02/06/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B8%B2%E6%9F%93/</id>
    <published>2024-02-06T06:54:33.511Z</published>
    <updated>2024-02-06T07:33:41.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大数据渲染"><a href="#大数据渲染" class="headerlink" title="大数据渲染"></a>大数据渲染</h1><h2 id="table-分页"><a href="#table-分页" class="headerlink" title="table 分页"></a>table 分页</h2><ul><li>每页展示固定的数据</li></ul><h1></h1><h2 id="定时更新-分批渲染"><a href="#定时更新-分批渲染" class="headerlink" title="定时更新,分批渲染"></a>定时更新,分批渲染</h2><p>用<a href="https://zhuanlan.zhihu.com/p/64917985?from_voters_page=true"><code>requestAnimationFrame</code></a>或者定时器, 加上<code>DocumentFragment</code>进行每次数据的加载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fragment = <span class="keyword">new</span> <span class="title class_">DocumentFragment</span>();</span><br><span class="line">  <span class="keyword">const</span> fruits = [<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Melon&quot;</span>];</span><br><span class="line">  fruits.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fruit</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ele = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">    ele.<span class="property">textContent</span> = fruit;</span><br><span class="line">    fragment.<span class="title function_">appendChild</span>(ele);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(fragment);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>requestAnimationFrame</code>是在<code>style/layout/paint</code>之前触发</li></ul><h2 id="使用虚拟列表IntersectionObserver"><a href="#使用虚拟列表IntersectionObserver" class="headerlink" title="使用虚拟列表IntersectionObserver"></a>使用虚拟列表<a href="http://www.ruanyifeng.com/blog/2016/11/intersectionobserver_api.html"><code>IntersectionObserver</code></a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一个监听对象</span></span><br><span class="line"><span class="keyword">let</span> io = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(</span><br><span class="line">  <span class="function">(<span class="params">entris</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;IntersectionObserver&quot;</span>, entris);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">root</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">thresholds</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 开始监听</span></span><br><span class="line">io.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;b&quot;</span>));</span><br></pre></td></tr></table></figure><ul><li><p>当元素初次在页面上显示, 以及之后每次显示和隐藏都会触发回调</p></li><li><p>IntersectionObserver API 是异步的，不随着目标元素的滚动同步触发。</p></li><li><p>只有线程空闲下来，才会执行观察器。这意味着，这个观察器的优先级非常低，只在其他任务执行完，浏览器有了空闲才会执行。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;大数据渲染&quot;&gt;&lt;a href=&quot;#大数据渲染&quot; class=&quot;headerlink&quot; title=&quot;大数据渲染&quot;&gt;&lt;/a&gt;大数据渲染&lt;/h1&gt;&lt;h2 id=&quot;table-分页&quot;&gt;&lt;a href=&quot;#table-分页&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="业务场景" scheme="https://1578536879.github.io/categories/%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>v-model 和 reactive 组合使用的问题</title>
    <link href="https://1578536879.github.io/2024/02/06/v-model%E5%92%8Creactive%E7%BB%84%E5%90%88%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://1578536879.github.io/2024/02/06/v-model%E5%92%8Creactive%E7%BB%84%E5%90%88%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2024-02-06T06:54:33.509Z</published>
    <updated>2024-02-06T07:33:18.115Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>父组件的数据是一个<code>reactive</code>的数据，传入子组件时用<code>v-model:xxx</code>的形式传入子组件，那么子组件在此情况下调用<code>update:xxx</code>时，并不会引起父组件的数据变化(包含页面和通过<code>watch</code>等方式去监听的回调)</p><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><blockquote><p>父组件代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">test</span> <span class="attr">v-model:data</span>=<span class="string">&quot;testdata&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> testdata = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;父级参数&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> testdata,</span><br><span class="line">  <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;父级变化了11111&quot;</span>, val);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>子组件代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;test.name&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;onIpt&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;reactive, watchEffect&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>([<span class="string">&#x27;data&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;update:data&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> test = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;123&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">onIpt</span> = e =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  test.<span class="property">name</span> = e.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子组件更新&quot;</span>, test)</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">emit</span>(<span class="string">&quot;update:data&quot;</span>, test)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子组件接收到的父组件数据更新&quot;</span>, test)</span></span><br><span class="line"><span class="language-javascript">  test.<span class="property">name</span> = props.<span class="property">data</span>.<span class="property">name</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>实际操作</p></blockquote><p>在进行输入的时候，只触发了<code>onIpt</code>函数，父组件的<code>watch</code>和子组件的<code>watchEffect</code>都未触发</p><p><a href="https://imgse.com/i/pPIiMwT"><img src="https://z1.ax1x.com/2023/09/20/pPIiMwT.png" alt="pPIiMwT.png"></a></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在<a href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#limitations-of-reactive">vue</a>的官方文档上面写明的<code>reactive</code>的局限性：</p><ul><li><p><em>有限的值类型</em></p><p>它只能用于对象类型 (对象、数组和如 Map、Set 这样的集合类型)。它不能持有如 string、number 或 boolean 这样的原始类型。</p></li><li><p><em>不能替换整个对象</em></p><p>由于 Vue 的响应式跟踪是通过属性访问实现的，因此我们必须始终保持对响应式对象的相同引用。这意味着我们不能轻易地“替换”响应式对象，因为这样的话与第一个引用的响应性连接将丢失</p></li><li><p><em>对解构操作不友好</em></p><p>当我们将响应式对象的原始类型属性解构为本地变量时，或者将该属性传递给函数时，我们将丢失响应性连接</p></li></ul><p>上面第二条说明了<code>reactive</code>的响应式是依据  <strong>属性访问</strong> 实现的，而<code>update:data</code>的时候是传递的整个对象，所以并不会引起<code>reactive</code>的响应式。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="父组件的数据改为ref"><a href="#父组件的数据改为ref" class="headerlink" title="父组件的数据改为ref"></a>父组件的数据改为<code>ref</code></h3><p>ref是针对整体的一个响应式，因此就不会产生这个问题</p><h3 id="利用js引用对象的特性，修改prop的属性"><a href="#利用js引用对象的特性，修改prop的属性" class="headerlink" title="利用js引用对象的特性，修改prop的属性"></a>利用js引用对象的特性，修改prop的属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onIpt</span> = e =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> data = props.<span class="property">data</span>;</span><br><span class="line">  data.<span class="property">name</span> = e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子组件更新&quot;</span>, data)</span><br><span class="line">  <span class="comment">// 实际是否加上update的函数，父组件的watch都会触发</span></span><br><span class="line">  <span class="comment">// emit(&quot;update:data&quot;, test)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样不符合单向数据流的特性，因此这个方法不合适</p><h3 id="父组件监听事件"><a href="#父组件监听事件" class="headerlink" title="父组件监听事件"></a>父组件监听事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">test</span> <span class="attr">v-model:data</span>=<span class="string">&quot;testdata&quot;</span> @<span class="attr">update:data</span>=<span class="string">&quot;onUpdateData&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onUpdateData</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;父组件事件的回调&quot;</span>, data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样在子组件调用<code>update:data</code>的方法时，也会触发父组件的<code>onUpdateData</code>方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h</summary>
      
    
    
    
    <category term="vue" scheme="https://1578536879.github.io/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>v-html渲染自定义组件</title>
    <link href="https://1578536879.github.io/2024/02/06/v-html%E6%B8%B2%E6%9F%93%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/"/>
    <id>https://1578536879.github.io/2024/02/06/v-html%E6%B8%B2%E6%9F%93%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/</id>
    <published>2024-02-06T06:54:33.507Z</published>
    <updated>2024-02-06T07:33:00.298Z</updated>
    
    <content type="html"><![CDATA[<h2 id="v-html渲染自定义组件"><a href="#v-html渲染自定义组件" class="headerlink" title="v-html渲染自定义组件"></a>v-html渲染自定义组件</h2><h3 id="前景"><a href="#前景" class="headerlink" title="前景"></a>前景</h3><ul><li><p>需求场景</p><p>后端返回的特定的元素，前端用穿梭框显示，拿到对应的元素后，将其替换为vant组件进行渲染。</p></li><li><p>坑点：</p><p><code>v-html</code>是vue3用于渲染html的指令，但是由于是直接渲染html的，自定义组件vue不会默认重新转化渲染。因此需要进行处理</p></li></ul><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p>使用vue自带的<code>compile</code>函数进行进行渲染转换，再用<code>h</code>函数进行显示</p><ul><li><p>将<code>v-html</code>所用到的组件设置为全局组件</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Lazyload</span>, <span class="title class_">SwipeItem</span>, <span class="title class_">Swipe</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vant&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;Swipe&#x27;</span>, <span class="title class_">Swipe</span>)</span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;swipeitem&#x27;</span>, <span class="title class_">SwipeItem</span>)</span><br></pre></td></tr></table></figure></li><li><p>新建一个用于渲染的组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    &lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line">        <span class="keyword">import</span> &#123; h,&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line">        <span class="comment">// 如果直接从vue引入会报warning，因此引入路径需要修改</span></span><br><span class="line">        <span class="keyword">import</span> &#123;compile&#125; <span class="keyword">from</span> <span class="string">&quot;vue/dist/vue.esm-bundler.js&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        <span class="attr">props</span>: &#123;</span><br><span class="line">            <span class="attr">html</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">setup</span>(<span class="params">props</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="title function_">compile</span>(props.<span class="property">html</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li><p>优点</p><p>自定义组件也可以进行渲染</p></li><li><p>缺点</p><ul><li><p>需要将用到的组件设置为全局组件，那么这样会使初始包变大</p></li><li><p>无法响应事件。组件标签上的事件无法执行，会有warning；事件只能在内部实现，无法暴露出去</p></li></ul></li></ul><h3 id="参考link"><a href="#参考link" class="headerlink" title="参考link"></a>参考link</h3><p><a href="https://juejin.cn/post/7153814550414884871">记录一下vue3 渲染带组件html字符串的方法</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;v-html渲染自定义组件&quot;&gt;&lt;a href=&quot;#v-html渲染自定义组件&quot; class=&quot;headerlink&quot; title=&quot;v-html渲染自定义组件&quot;&gt;&lt;/a&gt;v-html渲染自定义组件&lt;/h2&gt;&lt;h3 id=&quot;前景&quot;&gt;&lt;a href=&quot;#前景&quot; cla</summary>
      
    
    
    
    <category term="vue" scheme="https://1578536879.github.io/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>npm、npx与pnpm</title>
    <link href="https://1578536879.github.io/2024/02/06/npm%E3%80%81npx%E4%B8%8Epnpm/"/>
    <id>https://1578536879.github.io/2024/02/06/npm%E3%80%81npx%E4%B8%8Epnpm/</id>
    <published>2024-02-06T06:54:33.505Z</published>
    <updated>2024-02-06T07:32:44.837Z</updated>
    
    <content type="html"><![CDATA[<h1 id="npm、npx-与-pnpm"><a href="#npm、npx-与-pnpm" class="headerlink" title="npm、npx 与 pnpm"></a>npm、npx 与 pnpm</h1><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><h3 id="npm-i与npm-update"><a href="#npm-i与npm-update" class="headerlink" title="npm i与npm update"></a><code>npm i</code>与<code>npm update</code></h3><ul><li><p><code>npm i</code>：先检查 node_modules 模块是否有对应的指定模块，如果存在，就不再进行安装，即使远程有新版本也不会重新获取</p><p>npm i在安装包的依赖包时，包的依赖包会安装符合规则的<font color=red>最高</font>版本</p><blockquote><p>npm 都要强制重新安装，可以使用-f 或–force 参数。</p></blockquote></li><li><p><code>npm update</code>：每次安装都会先请求远程仓库的最新版本，然后查询本地版本。</p><blockquote><p>如果本地版本不存在或者远程版本较新，那么更新版本</p></blockquote></li></ul><h4 id="安装非发布的包"><a href="#安装非发布的包" class="headerlink" title="安装非发布的包"></a>安装非发布的包</h4><p><a href="https://docs.npmjs.com/about-packages-and-modules/">官网</a>表明了如下几个情况可以直接使用</p><ul><li>a:包含一个由 package.json 文件描述的程序的文件夹。</li><li>b:包含（a）的 gzipped tarball 。</li><li>c:解析为（b）的 URL。</li><li>d:&lt;name&gt;@&lt;version&gt;: 在 registry 上发布的(c)</li><li>e:&lt;name&gt;@&lt;tag&gt; : 能指向（d）。</li><li>f:&lt;name&gt; 具有 latest 标签，且满足（e）。</li><li>g:git url，当 clone 时，得到（a）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git://github.com/user/project.git#commit-ish</span><br><span class="line">git+ssh://user@hostname:project.git#commit-ish</span><br><span class="line">git+http://user@hostname/project/blah.git#commit-ish</span><br><span class="line">git+https://user@hostname/project/blah.git#commit-ish</span><br></pre></td></tr></table></figure><p>commit-ish 可以是任何 tag、分支或者 sha，可以用<code>git checkout</code>切换的，默认是<code>master</code></p><h1></h1><h3 id="npm-缓存"><a href="#npm-缓存" class="headerlink" title="npm 缓存"></a>npm 缓存</h3><p>由于安装时，即使本地有缓存，但是也不会进行读取，那么这就导致在弱网或者无网情况下，无法安装依赖包或者安装速度极低</p><ul><li><p><code>--cache-min</code>：参数指定了一个时间(以分钟为单位)，只有超过这个时间的模块，才会从远程进行下载安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --cache-min <span class="number">9999999</span> &lt;package-name&gt;</span><br></pre></td></tr></table></figure></li></ul><h1></h1><h3 id="npm-i流程"><a href="#npm-i流程" class="headerlink" title="npm i流程"></a><code>npm i</code>流程</h3><ul><li><p>发出<code>npm i</code>命令</p></li><li><p>执行工程自身 preinstall</p><blockquote><p>如果当前工程定义了 preintsall 钩子，那么会调用这个钩子函数</p></blockquote></li><li><p>确定首层依赖</p><blockquote><p>确定当前项目中<code>package.json</code>中的<code>dependencies</code>和<code>devDependencies</code>指定的模块</p></blockquote><blockquote><p>当前项目中的每个依赖包是每个依赖树的根节点，所以 npm 开启多线程对每个依赖包进行更深层级的节点</p></blockquote></li><li><p>获取模块</p><blockquote><p>确定下载的模块版本</p></blockquote><blockquote><p>如果版本描述文件（<code>npm-shrinkwrap.json</code> 或 <code>package-lock. json</code>）有对应模块的信息，那么直接依据对应的信息获取</p></blockquote><blockquote><p>如果没有，向<a href="https://registry.npmjs.org/">registry</a>查询模块压缩 包的网址，然后依据<code>package.json</code>文件中的版本去仓库中获取。</p></blockquote><blockquote><p>获取到模块的 resloved 字段，即压缩包的地址后。获取到后，npm 依据此地址检查本地缓存，如果缓存中有，那么直接从缓存中(只会检查<code>node_modules</code>目录，而不会检查<code>~/.npm</code>目录)拿；如果没有，那么从仓库中进行下载</p></blockquote><blockquote><p>查找该模块的依赖，如果有依赖则回到第一步，没有则停止</p></blockquote></li><li><p>扁平化模块</p><blockquote><p>获取到完整的依赖树后，里面可能包含大量的重复模块，npm3 之前会严格按照依赖树的结构进行安装，这样会造成大量的模块冗余；</p></blockquote><blockquote><p>npm3 之后默认加入了一个<code>dedupe</code>的过程，遍历所有节点，将模块放在根节点下面（node_modules 下），当发现有了重复模块时，将其丢弃</p><blockquote><p>重复模块：<strong>模块名</strong>相同且<strong>semver</strong>兼容。每个 semver 基本都对应一段<em>版本允许范围</em>，如果两个模块的版本允许范围有<strong>交集</strong>，那么可以得到一个<strong>兼容</strong>版本。这样就不需要版本号完全一致了，减少更多的冗余模块在这个阶段中直接去掉</p><blockquote><p>比如 A 模块依赖 package@^1.0.0，B 模块依赖 package@^1.1.0，则 1.1.0 为兼容版本<br /> node_modules–A<br /> node_modules–B<br /> node_modules--package@^1.1.0<br /><br /> 比如 A 模块依赖 package@^1.0.0，B 模块依赖 package@^2.1.0，则没有兼容版本，会将一个版本放在 node_modules，一个继续保留在依赖树中<br /> node_modules--A--package@^1.0.0<br /> node_modules--B--package@^1.1.0<br /></p></blockquote></blockquote></blockquote></li><li><p>安装模块</p><blockquote><p>下载压缩包，存放在~&#x2F;.npm 目录</p></blockquote><blockquote><p>解压到当前项目的 node_modules 目录</p></blockquote><blockquote><p>执行模块中的生命周期函数（按照 preinstall、install、postinstall 的顺序）。</p></blockquote></li><li><p>执行当前项目自身的生命周期</p><blockquote><p>当前 npm 工程如果定义了钩子此时会被执行（按照 install、postinstall、prepublish、prepare 的顺序）。</p></blockquote></li><li><p>生成或者更新版本描述文件（<code>npm-shrinkwrap.json</code> 或 <code>package-lock. json</code>）</p></li></ul><h2 id="npx"><a href="#npx" class="headerlink" title="npx"></a>npx</h2><p><code>npx</code>是<code>npm@5.25.2</code>增加的命令，如果 npm 版本低于这个版本，那么用<code>npm i -g npx</code>安装即可</p><h3 id="与-npm-的不同"><a href="#与-npm-的不同" class="headerlink" title="与 npm 的不同"></a>与 npm 的不同</h3><ul><li><p>npx 是下载到一个临时目录中，然后使用完成之后，进行删除。没有 npm 一样的缓存</p></li><li><p>npx 还可以运行可执行文件(远程的也可以)，比如只安装 webpack 了，那么用<code>npm run webpack</code>会报错，用<code>npx run webpack</code>就可以成功运行</p></li><li><p>npx 会检查 node_modules 和系统变量<code>$PATH</code>的命令是否存在</p></li><li><p><code>--no-install</code>: 如果本地不存在该模块，那么会报错。可以用于强制使用本地模块</p></li><li><p><code>--ignore-existing</code>: 不管是否本地存在，都强制安装使用远程模块。可以用于获取最新的包，即用即删</p></li></ul><h2 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a><a href="https://pnpm.io/zh/motivation">pnpm</a></h2><h3 id="硬连接与符号连接"><a href="#硬连接与符号连接" class="headerlink" title="硬连接与符号连接"></a><a href="https://juejin.cn/post/7032116303737389086/">硬连接与符号连接</a></h3><ul><li><p>硬连接：使用 inode 指向源文件，即使源文件目录地址变化了，但是依旧能进行访问。因为其 inode 仍指向该文件。没有对原始文件的引用。</p></li><li><p>符号连接：指向的源文件地址，如果源文件目的地址修改了，那么就无法再访问；如果有一个新的文件名字与源文件一致，那么再次访问时，访问的是新文件</p></li></ul><h1></h1><h3 id="pnpm-1"><a href="#pnpm-1" class="headerlink" title="pnpm"></a>pnpm</h3><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><p>pnpm 和 npm 一样，有一个缓存目录</p><ul><li><p>Mac&#x2F;linux 中默认会设置到{home dir}&gt;&#x2F;.pnpm-store&#x2F;v3；windows 下会设置到当前盘的根目录下，比如 C（C&#x2F;.pnpm-store&#x2F;v3）、D 盘（D&#x2F;.pnpm-store&#x2F;v3）。</p></li><li><p>pnpm 可以在一个电脑上不同的磁盘设置<a href="https://pnpm.io/zh/workspaces">同一个分区</a>，在这种情况下，pnpm 将复制包而不是硬链接它们，因为硬链接只能发生在同一文件系统同一分区上</p></li><li><p>npm 在安装时，不会去检查缓存；而 pnpm 在安装时，会先检查是否有对应包及其版本的缓存，如果有的话，直接硬链接到这个缓存地址</p></li></ul><h1></h1><h4 id="模块依赖"><a href="#模块依赖" class="headerlink" title="模块依赖"></a>模块依赖</h4><ul><li><p>pnpm 使用平铺的方式，类似于<code>npm2</code>的结构，但是增加了一个<code>.pnpm</code>目录，其中的包命名格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> .<span class="property">pnpm</span>/&lt;organization-name&gt;+&lt;package-name&gt;@&lt;version&gt;<span class="regexp">/node_modules/</span>&lt;name&gt;</span><br><span class="line"><span class="comment">// 组织名(若无会省略)+包名@版本号/node_modules/名称(项目名称)</span></span><br></pre></td></tr></table></figure></li><li><p>对于 <a href="https://pnpm.io/zh/how-peers-are-resolved">PeerDependencies</a> 来说，命名规则稍许不同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">pnpm</span>/&lt;organization-name&gt;+&lt;package-name&gt;@&lt;version&gt;_&lt;organization-name&gt;+&lt;package-name&gt;@&lt;version&gt;<span class="regexp">/node_modules/</span>&lt;name&gt;</span><br><span class="line"><span class="comment">// peerDep组织名(若无会省略)+包名@版本号_组织名(若无会省略)+包名@版本号/node_modules/名称(项目名称)</span></span><br></pre></td></tr></table></figure></li><li><p>pnpm 使用硬链接，将 node_modules 的包地址硬链接到 pnpm 的缓存中；对于同包同版本使用符号连接.</p><p><img src="https://pnpm.io/zh/assets/images/node-modules-structure-8ab301ddaed3b7530858b233f5b3be57.jpg" alt="image"></p></li></ul><h1></h1><h4 id="npm-与-pnpm-差别"><a href="#npm-与-pnpm-差别" class="headerlink" title="npm 与 pnpm 差别"></a><a href="https://pnpm.io/zh/feature-comparison">npm 与 pnpm 差别</a></h4><table><thead><tr><th>功能</th><th>pnpm</th><th>npm</th></tr></thead><tbody><tr><td>隔离的 node_modules</td><td>✅</td><td>❌</td></tr><tr><td>自动安装 peers</td><td>✅ 通过 auto-install-peers&#x3D;true</td><td>✅</td></tr><tr><td>Plug’n’Play(即插即用)</td><td>✅</td><td>❌</td></tr><tr><td>管理 Node.js 版本</td><td>✅ <code>pnpm env &lt;cmd&gt;</code></td><td>❌</td></tr><tr><td>内容可寻址存储</td><td>✅</td><td>❌</td></tr><tr><td>Side-effects cache(缓存的副作用)</td><td>✅</td><td>❌</td></tr><tr><td>有锁文件</td><td><code>pnpm-lock.yaml</code></td><td><code>package-lock.json</code></td></tr><tr><td>即用即删</td><td><code>pnpm dlx</code></td><td><code>npx</code></td></tr></tbody></table><h2 id="参链"><a href="#参链" class="headerlink" title="参链"></a>参链</h2><blockquote><p>npm</p></blockquote><ul><li><p><a href="https://blog.csdn.net/qq_40988677/article/details/125364305">npm 模块安装机制与实现原理 </a></p></li><li><p><a href="https://juejin.cn/post/6844903702063480846">npm 和 package.json 那些不为常人所知的小秘密 </a></p></li></ul><blockquote><p>npx</p></blockquote><ul><li><a href="https://zhuanlan.zhihu.com/p/269419296">npx 简介 </a></li><li><a href="https://newsn.net/say/npx.html#npx--ignore-existing">npx 是什么命令？npx 和 npm 有什么区别？ </a></li></ul><blockquote><p>pnpm</p></blockquote><ul><li><a href="https://zhuanlan.zhihu.com/p/457698236">pnpm</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;npm、npx-与-pnpm&quot;&gt;&lt;a href=&quot;#npm、npx-与-pnpm&quot; class=&quot;headerlink&quot; title=&quot;npm、npx 与 pnpm&quot;&gt;&lt;/a&gt;npm、npx 与 pnpm&lt;/h1&gt;&lt;h2 id=&quot;npm&quot;&gt;&lt;a href=&quot;#np</summary>
      
    
    
    
    <category term="额外内容" scheme="https://1578536879.github.io/categories/%E9%A2%9D%E5%A4%96%E5%86%85%E5%AE%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>Chrome的Performance</title>
    <link href="https://1578536879.github.io/2024/02/06/Chrome--performance/"/>
    <id>https://1578536879.github.io/2024/02/06/Chrome--performance/</id>
    <published>2024-02-06T06:54:33.503Z</published>
    <updated>2024-02-16T06:29:19.886Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chrome-的-performance"><a href="#Chrome-的-performance" class="headerlink" title="Chrome 的 performance"></a>Chrome 的 performance</h1><h2 id="开始记录"><a href="#开始记录" class="headerlink" title="开始记录"></a>开始记录</h2><p>可以通过调整这两个参数模拟低网低 cpu 情况 <a href="https://imgtu.com/i/bRXxL4"><img src="https://s1.ax1x.com/2022/03/09/bRXxL4.png" alt="bRXxL4.png"></a></p><p>点击按钮，刷新页面或者只需要旁边的刷新按钮开始进行记录分析 <a href="https://imgtu.com/i/bRjuTA"><img src="https://s1.ax1x.com/2022/03/09/bRjuTA.png" alt="bRjuTA.png"></a></p><h2 id="操作设置栏-controls"><a href="#操作设置栏-controls" class="headerlink" title="操作设置栏 controls"></a>操作设置栏 controls</h2><ul><li>可以通过这个下拉框看到之前的分析数据</li></ul><p><a href="https://imgtu.com/i/bRjI1K"><img src="https://s1.ax1x.com/2022/03/09/bRjI1K.png" alt="bRjI1K.png"></a></p><ul><li>其他配置</li></ul><p><a href="https://imgtu.com/i/bRvDUA"><img src="https://s1.ax1x.com/2022/03/09/bRvDUA.png" alt="bRvDUA.png"></a></p><h2 id="页面性能的高级汇总-overview"><a href="#页面性能的高级汇总-overview" class="headerlink" title="页面性能的高级汇总 overview"></a>页面性能的高级汇总 overview</h2><p><a href="https://imgtu.com/i/bRzmmF"><img src="https://s1.ax1x.com/2022/03/09/bRzmmF.png" alt="bRzmmF.png"></a> <a href="https://imgtu.com/i/bWF68H"><img src="https://s1.ax1x.com/2022/03/09/bWF68H.png" alt="bWF68H.png"></a></p><ul><li>颜色表示<blockquote><p><font color=#87CEFA>HTML</font></p></blockquote></li></ul><blockquote><p><font color=yellow>脚本</font></p></blockquote><blockquote><p><font color=#9370DB>样式</font></p></blockquote><blockquote><p><font color=green>媒体资源</font></p></blockquote><blockquote><p><font color=gray>其他资源</font></p></blockquote><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>FPS，帧数</td><td><font color=green>绿色</font>竖线越高，FPS 越高。 FPS 图表上的<font color=red>红色</font>块表示长时间帧，很可能会出现卡顿</td></tr><tr><td>CPU，CPU 资源</td><td>指示消耗 CPU 资源的事件类型</td></tr><tr><td>NET，网络请求</td><td>每条彩色横杠表示一种资源。横杠越长，检索资源所需的时间越长。 每个横杠的浅色部分表示等待时间（从请求资源到第一个字节下载完成的时间），可以在屏幕快照下面查看具体的网络请求数据</td></tr></tbody></table><p><a href="https://imgtu.com/i/bWCE4J"><img src="https://s1.ax1x.com/2022/03/09/bWCE4J.png" alt="bWCE4J.png"></a></p><h2 id="火焰图：-CPU-堆叠可视化"><a href="#火焰图：-CPU-堆叠可视化" class="headerlink" title="火焰图： CPU 堆叠可视化"></a>火焰图： CPU 堆叠可视化</h2><p><a href="https://imgtu.com/i/bWEmgH"><img src="https://s1.ax1x.com/2022/03/09/bWEmgH.png" alt="bWEmgH.png"></a></p><ul><li>Timing</li></ul><blockquote><p>FCP: First Contentful Paint，白屏时间，第一个元素出现的时间</p></blockquote><blockquote><p><a href="https://zhuanlan.zhihu.com/p/174837488">LCP</a>: Largest Contentful Paint，视窗最大可见图片或者文本块的渲染时间</p></blockquote><blockquote><p><a href="https://blog.csdn.net/qiwoo_weekly/article/details/98818202">FMP</a>: First Meaningful Paint，首次有效绘制时间，页面的“主要内容”开始出现在屏幕上的时间点</p></blockquote><blockquote><p>DCL: DOMContentLoaded Event，dom 加载完毕时间</p></blockquote><blockquote><p>L: Onload Event，完全加载完毕时间</p></blockquote><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>Network</td><td>资源加载顺序及时长</td></tr><tr><td>Main</td><td>渲染进程中主线程的执行记录，点击 main 可以看到某个任务执行的具体情况<a href="https://imgtu.com/i/bWV5Os"><img src="https://s1.ax1x.com/2022/03/09/bWV5Os.png" alt="bWV5Os.png"></a></td></tr><tr><td>Timings</td><td>用户交互操作，比如点击鼠标、输入文字、动画等</td></tr><tr><td>Compositor</td><td>r 合成线程的执行记录，用来记录 html 绘制阶段 (Paint)结束后的图层合成操</td></tr><tr><td>Raster</td><td>光栅化线程池，用来让 GPU 执行光栅化的任务</td></tr><tr><td>GPU</td><td>GPU 进程主线程的执行过程记录，如 可以直观看到何时启动 GPU 加速</td></tr><tr><td>Frame</td><td>ifream 框架加载详情</td></tr><tr><td>Memory</td><td>不同的时间段的执行情况。页面中的内存使用的情况<a href="https://imgtu.com/i/bWZwNV"><img src="https://s1.ax1x.com/2022/03/09/bWZwNV.png" alt="bWZwNV.png"></a></td></tr></tbody></table><ul><li><p>在火焰图上看到一到三条垂直的虚线。蓝线代表 DOMContentLoaded 事件。 绿线代表首次绘制的时间。 红线代表 load 事件</p></li><li><p>如果是耗时长的 Task，其右上角会标红，这个时候，我们可以选中标红的 Task，然后放大，看其具体的耗时点。放大后，这里可以看到都在做哪些操作，哪些函数耗时了多少,这里代码有压缩，看到的是压缩后的函数名。然后我们点击一下某个函数，在面板最下面，就会出现代码的信息，是哪个函数，耗时多少，在哪个文件上的第几行等。这样我们就很方便地定位到耗时函数了。<br><a href="https://imgtu.com/i/bWu7JP"><img src="https://s1.ax1x.com/2022/03/09/bWu7JP.png" alt="bWu7JP.png"></a></p></li></ul><h2 id="Summary性能摘要"><a href="#Summary性能摘要" class="headerlink" title="Summary性能摘要"></a>Summary性能摘要</h2><p><a href="https://imgtu.com/i/bWmDOJ"><img src="https://s1.ax1x.com/2022/03/09/bWmDOJ.png" alt="bWmDOJ.png"></a></p><ul><li>颜色表示<blockquote><p><font color=#87CEFA>Loading</font>：网络通信和HTML解析</p></blockquote></li></ul><blockquote><p><font color=yellow>Scripting</font>：JavaScript执行</p></blockquote><blockquote><p><font color=#9370DB>Rendering</font>：样式计算和布局，即重排</p></blockquote><blockquote><p><font color=green>Painting</font>：重绘</p></blockquote><blockquote><p><font color=gray>other</font>：其它事件花费的时间</p></blockquote><blockquote><p><font color=white>Idle</font>：空闲时间</p></blockquote><p><a href="https://www.cnblogs.com/zjjing/p/9106111.html">事件包含</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/29879682">Chrome Performance 使用栗子</a></p><p><a href="https://zhuanlan.zhihu.com/p/163474573">Chrome Performance 页面性能分析指南</a></p><p><a href="https://www.jianshu.com/p/b6f87bac5381">饼状图分析</a></p><p><a href="https://www.cnblogs.com/xiaohuochai/p/9182710.html">performance</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Chrome-的-performance&quot;&gt;&lt;a href=&quot;#Chrome-的-performance&quot; class=&quot;headerlink&quot; title=&quot;Chrome 的 performance&quot;&gt;&lt;/a&gt;Chrome 的 performance&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="浏览器" scheme="https://1578536879.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
    <category term="浏览器 Performance Chrome" scheme="https://1578536879.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8-Performance-Chrome/"/>
    
  </entry>
  
  <entry>
    <title>【小程序】上传文件</title>
    <link href="https://1578536879.github.io/2024/02/06/%E3%80%90%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%91%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <id>https://1578536879.github.io/2024/02/06/%E3%80%90%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%91%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</id>
    <published>2024-02-06T06:54:33.501Z</published>
    <updated>2024-02-06T07:31:40.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小程序上传文件"><a href="#小程序上传文件" class="headerlink" title="小程序上传文件"></a>小程序上传文件</h1><h2 id="选择文件"><a href="#选择文件" class="headerlink" title="选择文件"></a>选择文件</h2><h3 id="拍摄或从手机相册中选择图片或视频。"><a href="#拍摄或从手机相册中选择图片或视频。" class="headerlink" title="拍摄或从手机相册中选择图片或视频。"></a>拍摄或从手机相册中选择图片或视频。</h3><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.chooseMedia.html">wx.chooseMedia</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 拍摄或从手机相册中选择图片或视频。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; mediaType 文件类型 mix/video/image</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; count 最多可以选择的文件个数，基础库2.25.0前，最多可支持9个文件，2.25.0及以后最多可支持20个文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; sourceType 图片和视频选择的来源 [&quot;album&quot;, &quot;camera&quot;]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; maxDuration 拍摄视频最长拍摄时间，单位秒。时间范围为 3s 至 60s 之间。不限制相册。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; camera 仅在 sourceType 为 camera 时生效，使用前置或后置摄像头</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125; 文件内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">wx.<span class="title function_">chooseMedia</span>(&#123;</span><br><span class="line">  count,</span><br><span class="line">  <span class="attr">mediaType</span>: [mediaType],</span><br><span class="line">  sourceType,</span><br><span class="line">  maxDuration,</span><br><span class="line">  camera,</span><br><span class="line">  <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">fail</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件chooseMedia失败-----&quot;</span>, err);</span><br><span class="line">    <span class="title function_">reject</span>(err);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="从聊天会话选择文件。"><a href="#从聊天会话选择文件。" class="headerlink" title="从聊天会话选择文件。"></a>从聊天会话选择文件。</h3><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseMessageFile.html">wx.chooseMessageFile</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 从会话选择文件。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; type 所选的文件的类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; count 最多可以选择的文件个数，可以 0～100</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; extension 根据文件拓展名过滤，仅 type==file 时有效。每一项都不能是空字符串。默认不过滤。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125; 文件内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">wx.<span class="title function_">chooseMessageFile</span>(&#123;</span><br><span class="line">  count,</span><br><span class="line">  type,</span><br><span class="line">  extension,</span><br><span class="line">  <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="title function_">onHandleFile</span>(res, <span class="string">&quot;path&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="title function_">reslove</span>(data));</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">fail</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件chooseMedia失败-----&quot;</span>, err);</span><br><span class="line">    <span class="title function_">reject</span>(err);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="上传到后端"><a href="#上传到后端" class="headerlink" title="上传到后端"></a>上传到后端</h2><p>调用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/upload/wx.uploadFile.html">uploadFile</a></p><p>选择文件后，调用<code>uploadFile</code>传入本地路径，即可进行文件上传</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 进行文件上传</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; url 文件上传地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; filePath 要上传文件资源的路径 (本地路径)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; name 文件对应的 key，开发者在服务端可以通过这个 key 获取文件的二进制内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; formData HTTP 请求中其他额外的 form data</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; header HTTP 请求 Header，Header 中不能设置 Referer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  wx.<span class="title function_">showLoading</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;上传中...&quot;</span>,</span><br><span class="line">    <span class="attr">mask</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  wx.<span class="title function_">uploadFile</span>(&#123;</span><br><span class="line">    url,</span><br><span class="line">    filePath,</span><br><span class="line">    name,</span><br><span class="line">    formData,</span><br><span class="line">    header,</span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reslove</span>(res);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(err);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">complete</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      wx.<span class="title function_">hideLoading</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="上传到腾讯云"><a href="#上传到腾讯云" class="headerlink" title="上传到腾讯云"></a>上传到腾讯云</h2><p>此方式在选择文件后，直接调用接口，无需再调用<code>uploadFile</code></p><h3 id="下载-sdk"><a href="#下载-sdk" class="headerlink" title="下载 sdk"></a>下载 sdk</h3><p>在<a href="https://cloud.tencent.com/document/product/436/31953#.E4.B8.8A.E4.BC.A0.E5.AF.B9.E8.B1.A1">腾讯云小程序上传</a>中下载<code>cos-js-sdk-v5.min.js</code>文件，放入项目中</p><h3 id="引入及配置"><a href="#引入及配置" class="headerlink" title="引入及配置"></a>引入及配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cosSDK = <span class="built_in">require</span>(<span class="string">&quot;../static/js/cos-js-sdk-v5.min.js&quot;</span>);</span><br></pre></td></tr></table></figure><p>进行腾讯云的 sdk 配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//生成随机数</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">getRandomSecret</span> = (<span class="params">num: number</span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">let</span> t = <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">     a = t.<span class="property">length</span>,</span><br><span class="line">     n = <span class="string">&quot;&quot;</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num; i++) n += t.<span class="title function_">charAt</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * a));</span><br><span class="line">   <span class="keyword">return</span> n;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//获取十位的时间戳</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">getTimeStamp</span> = (<span class="params">date?</span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(date).<span class="title function_">getTime</span>() / <span class="number">1000</span>);</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//获取密钥</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">getSDKToken</span> = (<span class="params">fileName: string</span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">//   通过后端获取密钥</span></span><br><span class="line">     <span class="title function_">getCosToken</span>(&#123;&#125;).<span class="title function_">then</span>(</span><br><span class="line">       <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">const</span> &#123;</span><br><span class="line">           access_secret_id,</span><br><span class="line">           access_secret_key,</span><br><span class="line">           expiration,</span><br><span class="line">           security_token,</span><br><span class="line">           config,</span><br><span class="line">         &#125; = res ?? &#123;&#125;;</span><br><span class="line">         <span class="keyword">const</span> &#123; bucket, region, tenant_id &#125; = config;</span><br><span class="line">         <span class="keyword">const</span> fileType = fileName.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>).<span class="title function_">pop</span>();</span><br><span class="line">         <span class="keyword">const</span> <span class="title class_">ExpiredTime</span> = <span class="title function_">getTimeStamp</span>(expiration);</span><br><span class="line">         <span class="keyword">const</span> <span class="title class_">StartTime</span> = <span class="title function_">getTimeStamp</span>(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">         <span class="keyword">const</span> random = <span class="title function_">getRandomSecret</span>(<span class="number">7</span>);</span><br><span class="line">         uploadParams.<span class="property">Bucket</span> = bucket;</span><br><span class="line">         uploadParams.<span class="property">Region</span> = region;</span><br><span class="line">         <span class="comment">//文件名是13位时间戳和7位随机数</span></span><br><span class="line">         uploadParams.<span class="property">Key</span> = <span class="string">`<span class="subst">$&#123;tenant_id&#125;</span>/<span class="subst">$&#123;StartTime&#125;</span><span class="subst">$&#123;random&#125;</span>.<span class="subst">$&#123;fileType&#125;</span>`</span>;</span><br><span class="line">         <span class="keyword">const</span> <span class="attr">cosInitParams</span>: <span class="title class_">TCosInitParams</span> = &#123;</span><br><span class="line">           <span class="title class_">TmpSecretId</span>: access_secret_id,</span><br><span class="line">           <span class="title class_">TmpSecretKey</span>: access_secret_key,</span><br><span class="line">           <span class="title class_">SecurityToken</span>: security_token,</span><br><span class="line">           <span class="title class_">StartTime</span>,</span><br><span class="line">           <span class="title class_">ExpiredTime</span>,</span><br><span class="line">         &#125;;</span><br><span class="line">         <span class="title function_">resolve</span>(cosInitParams);</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="function">() =&gt;</span> &#123;</span><br><span class="line">         <span class="title function_">reject</span>(&#123;&#125;);</span><br><span class="line">       &#125;</span><br><span class="line">     );</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//配置sdk</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">configSDK</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">     cos = <span class="keyword">new</span> <span class="title function_">cosSDK</span>(&#123;</span><br><span class="line">       <span class="attr">getAuthorization</span>: <span class="function">(<span class="params">options, callback</span>) =&gt;</span> <span class="title function_">callback</span>(params),</span><br><span class="line">       <span class="title class_">FileParallelLimit</span>: <span class="number">10</span>,</span><br><span class="line">       <span class="title class_">ChunkParallelLimit</span>: <span class="number">10</span>,</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//上传文件</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">onUpload</span> = (<span class="params">filePath</span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">     cos?.<span class="title function_">uploadFile</span>(</span><br><span class="line">       &#123;</span><br><span class="line">         ...uploadParams,</span><br><span class="line">         <span class="title class_">FilePath</span>: filePath,</span><br><span class="line">         <span class="attr">onProgress</span>: <span class="keyword">function</span> (<span class="params">progressData</span>) &#123;</span><br><span class="line">           <span class="comment">/* 非必须 */</span></span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;--------onProgress--------&quot;</span>);</span><br><span class="line">         &#125;,</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="title function_">resolve</span>(err || data);</span><br><span class="line">       &#125;</span><br><span class="line">     );</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@description</span>: 开始cos上传</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; fileName 选择的文件名称</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; filePath 本地临时文件路径 (本地路径)</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; fileSize 本地临时文件大小，单位 B</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; fileType 选择的文件类型</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">onStartUpload</span> = <span class="keyword">async</span> (<span class="params">fileName, filePath, fileSize, fileType</span>) =&gt; &#123;</span><br><span class="line">   <span class="comment">// 因为从手机选择文件上传无法获取文件名称，如果在无名称时上传，那么会报错</span></span><br><span class="line">   <span class="keyword">if</span> (!fileName) &#123;</span><br><span class="line">     fileName = filePath.<span class="title function_">slice</span>(filePath.<span class="title function_">indexOf</span>(<span class="string">&quot;//&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">const</span> <span class="attr">sdkParams</span>: <span class="title class_">TCosInitParams</span> | &#123;&#125; = <span class="keyword">await</span> <span class="title function_">getSDKToken</span>(fileName);</span><br><span class="line">   wx.<span class="title function_">showLoading</span>(&#123;</span><br><span class="line">     <span class="attr">title</span>: <span class="string">&quot;上传中...&quot;</span>,</span><br><span class="line">     <span class="attr">mask</span>: <span class="literal">true</span>,</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="title function_">configSDK</span>(sdkParams <span class="keyword">as</span> <span class="title class_">TCosInitParams</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="title function_">onUpload</span>(filePath).<span class="title function_">then</span>(</span><br><span class="line">         <span class="function">(<span class="params">data: TCosUploadResponse</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="keyword">const</span> params = &#123;</span><br><span class="line">               <span class="attr">cos_file_name</span>: fileName,</span><br><span class="line">               <span class="attr">cos_file_size</span>: fileSize,</span><br><span class="line">               <span class="attr">cos_file_type</span>: fileType,</span><br><span class="line">               <span class="attr">cos_url</span>: data.<span class="property">Location</span>,</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">const</span> &#123; cos_url, cos_file_name &#125; = params;</span><br><span class="line">           <span class="comment">//如果是视频的话需要额外传视频首祯图和视频封面</span></span><br><span class="line">           <span class="keyword">if</span> (<span class="title function_">judgeFileType</span>(cos_url) === <span class="string">&quot;video&quot;</span>) &#123;</span><br><span class="line">             <span class="keyword">const</span> screen = <span class="title function_">getVideoScreen</span>(cos_url);</span><br><span class="line">             <span class="title function_">getThumbnailLogo</span>(screen, cos_file_name).<span class="title function_">then</span>(</span><br><span class="line">               <span class="function">(<span class="params">res: TGetThumbnailLogoResponse</span>) =&gt;</span> &#123;</span><br><span class="line">                 <span class="keyword">const</span> &#123; <span class="attr">screen</span>: logo &#125; = res ?? &#123;&#125;;</span><br><span class="line">                 wx.<span class="title function_">hideLoading</span>();</span><br><span class="line">                 <span class="title function_">resolve</span>(&#123;</span><br><span class="line">                   ...params,</span><br><span class="line">                   <span class="attr">cos_video_file_screen</span>: screen,</span><br><span class="line">                   <span class="attr">cos_video_thumbnail_logo</span>: logo,</span><br><span class="line">                 &#125;);</span><br><span class="line">               &#125;</span><br><span class="line">             );</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             wx.<span class="title function_">hideLoading</span>();</span><br><span class="line">             <span class="title function_">resolve</span>(params);</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">           wx.<span class="title function_">hideLoading</span>();</span><br><span class="line">           <span class="title function_">reject</span>(error);</span><br><span class="line">         &#125;</span><br><span class="line">       );</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">uni.<span class="title function_">chooseMessageFile</span>(&#123;</span><br><span class="line">  count,</span><br><span class="line">  type,</span><br><span class="line">  extension,</span><br><span class="line">  <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> tempFilePaths = res.<span class="property">tempFiles</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, path, size, type &#125; = tempFilePaths[<span class="number">0</span>];</span><br><span class="line">    <span class="title function_">onStartUpload</span>(name, path, size, type).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reslove</span>(res);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">fail</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件chooseMedia失败-----&quot;</span>, err);</span><br><span class="line">    <span class="title function_">reject</span>(err);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;小程序上传文件&quot;&gt;&lt;a href=&quot;#小程序上传文件&quot; class=&quot;headerlink&quot; title=&quot;小程序上传文件&quot;&gt;&lt;/a&gt;小程序上传文件&lt;/h1&gt;&lt;h2 id=&quot;选择文件&quot;&gt;&lt;a href=&quot;#选择文件&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="小程序" scheme="https://1578536879.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>【小程序】uniapp发布插件</title>
    <link href="https://1578536879.github.io/2024/02/06/%E3%80%90%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%91uniapp%E5%8F%91%E5%B8%83%E6%8F%92%E4%BB%B6/"/>
    <id>https://1578536879.github.io/2024/02/06/%E3%80%90%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%91uniapp%E5%8F%91%E5%B8%83%E6%8F%92%E4%BB%B6/</id>
    <published>2024-02-06T06:54:33.499Z</published>
    <updated>2024-02-06T07:31:21.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【小程序】uniapp发布插件"><a href="#【小程序】uniapp发布插件" class="headerlink" title="【小程序】uniapp发布插件"></a>【小程序】uniapp发布插件</h1><p><a href="https://uniapp.dcloud.net.cn/plugin/uni_modules.html#%E4%BD%BF%E7%94%A8-uni-modules-%E6%8F%92%E4%BB%B6">uni-modules-插件</a></p><h2 id="新建发布uni-modules插件"><a href="#新建发布uni-modules插件" class="headerlink" title="新建发布uni_modules插件"></a>新建发布uni_modules插件</h2><ul><li><p>在<code>uni_modules</code>右键，选择新建一个<code>uni_modules插件</code></p><p>此时会生成一个插件模板代码</p></li><li><p>写好对应的文件后，在<code>插件目录右键</code>，选择<code>发布到插件市场</code></p><p><a href="https://imgse.com/i/pCBR6uq"><img src="https://s1.ax1x.com/2023/07/01/pCBR6uq.png" alt="pCBR6uq.png"></a></p><p>填写好对应的信息后，直接进行保存即可</p></li><li><p>发布好后，即可在uniapp插件市场中进行下载</p></li></ul><h2 id="更新插件"><a href="#更新插件" class="headerlink" title="更新插件"></a>更新插件</h2><ul><li><p>更新好具体的内容后，右键选择<code>发布到插件市场</code></p><p><a href="https://imgse.com/i/pCBWUMR"><img src="https://s1.ax1x.com/2023/07/01/pCBWUMR.png" alt="pCBWUMR.png"></a></p></li></ul><p>更新即可</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul><li><p>发布和导入是同一个项目</p><p>项目里面如果又导入了这个插件，那么在uni_modules下导入的插件会被覆盖</p></li><li><p>发布的包必须包含的文件</p><ul><li><p><code>components/插件名/插件名.vue</code></p><p>如果没有这个文件，那么在发布时会报错</p></li><li><p><code>package.json</code></p><p>用于配置发布插件的一些信息</p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【小程序】uniapp发布插件&quot;&gt;&lt;a href=&quot;#【小程序】uniapp发布插件&quot; class=&quot;headerlink&quot; title=&quot;【小程序】uniapp发布插件&quot;&gt;&lt;/a&gt;【小程序】uniapp发布插件&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://u</summary>
      
    
    
    
    <category term="小程序" scheme="https://1578536879.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>【手写】call、apply、bind</title>
    <link href="https://1578536879.github.io/2024/02/06/%E3%80%90%E6%89%8B%E5%86%99%E3%80%91call%E3%80%81apply%E3%80%81bind/"/>
    <id>https://1578536879.github.io/2024/02/06/%E3%80%90%E6%89%8B%E5%86%99%E3%80%91call%E3%80%81apply%E3%80%81bind/</id>
    <published>2024-02-06T06:54:33.497Z</published>
    <updated>2024-02-06T07:32:04.346Z</updated>
    
    <content type="html"><![CDATA[<h2 id="call"><a href="#call" class="headerlink" title="call"></a><em>call</em></h2><p>call 可以改变调用函数时的 this 指向，当调用但什么都不传入时，默认是 window 对象</p><h3 id="内部流程"><a href="#内部流程" class="headerlink" title="内部流程"></a>内部流程</h3><p><a href="https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-function.prototype.call">es 文档</a>上编写的流程如下:</p><ul><li><p>让一个函数 func 指向 this</p></li><li><p>如果这个函数 func 不能被调用，那么抛出 TypeError</p></li><li><p>准备尾调用 PrepareForTailCall</p></li><li><p>返回执行结果</p></li></ul><p>思路</p><ul><li><p>判断需要改变的 context 是否为空，如果为空，那么就默认指为 window。保留这个新的 context，作为后面函数调用时需要的 this 指向</p></li><li><p>将当前的 this 指向赋值给上一步保留的 context，作为 context 的一个属性</p></li><li><p>调用第一步保留的 context 的第二步赋值的属性函数，将所需要的参数传递给上一步新赋值的属性</p></li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>call</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">call_handle_writing</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="comment">// ctx指向obj，因为fn为非空</span></span><br><span class="line">  <span class="keyword">const</span> ctx = fn || <span class="variable language_">window</span>;</span><br><span class="line">  <span class="comment">//   ctx.cb指向的是fn1</span></span><br><span class="line">  ctx.<span class="property">cb</span> = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">//   获取参数</span></span><br><span class="line">  <span class="keyword">const</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="comment">//   调用fn1函数，但是由于是ctx调用的，那么fn1被调用的时候的this指向是ctx</span></span><br><span class="line">  <span class="keyword">const</span> res = ctx.<span class="title function_">cb</span>(...args);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call_handle_writing</span> = call_handle_writing;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;out&quot;</span>, <span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">100</span>,</span><br><span class="line">&#125;;</span><br><span class="line">fn1.<span class="title function_">call_handle_writing</span>(obj, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><h3 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h3><blockquote><ol><li>Let func be the this value.</li><li>If IsCallable(func) is false, throw a TypeError exception.</li><li>If argArray is either undefined or null, then<blockquote><p>a. Perform PrepareForTailCall().<br /><br>b. Return ? <font color=red>Call(func, thisArg).</font></p></blockquote></li><li>Let argList be ? CreateListFromArrayLike(argArray).</li><li>Perform PrepareForTailCall().</li><li>Return ? Call(func, thisArg, argList).</li></ol></blockquote><p>其实就是接受一个数组作为参数，实际最后的调用时，调用的也是 call 方法</p><p>apply 调用 call 的时候，会用到扩展运算符，将参数放到 call 的参数中，因此这在一定程度上，导致了 apply 的性能会稍低于 call</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">apply_handle_writing</span>(<span class="params">fn, params</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(params)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">call_handle_writing</span>(fn, ...params);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">call_handle_writing</span>(fn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">apply_handle_writing</span> = apply_handle_writing;</span><br></pre></td></tr></table></figure><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><h3 id="内部流程-1"><a href="#内部流程-1" class="headerlink" title="内部流程"></a>内部流程</h3><blockquote><ol><li>Let Target be the this value.</li><li>If IsCallable(Target) is false, throw a TypeError exception.</li><li>Let F be ? BoundFunctionCreate(Target, thisArg, args).</li><li>Let L be 0.</li><li>Let targetHasLength be ? HasOwnProperty(Target, “length”).</li><li>If targetHasLength is true, then<blockquote><p>a. Let targetLen be ? Get(Target, “length”).<br/><br>b. If targetLen is a Number, then<br/></p><blockquote><p>i. If targetLen is +∞𝔽, set L to +∞.<br/></p><blockquote><p>ii. Else if targetLen is -∞𝔽, set L to 0.<br/><br>iii. Else,</p></blockquote></blockquote></blockquote></li><li>Let targetLenAsInt be ! ToIntegerOrInfinity(targetLen).</li><li>Assert: targetLenAsInt is finite.</li><li>Let argCount be the number of elements in args.</li><li>Set L to max(targetLenAsInt - argCount, 0).</li><li>Perform SetFunctionLength(F, L).</li><li>Let targetName be ? Get(Target, “name”).</li><li>If targetName is not a String, set targetName to the empty String.</li><li>Perform SetFunctionName(F, targetName, “bound”).</li><li>Return F.</li></ol></blockquote><p>考虑场景：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> C = A.<span class="title function_">bind</span>(B);</span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title function_">C</span>();</span><br></pre></td></tr></table></figure><ul><li><p>调用 bind 后，使用<code>new</code>去创建一个实例，那么在<code>new</code>的时候不应该改变<code>this</code>指向</p><p>在返回的函数中，用<code>instanceof</code>判断是否是通过<code>new</code>方法进行调用的</p></li><li><p>调用 bind 后，在 c 上面可以调用 A 上 <code>prototype</code> 的方法</p><p>采用继承的方式，在返回的函数上，继承 A</p></li></ul><h3 id="具体实现-1"><a href="#具体实现-1" class="headerlink" title="具体实现"></a>具体实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bind_handle_writing</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">const</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">cb</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> params = [...<span class="variable language_">arguments</span>, ...args];</span><br><span class="line">    fn = <span class="variable language_">this</span> <span class="keyword">instanceof</span> cb ? <span class="variable language_">this</span> : fn;</span><br><span class="line">    <span class="keyword">return</span> that.<span class="title function_">call</span>(fn, ...params);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 用一个中间函数，在原型链上加一层，防止属性覆盖</span></span><br><span class="line">  <span class="keyword">const</span> buf = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">  buf.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">  cb.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  <span class="keyword">return</span> cb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind_handle_writing</span> = bind_handle_writing;</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.jianshu.com/p/b540e1e17f54">如何手写一个 bind 方法</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;call&quot;&gt;&lt;a href=&quot;#call&quot; class=&quot;headerlink&quot; title=&quot;call&quot;&gt;&lt;/a&gt;&lt;em&gt;call&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;call 可以改变调用函数时的 this 指向，当调用但什么都不传入时，默认是 window 对象&lt;/p&gt;</summary>
      
    
    
    
    <category term="js" scheme="https://1578536879.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>【前端缓存】随机数位置区别</title>
    <link href="https://1578536879.github.io/2024/02/06/%E3%80%90%E5%89%8D%E7%AB%AF%E7%BC%93%E5%AD%98%E3%80%91%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%BD%8D%E7%BD%AE%E5%8C%BA%E5%88%AB/"/>
    <id>https://1578536879.github.io/2024/02/06/%E3%80%90%E5%89%8D%E7%AB%AF%E7%BC%93%E5%AD%98%E3%80%91%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%BD%8D%E7%BD%AE%E5%8C%BA%E5%88%AB/</id>
    <published>2024-02-06T06:54:33.495Z</published>
    <updated>2024-02-06T07:30:56.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件随机数存放位置区别"><a href="#文件随机数存放位置区别" class="headerlink" title="文件随机数存放位置区别"></a>文件随机数存放位置区别</h2><h3 id="文件url-随机数"><a href="#文件url-随机数" class="headerlink" title="文件url+?+随机数"></a>文件url+?+随机数</h3><ul><li><p><code>https://xxx?v=1.x.x</code></p><p>一般用于版本号对应的文件</p></li><li><p><code>https://xxx?c=s45sdf</code></p><p>一般用于文件内容生成的hash值</p></li></ul><h3 id="文件名-hash值"><a href="#文件名-hash值" class="headerlink" title="文件名+hash值"></a>文件名+hash值</h3><p><code>https://xxxs45sdf</code></p><p>hash值一般由文件内容生成</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>以上两种存放位置都可以使浏览器获取最新的文件，而不是走缓存拿文件</p><p>当前主流的一般是用文件名+hash值的形式。原因如下</p><blockquote><p>一般发版时，是有html文件和js、css文件的。<br />浏览器首先去请求html文件，html嵌入了js、css等其他文件。<br />那么在请求html和js、css等文件的这个时间差内，如果采用第一种方式(文件url+?+随机数)，就容易出现问题</p></blockquote><ul><li><p>如果先发html文件，再发js、css等文件</p><ul><li><p>客户请求时，浏览器不会走缓存，会去取最新的文件。</p></li><li><p>但是可能这个时候取的js、css文件还是老的文件。那么就导致客户端下次再去请求时，走的其实是缓存。</p></li></ul></li><li><p>先发js、css等文件，再发html文件</p><ul><li><p>对于有缓存的用户不会造成影响。</p></li><li><p>但是对于无缓存的用户，拿取数据时，会拿取到最新的js、css等文件，那么最直观的影响可能是页面样式问题。但当html发布成功后，页面会恢复正常</p></li></ul></li><li><p>对于异步加载的情况</p><ul><li><p>代码发布后，用户在使用过程中，进入了一个新路由</p></li><li><p>在新路由页面，获取的是最新的代码文件，但是在进入之前，获取的是老代码文件，那么这里就会导致新老代码文件交替，容易出现问题</p></li></ul></li></ul><p>因此，采用文件名+hash的方式，无论是先发html还是js、css文件，由于是直接通过文件名去获取的，那么就不会产生上述问题。</p><ul><li><p>先发js、css等文件</p><ul><li>由于文件名不同，由于文件名已经不一样了，所以不会覆盖掉之前存在的资源文件，客户端依旧可以安全的访问。</li></ul></li><li><p>再发html文件</p><ul><li>因为js、css等文件已经发布完毕了，那么当html更新了之后，再获取的js、css等文件就已经是最新的了</li></ul></li></ul><h2 id="参链"><a href="#参链" class="headerlink" title="参链"></a>参链</h2><p><a href="https://github.com/fouber/blog/issues/6">大公司里怎样开发和部署前端代码</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;文件随机数存放位置区别&quot;&gt;&lt;a href=&quot;#文件随机数存放位置区别&quot; class=&quot;headerlink&quot; title=&quot;文件随机数存放位置区别&quot;&gt;&lt;/a&gt;文件随机数存放位置区别&lt;/h2&gt;&lt;h3 id=&quot;文件url-随机数&quot;&gt;&lt;a href=&quot;#文件url-随机</summary>
      
    
    
    
    <category term="浏览器" scheme="https://1578536879.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>【wasb】环境搭建</title>
    <link href="https://1578536879.github.io/2024/02/06/%E3%80%90wasb%E3%80%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://1578536879.github.io/2024/02/06/%E3%80%90wasb%E3%80%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2024-02-06T06:54:33.492Z</published>
    <updated>2024-02-06T07:30:28.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【webAsb】-Emscripten环境搭建"><a href="#【webAsb】-Emscripten环境搭建" class="headerlink" title="【webAsb】- Emscripten环境搭建"></a>【webAsb】- Emscripten环境搭建</h1><h2 id="依赖环境"><a href="#依赖环境" class="headerlink" title="依赖环境"></a>依赖环境</h2><ul><li><p>python</p></li><li><p>git</p></li></ul><p>这两项环境是必要的，否则无法进行安装</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="attr">https</span>:<span class="comment">//github.com/juj/emsdk.git</span></span><br></pre></td></tr></table></figure><p>下载emscripten项目</p><h3 id="安装依赖包等"><a href="#安装依赖包等" class="headerlink" title="安装依赖包等"></a>安装依赖包等</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd emsdk <span class="comment">// 进入项目目录中</span></span><br><span class="line">emsdk update <span class="comment">// 安装各种工具</span></span><br><span class="line">emsdk install latest <span class="comment">//下载各种包，时间比较长</span></span><br><span class="line">emsdk activate latest <span class="comment">//生成 ~/.emscripten 文件，激活配置</span></span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/pP6oCWT"><img src="https://s1.ax1x.com/2023/09/09/pP6oCWT.png" alt="pP6oCWT.png"></a></p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>可以先执行<code>emsdk_env</code>脚本，这个脚本默认会写入环境变量，但是也会有不成功的情况。</p><p>在非emsdk目录下执行<code>emcc --version</code>，判断是否报错，如果报错，就证明环境并未配置成功；如果未报错，那么环境已经配置完成啦</p><h4 id="环境未配置成功"><a href="#环境未配置成功" class="headerlink" title="环境未配置成功"></a>环境未配置成功</h4><ul><li><p>执行 <code>emcmdprompt.bat</code>命令</p><p><a href="https://imgse.com/i/pP6xUSA"><img src="https://s1.ax1x.com/2023/09/09/pP6xUSA.png" alt="pP6xUSA.png"></a></p></li><li><p>将带有<code>PATH +=</code>的路径写入环境变量的Path中</p><p><a href="https://imgse.com/i/pP6zKhQ"><img src="https://s1.ax1x.com/2023/09/09/pP6zKhQ.png" alt="pP6zKhQ.png"></a></p></li><li><p>将下面带有键值对的写入系统变量中</p><p>记住不能有空格，否则会执行不成功</p><p><a href="https://imgse.com/i/pP6z1cn"><img src="https://s1.ax1x.com/2023/09/09/pP6z1cn.png" alt="pP6z1cn.png"></a></p></li><li><p>在非<code>emsdk</code>目录下执行<code>emcc --version</code></p><p><a href="https://imgse.com/i/pP6zJBV"><img src="https://s1.ax1x.com/2023/09/09/pP6zJBV.png" alt="pP6zJBV.png"></a></p><p>环境配置成功</p></li></ul><h2 id="配置c-环境"><a href="#配置c-环境" class="headerlink" title="配置c++环境"></a>配置c++环境</h2><h3 id="安装配置c-c"><a href="#安装配置c-c" class="headerlink" title="安装配置c&#x2F;c++"></a>安装配置c&#x2F;c++</h3><ul><li><p>安装</p><p>安装c&#x2F;c++编译器：<a href="https://sourceforge.net/projects/mingw-w64/">https://sourceforge.net/projects/mingw-w64/</a></p></li><li><p>配置</p><p>在环境变量的Path中，把解压的mingw的bin目录加入进去</p></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在cmd输入<code>gcc -v</code>，没有报错即可</p><p><a href="https://imgse.com/i/pPIgD91"><img src="https://z1.ax1x.com/2023/09/21/pPIgD91.png" alt="pPIgD91.png"></a></p><p><a href="https://blog.csdn.net/weixin_43180456/article/details/126374156">参链</a></p><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><h3 id="编写测试程序"><a href="#编写测试程序" class="headerlink" title="编写测试程序"></a>编写测试程序</h3><p>建立一个cpp文件，写入c的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello, world!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成js代码"><a href="#生成js代码" class="headerlink" title="生成js代码"></a>生成js代码</h3><blockquote><p><code>emcc test.cpp -o test.html</code></p></blockquote><p>会生成<code>html</code>，<code>js</code>和<code>wasm</code>文件，html默认引入js文件，js的作用是引入wasm文件</p><ul><li><p><code>-s</code> 表明编译到 Wasm，否则编译到 Asm.js（Wasm 的前身）， 最初 emscripten 是用于编译到 Asm.js 的。</p></li><li><p><code>SIDE_MODULE</code> 表明编译为副模块。有副模块就有主模块，简单理解副模块会去除 C 标准库函数，因为副模块会在运行时被链接到一个主模块，而主模块有C标准库函数。SIDE_MODULE的值可选 1 或者 2，前者会自动导出代码里所有的函数，而后者需要手动声明。</p></li><li><p><code>-o</code> xxxx 导出选项，导出的文件可选 .html、.js、.wasm，区别在于前面两者会帮你把胶水代码写好 ，而 .wasm 则需要在 JS 自己编写胶水代码了，但是前面两者代码冗余，比如编译为 JS 文件时，JS 文件会包含两千多行代码，不过这是学习 Wasm 的现成实例。</p></li></ul><h3 id="搭建本地服务器"><a href="#搭建本地服务器" class="headerlink" title="搭建本地服务器"></a>搭建本地服务器</h3><p>在代码路径中，搭建本地服务。在浏览器访问本地的文件会报错</p><ul><li><p><code>pnpm init</code></p><p>创建package.json文件</p></li><li><p><code>pnpm i http-server</code></p><p>安装<code>http-server</code></p></li><li><p><code>http-server -o</code></p><p>起本地服务，在浏览器打开html文件</p></li></ul><h3 id="验收"><a href="#验收" class="headerlink" title="验收"></a>验收</h3><p>用<code>http-server</code>起了本地服务后，在浏览器访问对应的域名加上生成的html文件，正常运行项目</p><p><a href="https://imgse.com/i/pPIfE5Q"><img src="https://z1.ax1x.com/2023/09/21/pPIfE5Q.png" alt="pPIfE5Q.png"></a></p><h2 id="参链"><a href="#参链" class="headerlink" title="参链"></a>参链</h2><p><a href="http://www.taodudu.cc/news/show-5750307.html?action=onClick">Emscripten编译器安装教程，亲测成功编译出第一个WebAssembly</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【webAsb】-Emscripten环境搭建&quot;&gt;&lt;a href=&quot;#【webAsb】-Emscripten环境搭建&quot; class=&quot;headerlink&quot; title=&quot;【webAsb】- Emscripten环境搭建&quot;&gt;&lt;/a&gt;【webAsb】- Emscri</summary>
      
    
    
    
    <category term="webAssembly" scheme="https://1578536879.github.io/categories/webAssembly/"/>
    
    
  </entry>
  
</feed>
